require "base64"
require "shellwords"
require "tmpdir"
require "fileutils"

default_platform(:ios)

platform :ios do
  desc "Build development-signed IPA using injected P12 + mobileprovision"
  lane :build_dev_ipa do
    # Inputs via ENV:
    # BUNDLE_ID, TEAM_ID, P12_BASE64, P12_PASSWORD, MOBILEPROVISION_BASE64, KEYCHAIN_PASSWORD
    app_identifier = ENV["BUNDLE_ID"] || UI.user_error!("Missing BUNDLE_ID")
    team_id        = ENV["TEAM_ID"]    || UI.user_error!("Missing TEAM_ID")
    keychain_pwd   = ENV["KEYCHAIN_PASSWORD"] || (Time.now.to_i.to_s + "k")
    keychain_name  = "ci-temp.keychain-db"
    signing_dir    = Dir.mktmpdir("signing-")
    p12_path       = File.join(signing_dir, "dev.p12")
    mp_path        = File.join(signing_dir, "dev.mobileprovision")

    begin
      # Decode secrets
      File.binwrite(p12_path, Base64.decode64(ENV.fetch("P12_BASE64")))
      File.chmod(0o600, p12_path)
      File.binwrite(mp_path,  Base64.decode64(ENV.fetch("MOBILEPROVISION_BASE64")))
      File.chmod(0o600, mp_path)

      # Create an ephemeral keychain
      create_keychain(
        name: keychain_name,
        password: keychain_pwd,
        default_keychain: true,
        unlock: true,
        timeout: 3600
      )

      # Import P12
      import_certificate(
        certificate_path: p12_path,
        certificate_password: ENV.fetch("P12_PASSWORD"),
        keychain_name: keychain_name,
        keychain_password: keychain_pwd
      )

      # Mobileprovision install
      # Decode the profile to read UUID & Name
      uuid = sh("security cms -D -i #{mp_path.shellescape} | /usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin").strip
      profile_name = sh("security cms -D -i #{mp_path.shellescape} | /usr/libexec/PlistBuddy -c 'Print Name' /dev/stdin").strip
      sh "mkdir -p ~/Library/MobileDevice/Provisioning\\ Profiles"
      sh "cp #{mp_path.shellescape} ~/Library/MobileDevice/Provisioning\\ Profiles/#{uuid}.mobileprovision"
      sh "chmod 600 ~/Library/MobileDevice/Provisioning\\ Profiles/#{uuid}.mobileprovision"

      # Pods handled in CI via Bundler; no-op here
      UI.message("Skipping pod install (handled in CI)")

      derived = "build/DerivedData"
      archive = "#{derived}/Archive.xcarchive"
      rb_path = "#{derived}/ResultBundle_archive.xcresult"

      # Archive (manual signing) with pipefail
      sh <<~BASH
        set -euo pipefail
        xcodebuild archive \
          -workspace ios/monGARS.xcworkspace \
          -scheme monGARS \
          -configuration Release \
          -destination "generic/platform=iOS" \
          DEVELOPMENT_TEAM=#{team_id} \
          PRODUCT_BUNDLE_IDENTIFIER=#{app_identifier} \
          CODE_SIGN_STYLE=Manual \
          CODE_SIGNING_ALLOWED=YES \
          CODE_SIGNING_REQUIRED=YES \
          PROVISIONING_PROFILE_SPECIFIER="#{profile_name}" \
          -derivedDataPath "#{derived}" \
          -resultBundlePath "#{rb_path}" \
          -archivePath "#{archive}" | xcbeautify
      BASH

    # ExportOptions.plist (development)
    export_plist = "build/exportOptions.plist"
    File.write(export_plist, <<~PLIST)
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      <plist version="1.0"><dict>
        <key>method</key><string>development</string>
        <key>compileBitcode</key><false/>
        <key>provisioningProfiles</key>
        <dict>
          <key>#{app_identifier}</key><string>#{profile_name}</string>
        </dict>
        <key>signingStyle</key><string>manual</string>
        <key>destination</key><string>export</string>
      </dict></plist>
    PLIST

    ipa_dir = "build/output"
    sh "mkdir -p #{ipa_dir}"

      # Export signed IPA with pipefail
      sh <<~BASH
        set -euo pipefail
        xcodebuild -exportArchive \
          -archivePath "#{archive}" \
          -exportOptionsPlist "#{export_plist}" \
          -exportPath "#{ipa_dir}" | xcbeautify
      BASH

      # Verify bundle + signature
      app_path = sh(%Q[/usr/libexec/PlistBuddy -c 'Print :ApplicationProperties:ApplicationPath' "#{archive}/Info.plist"]).strip
      full_app = File.join(archive, app_path)
      sh %Q[ls -la "#{full_app}"]
      sh %Q[test -f "#{full_app}/main.jsbundle"] # ensure RN bundle exists
      if ENV["CI_DEBUG"] == "1"
        sh %Q[codesign -dv --verbose=4 "#{full_app}" || true]
        sh %Q[security cms -D -i "#{full_app}/embedded.mobileprovision" | /usr/bin/plutil -p - | head -n 200 || true]
      end

      UI.success("IPA ready in #{ipa_dir}")
    ensure
      begin
        delete_keychain(name: keychain_name)
      rescue StandardError => e
        UI.important("Keychain cleanup skipped: #{e.message}")
      end

      begin
        FileUtils.rm_f(p12_path)
        FileUtils.rm_f(mp_path)
        FileUtils.remove_entry(signing_dir) if signing_dir && Dir.exist?(signing_dir)
      rescue StandardError => e
        UI.important("Signing artifact cleanup skipped: #{e.message}")
      end
    end
  end
end
