require "base64"
require "shellwords"

default_platform(:ios)

platform :ios do
  desc "Build development-signed IPA using injected P12 + mobileprovision"
  lane :build_dev_ipa do
    # Inputs via ENV:
    # BUNDLE_ID, TEAM_ID, APP_NAME (optional), P12_BASE64, P12_PASSWORD, MOBILEPROVISION_BASE64, KEYCHAIN_PASSWORD
    app_identifier = ENV["BUNDLE_ID"]
    team_id        = ENV["TEAM_ID"]
    app_name       = ENV["APP_NAME"] || "App"
    keychain_pwd   = ENV["KEYCHAIN_PASSWORD"] || (Time.now.to_i.to_s + "k")

    sh "mkdir -p build/signing"
    p12_path  = "build/signing/dev.p12"
    mp_path   = "build/signing/dev.mobileprovision"

    # Decode secrets
    File.write(p12_path, Base64.decode64(ENV.fetch("P12_BASE64")))
    File.write(mp_path,  Base64.decode64(ENV.fetch("MOBILEPROVISION_BASE64")))

    # Create an ephemeral keychain
    create_keychain(
      name: "ci-temp.keychain-db",
      password: keychain_pwd,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )

    # Import P12
    import_certificate(
      certificate_path: p12_path,
      certificate_password: ENV.fetch("P12_PASSWORD"),
      keychain_name: "ci-temp.keychain-db",
      keychain_password: keychain_pwd
    )

    # Mobileprovision install
    # Decode the profile to read UUID & Name
    uuid = sh("security cms -D -i #{mp_path.shellescape} | /usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin").strip
    profile_name = sh("security cms -D -i #{mp_path.shellescape} | /usr/libexec/PlistBuddy -c 'Print Name' /dev/stdin").strip
    sh "mkdir -p ~/Library/MobileDevice/Provisioning\\ Profiles"
    sh "cp #{mp_path.shellescape} ~/Library/MobileDevice/Provisioning\\ Profiles/#{uuid}.mobileprovision"

    # Ensure Pods are installed (safe if already done by CI)
    sh "cd ios && pod install --repo-update"

    derived = "build/DerivedData"
    archive = "#{derived}/Archive.xcarchive"
    rb_path = "#{derived}/ResultBundle_archive.xcresult"

    # Archive (manual signing)
    sh %Q[xcodebuild archive \
      -workspace ios/monGARS.xcworkspace \
      -scheme monGARS \
      -configuration Release \
      -destination "generic/platform=iOS" \
      DEVELOPMENT_TEAM=#{team_id} \
      PRODUCT_BUNDLE_IDENTIFIER=#{app_identifier} \
      CODE_SIGN_STYLE=Manual \
      PROVISIONING_PROFILE_SPECIFIER="#{profile_name}" \
      -derivedDataPath "#{derived}" \
      -resultBundlePath "#{rb_path}" \
      -archivePath "#{archive}" | xcbeautify]

    # ExportOptions.plist (development)
    export_plist = "build/exportOptions.plist"
    File.write(export_plist, <<~PLIST)
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      <plist version="1.0"><dict>
        <key>method</key><string>development</string>
        <key>compileBitcode</key><false/>
        <key>provisioningProfiles</key>
        <dict>
          <key>#{app_identifier}</key><string>#{profile_name}</string>
        </dict>
        <key>signingStyle</key><string>manual</string>
        <key>destination</key><string>export</string>
      </dict></plist>
    PLIST

    ipa_dir = "build/output"
    sh "mkdir -p #{ipa_dir}"

    # Export signed IPA
    sh %Q[xcodebuild -exportArchive \
      -archivePath "#{archive}" \
      -exportOptionsPlist "#{export_plist}" \
      -exportPath "#{ipa_dir}" | xcbeautify]

    # Verify bundle + signature
    app_path = sh(%Q[/usr/libexec/PlistBuddy -c 'Print :ApplicationProperties:ApplicationPath' "#{archive}/Info.plist"]).strip
    full_app = File.join(archive, app_path)
    sh %Q[ls -la "#{full_app}"]
    sh %Q[test -f "#{full_app}/main.jsbundle"] # ensure RN bundle exists
    sh %Q[codesign -dv --verbose=4 "#{full_app}" || true]
    sh %Q[security cms -D -i "#{full_app}/embedded.mobileprovision" | /usr/bin/plutil -p - | head -n 200 || true]

    UI.success("IPA ready in #{ipa_dir}")
  end
end
