require 'open3'
require 'fileutils'

platform :ios, '18.0'

def env_flag_enabled?(name, default:)
  raw = ENV[name]
  return default if raw.nil?

  normalized = raw.strip.downcase
  return true if %w[1 true yes on].include?(normalized)
  return false if %w[0 false no off].include?(normalized)

  default
end

def normalize_tokens(value)
  case value
  when nil
    [[], :array]
  when Array
    [value.compact.dup, :array]
  else
    [value.to_s.split(/\s+/), :string]
  end
end

def materialize_tokens(tokens, preference)
  filtered = tokens.compact
  return preference == :array ? [] : '' if filtered.empty?

  preference == :array ? filtered : filtered.join(' ')
end

def append_flag(value, flag)
  return ['$(inherited)', flag] if value.nil?

  tokens, preference = normalize_tokens(value)
  return materialize_tokens(tokens, preference) if tokens.include?(flag)

  tokens << flag
  materialize_tokens(tokens, preference)
end

def append_flags(value, flags)
  flags.reduce(value) { |memo, flag| append_flag(memo, flag) }
end

def remove_flag(value, flag)
  tokens, preference = normalize_tokens(value)
  original = tokens.dup
  tokens.reject! { |token| token == flag }
  [materialize_tokens(tokens, preference), tokens != original]
end

def ensure_swift_module_flags(swift_flags, module_map_flags, forbidden_flags: [])
  tokens, preference = normalize_tokens(swift_flags)
  changed = false

  unless tokens.include?('$(inherited)')
    tokens.unshift('$(inherited)')
    changed = true
  end

  forbidden_flags.each do |flag|
    before = tokens.length
    tokens.reject! { |token| token == flag }
    changed ||= tokens.length != before

    loop do
      entry = tokens.each_cons(2).with_index.find { |(first, second), _i| first == '-Xcc' && second == flag }
      break unless entry

      _, removal_index = entry
      tokens.slice!(removal_index, 2)
      changed = true
    end
  end

  original_tokens = tokens.dup
  cleaned_tokens = []
  index = 0
  while index < tokens.length
    token = tokens[index]

    if token == '-Xcc'
      next_token = tokens[index + 1]

      if next_token.nil? || next_token == '-Xcc'
        changed = true
        index += 1
        next
      end

      cleaned_tokens << token
      cleaned_tokens << next_token
      index += 2
      next
    end

    cleaned_tokens << token
    index += 1
  end

  if cleaned_tokens != original_tokens
    tokens = cleaned_tokens
    changed = true
  end

  module_map_flags.each do |flag|
    has_pair = tokens.each_cons(2).any? { |first, second| first == '-Xcc' && second == flag }
    next if has_pair

    tokens << '-Xcc'
    tokens << flag
    changed = true
  end

  [materialize_tokens(tokens, preference), changed]
end

install! 'cocoapods', :disable_input_output_paths => true

# --- Auto-detect the .xcodeproj near this Podfile ---
#
project_candidates = Dir.glob(File.join(__dir__, '*.xcodeproj')).sort
preferred = ENV['XCODE_PROJECT_NAME']
project_path =
  if preferred && File.exist?(File.join(__dir__, "#{preferred}.xcodeproj"))
    File.join(__dir__, "#{preferred}.xcodeproj")
  elsif project_candidates.any?
    project_candidates.first
  else
    nil
  end

raise "No .xcodeproj found near Podfile (#{__dir__})" unless project_path
project File.basename(project_path)

begin
  rn_path = File.join(__dir__, '..', 'node_modules', 'react-native')
  require File.join(rn_path, 'scripts', 'react_native_pods')
rescue => e
  abort "[Podfile] Could not load React Native pod helpers: #{e.message}\n" \
        "[Podfile] Hint: run 'npm ci' (or 'yarn install') at repo root before 'pod install'."
end

prepare_react_native_project!

# Ensure glog/src/config.h exists (prevents 'config.h not found' CI errors)
pre_install do |installer|
  Pod::UI.puts 'Ensuring glog/src/config.h existsâ€¦'
  glog_src = File.join(installer.sandbox.root.to_s, 'glog', 'src')
  config_h = File.join(glog_src, 'config.h')
  config_ios = File.join(glog_src, 'config_ios.h')
  config_cmake = File.join(glog_src, 'config.h.cmake')

  if File.directory?(glog_src) && !File.exist?(config_h)
    if File.exist?(config_ios)
      FileUtils.cp(config_ios, config_h)
    elsif File.exist?(config_cmake)
      FileUtils.cp(config_cmake, config_h)
    end
  end
end

target 'monGARS' do
  config = use_native_modules!

  new_arch_enabled = env_flag_enabled?('RCT_NEW_ARCH_ENABLED', default: true)
  fabric_enabled = env_flag_enabled?('RCT_FABRIC_ENABLED', default: new_arch_enabled)

  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => flags[:hermes_enabled],
    :fabric_enabled => fabric_enabled,
    :new_arch_enabled => new_arch_enabled,
    :app_path => "#{__dir__}/..",
    :config_file_dir => File.expand_path('..', __dir__)
  )

  # Add third-party pods only if present (keeps CI resilient)
  def add_pod_if_present(name, path)
    pod name, :path => path if File.exist?(File.join(__dir__, path))
  end

  add_pod_if_present 'RNCAsyncStorage', '../node_modules/@react-native-async-storage/async-storage'
  add_pod_if_present 'react-native-clipboard', '../node_modules/@react-native-community/clipboard'
  add_pod_if_present 'react-native-slider', '../node_modules/@react-native-community/slider'
  add_pod_if_present 'RNDeviceInfo', '../node_modules/react-native-device-info'
  add_pod_if_present 'RNFS', '../node_modules/react-native-fs'
  add_pod_if_present 'react-native-blob-util', '../node_modules/react-native-blob-util'
  add_pod_if_present 'react-native-safe-area-context', '../node_modules/react-native-safe-area-context'
  add_pod_if_present 'react-native-restart', '../node_modules/react-native-restart'
  add_pod_if_present 'react-native-quick-base64', '../node_modules/react-native-quick-base64'
  add_pod_if_present 'react-native-get-random-values', '../node_modules/react-native-get-random-values'
  add_pod_if_present 'react-native-uuid', '../node_modules/react-native-uuid'
  add_pod_if_present 'react-native-mmkv', '../node_modules/react-native-mmkv'
  add_pod_if_present 'react-native-sqlite-storage', '../node_modules/react-native-sqlite-storage'
  add_pod_if_present 'react-native-music-control', '../node_modules/react-native-music-control'

end

post_install do |installer|
  react_native_post_install(installer)

  # Unconditionally disable I/O path analysis to avoid flaky .xcfilelist issues
  installer.pods_project.targets.each do |t|
    t.build_configurations.each do |c|
      c.build_settings['DISABLE_INPUT_OUTPUT_PATHS'] = 'YES'
      c.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++20'
      c.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
    end
  end

  # Remove obsolete Hermes phase if present (idempotent)
  hermes_phase_labels = ['[Hermes] Replace Hermes']
  remove_hermes_phase = lambda do |target, scope|
    return 0 unless target.respond_to?(:shell_script_build_phases)
    phases = target.shell_script_build_phases.select do |phase|
      phase_name = phase.respond_to?(:name) ? phase.name.to_s.strip : ''
      display_name =
        if phase.respond_to?(:display_name)
          phase.display_name.to_s.strip
        else
          phase_name
        end
      hermes_phase_labels.any? { |needle| display_name.include?(needle) }
    end
    removed = 0
    phases.each { |p| target.build_phases.delete(p); removed += 1 }
    removed
  end

  header_search_fix = '$(PODS_ROOT)/Headers/Public/RCTDeprecation'
  module_map_path = '$(PODS_ROOT)/Headers/Public/RCTDeprecation/module.modulemap'
  legacy_module_map_path = '$(PODS_ROOT)/Headers/Public/RCTDeprecation/RCTDeprecation.modulemap'
  module_map_flag = "-fmodule-map-file=#{module_map_path}"
  legacy_module_map_flag = "-fmodule-map-file=#{legacy_module_map_path}"
  legacy_module_map_flag_pattern = /(?<!\S)#{Regexp.escape(legacy_module_map_flag)}(?!\S)/
  legacy_module_map_path_pattern = /(?<!\S)#{Regexp.escape(legacy_module_map_path)}(?!\S)/
  legacy_module_map_flag_quoted_pattern = /"#{Regexp.escape(legacy_module_map_flag)}"/
  legacy_module_map_path_quoted_pattern = /"#{Regexp.escape(legacy_module_map_path)}"/
  # Provide a single canonical module map so clang never has to reconcile two
  # definitions of the same module. Previous builds shipped both
  # `module.modulemap` and `RCTDeprecation.modulemap`, which allowed the compiler
  # to load either file depending on discovery order. When a precompiled header
  # cached one path and the next build discovered the other, Xcode 16 aborted the
  # build because the AST referenced a different module map path. Keeping only the
  # canonical file and updating build settings to point at it ensures every
  # invocation resolves the module identically.
  module_map_flags = [module_map_flag]
  module_map_dir = File.join(installer.sandbox.root.to_s, 'Headers', 'Public', 'RCTDeprecation')
  module_map_disk = File.join(module_map_dir, 'module.modulemap')
  legacy_module_map_disk = File.join(module_map_dir, 'RCTDeprecation.modulemap')
  module_map_template = File.join(__dir__, 'Config', 'RCTDeprecation.modulemap')
  raise "Missing #{module_map_template}; ensure it is checked in" unless File.exist?(module_map_template)
  desired_module_map = File.read(module_map_template)

  FileUtils.mkdir_p(module_map_dir)
  existing_module_map = File.exist?(module_map_disk) ? File.read(module_map_disk) : nil
  if existing_module_map != desired_module_map
    Pod::UI.puts "[Podfile] Writing #{module_map_disk} (primary)"
    File.write(module_map_disk, desired_module_map)
  end

  if File.exist?(legacy_module_map_disk) || File.symlink?(legacy_module_map_disk)
    Pod::UI.puts "[Podfile] Removing legacy module map at #{legacy_module_map_disk}"
    FileUtils.rm_f(legacy_module_map_disk)
  end

  pods_project_modified = false
  installer.pods_project.targets.each do |target|
    removed = remove_hermes_phase.call(target, 'pods')
    if removed > 0
      Pod::UI.puts "[Podfile] Removed #{removed} legacy Hermes phases from #{target.name}"
      pods_project_modified = true
    end
  end

  installer.pods_project.targets.each do |target|
    next unless target.name == 'RCTDeprecation'

    target.build_configurations.each do |config|
      updated = false

      header_paths = config.build_settings['HEADER_SEARCH_PATHS']
      if header_paths.nil?
        config.build_settings['HEADER_SEARCH_PATHS'] = ['$(inherited)', header_search_fix]
        updated = true
      elsif header_paths.is_a?(Array)
        unless header_paths.include?(header_search_fix)
          config.build_settings['HEADER_SEARCH_PATHS'] = header_paths + [header_search_fix]
          updated = true
        end
      else
        value = header_paths.to_s
        unless value.include?(header_search_fix)
          config.build_settings['HEADER_SEARCH_PATHS'] = "#{value} #{header_search_fix}"
          updated = true
        end
      end

      existing_c_flags = config.build_settings['OTHER_CFLAGS']
      pruned_c_flags, pruned = remove_flag(existing_c_flags, legacy_module_map_flag)
      if pruned
        config.build_settings['OTHER_CFLAGS'] = pruned_c_flags
        existing_c_flags = pruned_c_flags
        updated = true
      end

      new_c_flags = append_flags(existing_c_flags, module_map_flags)
      if new_c_flags != existing_c_flags
        config.build_settings['OTHER_CFLAGS'] = new_c_flags
        existing_c_flags = new_c_flags
        updated = true
      end

      existing_cpp_flags = config.build_settings['OTHER_CPLUSPLUSFLAGS']
      pruned_cpp_flags, pruned_cpp = remove_flag(existing_cpp_flags, legacy_module_map_flag)
      if pruned_cpp
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = pruned_cpp_flags
        existing_cpp_flags = pruned_cpp_flags
        updated = true
      end

      new_cpp_flags = append_flags(existing_cpp_flags, module_map_flags)
      if new_cpp_flags != existing_cpp_flags
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = new_cpp_flags
        existing_cpp_flags = new_cpp_flags
        updated = true
      end

      swift_tokens, swift_changed = ensure_swift_module_flags(
        config.build_settings['OTHER_SWIFT_FLAGS'],
        module_map_flags,
        :forbidden_flags => [legacy_module_map_flag]
      )
      if swift_changed
        config.build_settings['OTHER_SWIFT_FLAGS'] = swift_tokens
        updated = true
      end

      if config.build_settings['MODULEMAP_FILE'] != module_map_path
        config.build_settings['MODULEMAP_FILE'] = module_map_path
        updated = true
      end

      if config.build_settings['DEFINES_MODULE'] != 'YES'
        config.build_settings['DEFINES_MODULE'] = 'YES'
        updated = true
      end

      if updated
        Pod::UI.puts "[Podfile] Updated build settings for #{target.name} (#{config.name})"
        pods_project_modified = true
      end
    end
  end

  installer.pods_project.save if pods_project_modified
  installer.aggregate_targets.each do |aggregate_target|
    user_project = aggregate_target.user_project
    next unless user_project

    project_modified = false

    user_project.targets.each do |target|
      next unless target.name == 'monGARS'

      target.build_configurations.each do |config|
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++20'
        config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
        existing = config.build_settings['HEADER_SEARCH_PATHS']

        if existing.nil?
          config.build_settings['HEADER_SEARCH_PATHS'] = ['$(inherited)', header_search_fix]
          project_modified = true
          next
        end

        if existing.is_a?(Array)
          unless existing.include?(header_search_fix)
            existing << header_search_fix
            config.build_settings['HEADER_SEARCH_PATHS'] = existing
            project_modified = true
          end
        else
          value = existing.to_s
          unless value.include?(header_search_fix)
            config.build_settings['HEADER_SEARCH_PATHS'] = "#{value} #{header_search_fix}"
            project_modified = true
          end
        end

        existing_c_flags = config.build_settings['OTHER_CFLAGS']
        pruned_c_flags, pruned = remove_flag(existing_c_flags, legacy_module_map_flag)
        if pruned
          config.build_settings['OTHER_CFLAGS'] = pruned_c_flags
          existing_c_flags = pruned_c_flags
          project_modified = true
        end

        updated_c_flags = append_flags(existing_c_flags, module_map_flags)
        if updated_c_flags != existing_c_flags
          config.build_settings['OTHER_CFLAGS'] = updated_c_flags
          existing_c_flags = updated_c_flags
          project_modified = true
        end

        existing_cpp_flags = config.build_settings['OTHER_CPLUSPLUSFLAGS']
        pruned_cpp_flags, pruned_cpp = remove_flag(existing_cpp_flags, legacy_module_map_flag)
        if pruned_cpp
          config.build_settings['OTHER_CPLUSPLUSFLAGS'] = pruned_cpp_flags
          existing_cpp_flags = pruned_cpp_flags
          project_modified = true
        end

        updated_cpp_flags = append_flags(existing_cpp_flags, module_map_flags)
        if updated_cpp_flags != existing_cpp_flags
          config.build_settings['OTHER_CPLUSPLUSFLAGS'] = updated_cpp_flags
          existing_cpp_flags = updated_cpp_flags
          project_modified = true
        end

        swift_tokens, swift_changed = ensure_swift_module_flags(
          config.build_settings['OTHER_SWIFT_FLAGS'],
          module_map_flags,
          :forbidden_flags => [legacy_module_map_flag]
        )
        if swift_changed
          config.build_settings['OTHER_SWIFT_FLAGS'] = swift_tokens
          project_modified = true
        end
      end
    end

    user_project.save if project_modified
  end

  support_files_root = File.join(__dir__, 'Pods', 'Target Support Files')
  if Dir.exist?(support_files_root)
    Dir.glob(File.join(support_files_root, '**', '*.xcconfig')).each do |xcconfig_path|
      original = File.read(xcconfig_path)
      replaced = original.gsub(legacy_module_map_flag_pattern, module_map_flag)
      replaced = replaced.gsub(legacy_module_map_path_pattern, module_map_path)
      replaced = replaced.gsub(legacy_module_map_flag_quoted_pattern, "\"#{module_map_flag}\"")
      replaced = replaced.gsub(legacy_module_map_path_quoted_pattern, "\"#{module_map_path}\"")

      next if replaced == original

      Pod::UI.puts "[Podfile] Updated #{xcconfig_path} to prefer module.modulemap"
      File.write(xcconfig_path, replaced)
    end
  end

  # Try to apply RN Contacts orientation patch (if repo has the script)
  patch_script = File.join(__dir__, 'scripts', 'patch-react-native-contacts.sh')
  if File.exist?(patch_script)
    stdout_str, stderr_str, status = Open3.capture3('bash', patch_script)
    if !status.success?
      stdout_str.each_line { |line| Pod::UI.warn("[Podfile] STDOUT: #{line.strip}") unless line.strip.empty? }
      stderr_str.each_line { |line| Pod::UI.warn("[Podfile] STDERR: #{line.strip}") unless line.strip.empty? }
      Pod::UI.warn('[Podfile] Contacts patch failed (non-fatal). ' \
                   'This may be due to sandboxing or idempotency. Consider re-running the patch manually.')
    end
  else
    Pod::UI.warn('[Podfile] Missing ios/scripts/patch-react-native-contacts.sh; skipping contacts orientation patch.')
  end
end
