# Ensure the platform is set to iOS 18.0
platform :ios, '18.0'
ENV['RCT_NEW_ARCH_ENABLED'] = "1" # Enable Fabric/TurboModules
install! 'cocoapods', :disable_input_output_paths => true

# Include React Native's CocoaPods helpers
require_relative '../node_modules/react-native/scripts/react_native_pods'

project_candidates = Dir['*.xcodeproj'] + Dir['**/*.xcodeproj']
project_path = project_candidates.first
raise "No .xcodeproj found near Podfile (#{__dir__})" unless project_path

# Map build configurations so CocoaPods knows which are debug vs release
project project_path, 'Debug' => :debug, 'Release' => :release
app_target = File.basename(project_path, '.xcodeproj')

USE_FLIPPER = ENV['USE_FLIPPER'] == '1'
NEW_ARCH_ENABLED = ENV['RCT_NEW_ARCH_ENABLED'] == '1'

target app_target do
  use_frameworks! :linkage => :static

  config = (use_native_modules! rescue nil) || {}
  react_native_path = config[:reactNativePath] || File.expand_path('../node_modules/react-native', __dir__)

  use_react_native!(
    :path => react_native_path,
    :hermes_enabled => true,
    :new_arch_enabled => true,
    :fabric_enabled => NEW_ARCH_ENABLED,
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  # Codegen pods (ReactCodegen + ReactAppDependencyProvider) are handled automatically by use_react_native! using :app_path

  if USE_FLIPPER
    use_flipper!({ 'Flipper' => '0.203.0' })
  end

  post_install do |installer|
    # Normalize the deployment target and disable optimization in Debug for SwiftUI previews
    installer.pods_project.build_configurations.each do |c|
      c.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '18.0'
      # Build Simulator for arm64 on Apple Silicon runners
      c.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'x86_64'
      # Force -Onone for Debug builds so previews work
      if c.name.include?('Debug')
        c.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
      end
    end
    installer.pods_project.targets.each do |t|
      t.build_configurations.each do |c|
        c.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '18.0'
        c.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'NO'
        c.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'x86_64'
        # Force -Onone for Debug builds so previews work
        if c.name.include?('Debug')
          c.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
        end
      end
    end
    react_native_post_install(installer)

    # Tidy warnings for a couple of pods
    installer.pods_project.targets.each do |t|
      if ['react-native-slider','RNCAsyncStorage'].include? t.name
        t.build_configurations.each do |cfg|
          cfg.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
          cfg.build_settings['WARNING_CFLAGS'] ||= ['$(inherited)']
          cfg.build_settings['WARNING_CFLAGS'] << '-Wno-non-modular-include-in-framework-module'
        end
      end
    end

    # Make sure ReactCommon turbomodules headers are discoverable
    installer.pods_project.targets.each do |t|
      next unless t.name == 'ReactCommon'
      t.build_configurations.each do |cfg|
        cfg.build_settings['HEADER_SEARCH_PATHS'] ||= '$(inherited)'
        cfg.build_settings['HEADER_SEARCH_PATHS'] << ' $(PODS_ROOT)/Headers/Public/ReactCommon/ReactCommon/react/nativemodule/core'
      end
    end

    # Ensure script phases declare outputs to avoid reruns
    installer.pods_project.targets.each do |t|
      t.build_phases.each do |phase|
        next unless phase.respond_to?(:name) && phase.name == 'Create Symlinks to Header Folders'
        phase.output_paths = ["$(BUILD_DIR)/symlinks/#{t.name}"]
      end
    end

    File.write('Pods/.ran_post_install', 'Post install executed successfully')
  end
end
