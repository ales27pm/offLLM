platform :ios, '13.0'

# 1) Stop autodetection and point CocoaPods at your project explicitly.
project 'monGARS.xcodeproj'

# 2) Static frameworks are typical for RN; change if you need dynamic.
use_frameworks! :linkage => :static

# 3) React Native helper
require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

# 4) Ensure glog/src/config.h exists before build (prevents your fatal error).
pre_install do |installer|
  Pod::UI.puts "Ensuring glog/src/config.h exists…"
  sandbox = installer.sandbox
  glog_src = File.join(sandbox.root.to_s, 'glog', 'src')
  config_h = File.join(glog_src, 'config.h')
  config_ios = File.join(glog_src, 'config_ios.h')
  config_cmake = File.join(glog_src, 'config.h.cmake')

  if File.directory?(glog_src) && !File.exist?(config_h)
    if File.exist?(config_ios)
      FileUtils.cp(config_ios, config_h)
      Pod::UI.puts "Copied glog/src/config_ios.h -> config.h"
    elsif File.exist?(config_cmake)
      FileUtils.cp(config_cmake, config_h)
      Pod::UI.puts "Copied glog/src/config.h.cmake -> config.h"
    else
      Pod::UI.warn "Could not find a glog config template to copy."
    end
  end
end

target 'monGARS' do
  # Hermes is default for current RN; flip to false if you use JSC.
  use_react_native!(
    :hermes_enabled => true,
    :fabric_enabled => true,
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  # Typical RN pods that match your logs; keep/remove as your app needs.
  pod 'RNFS', :path => '../node_modules/react-native-fs'
  pod 'RNDeviceInfo', :path => '../node_modules/react-native-device-info'
  pod 'RNCClipboard', :path => '../node_modules/@react-native-clipboard/clipboard'
  pod 'RNCAsyncStorage', :path => '../node_modules/@react-native-async-storage/async-storage'
  pod 'react-native-contacts', :path => '../node_modules/react-native-contacts'
  pod 'react-native-config', :path => '../node_modules/react-native-config'
  pod 'react-native-voice', :path => '../node_modules/@react-native-voice/voice'
  pod 'react-native-sqlite-storage', :path => '../node_modules/react-native-sqlite-storage'
  pod 'react-native-slider', :path => '../node_modules/@react-native-community/slider'
  pod 'react-native-music-control', :path => '../node_modules/react-native-music-control'

  # If you have Swift modules without a bridging header:
  # use_frameworks! :linkage => :static

  # Autolink any remaining native modules
  use_native_modules!

  # Resources bundles some pods generate (keep if your app uses them)
  # pod 'RNDeviceInfo/RNDeviceInfoPrivacyInfo', :path => '../node_modules/react-native-device-info'

  # Unit/UI test targets (optional)
  # target 'monGARSTests' do
  #   inherit! :complete
  # end
end

post_install do |installer|
  react_native_post_install(
    installer,
    # If you hit flipper issues on Xcode 16, set here:
    # :mac_catalyst_enabled => false
  )

  # Xcode 16 / arm64 warnings won’t fail the build, but we can clean a few:
  installer.pods_project.targets.each do |t|
    t.build_configurations.each do |c|
      # keep Release as -O (your logs show Xcode disabling previews; that’s ok)
      if c.name == 'Debug'
        c.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
      end
      # Do not treat warnings as errors for 3rd-party pods
      c.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
    end
  end
end
