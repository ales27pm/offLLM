# Ensure the platform is set to iOS 18.0
platform :ios, '18.0'
ENV['RCT_NEW_ARCH_ENABLED'] = "1" # Enable Fabric/TurboModules

# Include React Native's CocoaPods helpers
require_relative '../node_modules/react-native/scripts/react_native_pods'

# --- Build hygiene for CI ---
install! 'cocoapods',
  :generate_multiple_pod_projects => true,
  # Disable file lists since we statically link pods; avoids missing .xcfilelist lookups on CI
  :disable_input_output_paths => true,
  :warn_for_multiple_pod_sources => true
# --- Robust project discovery (handles subfolders like ios/MyOfflineLLMApp/*.xcodeproj)
project_candidates = Dir['*.xcodeproj'] + Dir['**/*.xcodeproj']
project_path = project_candidates.first
raise "No .xcodeproj found near Podfile (#{__dir__})" unless project_path
puts "üìÅ Using Xcode project at: #{project_path}"

# Map build configurations so CocoaPods knows which are debug vs release
project project_path, 'Debug' => :debug, 'Release' => :release
app_target = File.basename(project_path, '.xcodeproj')

USE_FLIPPER = ENV['USE_FLIPPER'] == '1'
NEW_ARCH_ENABLED = ENV['RCT_NEW_ARCH_ENABLED'] == '1'

target app_target do
  use_frameworks! :linkage => :static

  config = (use_native_modules! rescue nil) || {}
  react_native_path = config[:reactNativePath] || File.expand_path('../node_modules/react-native', __dir__)

  use_react_native!(
    :path => react_native_path,
    :hermes_enabled => true,
    :new_arch_enabled => true,
    :fabric_enabled => NEW_ARCH_ENABLED,
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  # Codegen pods (ReactCodegen + ReactAppDependencyProvider) are handled automatically by use_react_native! using :app_path

  if USE_FLIPPER
    use_flipper!({ 'Flipper' => '0.203.0' })
  end

end

post_install do |installer|
  react_native_post_install(installer) if defined?(react_native_post_install)

  # CI hardening: delete any Hermes "Replace Hermes" script phases on CI runners
  if ENV['CI'] == 'true'
    begin
      pods_project = installer.pods_project
      pods_project.targets.each do |t|
        next unless t.name == 'hermes-engine'
        t.shell_script_build_phases.each do |phase|
          if phase.name&.include?('Replace Hermes for the right configuration')
            puts "üßπ Removing Hermes script phase from target: #{t.name}"
            t.build_phases.delete(phase)
          end
        end
      end
      pods_project.save
    rescue => e
      puts "[warn] Unable to delete Hermes script phase: #{e}"
    end
  end

  # --- Guardrail: fail fast if any Hermes "Replace Hermes" script phase remains
  begin
    offending = []
    installer.pods_project.targets.each do |t|
      next unless t.name == 'hermes-engine'
      t.shell_script_build_phases.each do |phase|
        name = (phase.name || '').downcase
        body = (phase.shell_script || '').downcase
        if name.include?('replace hermes') || body.include?('replace hermes')
          offending << "#{t.name} :: #{phase.name}"
        end
      end
    end
    unless offending.empty?
      raise <<~MSG
        Detected forbidden Hermes script phase(s):
          #{offending.join("\n  ")}
        CI policy: the "[Hermes] Replace Hermes" script must not exist.
        The phase was expected to be deleted in post_install. Investigate Pod integration.
      MSG
    end
  rescue => e
    UI.puts "‚ùå Post-install guard triggered:\n#{e}\n"
    raise
  end

  # --- Safety: with static Pods, scrub any input/output file lists CocoaPods might add
  # This prevents Xcode from expecting *.xcfilelist even if some scripts re-introduce them.
  # Applies to both the Pods project and the user app project.
  def scrub_cp_filelists_from_target(target)
    target.build_phases.each do |phase|
      next unless phase.respond_to?(:name)
      next unless phase.name&.include?('[CP]')
      begin
        phase.input_paths = [] if phase.respond_to?(:input_paths=)
        phase.output_paths = [] if phase.respond_to?(:output_paths=)
      rescue => e
        puts "‚ö†Ô∏è  Skipping scrub for phase #{phase.name}: #{e}"
      end
    end
  end

  # Pods project
  installer.pods_project.targets.each do |t|
    scrub_cp_filelists_from_target(t)
    t.build_configurations.each do |cfg|
      cfg.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
      if cfg.name.include?('Debug')
        # SwiftUI previews expect no optimization in debug builds
        cfg.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
        cfg.build_settings['SWIFT_COMPILATION_MODE'] = 'singlefile'
      else
        cfg.build_settings['SWIFT_OPTIMIZATION_LEVEL'] ||= '-O'
      end

      # Ensure mixed C++ headers compile under gnu++17 and Swift 5
      cfg.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] ||= 'gnu++17'
      cfg.build_settings['SWIFT_VERSION'] ||= '5.0'
    end
  end

  # User (app) project(s)
  installer.aggregate_targets.each do |agg|
    user_project = agg.user_project
    user_project.targets.each do |t|
      scrub_cp_filelists_from_target(t)
      t.build_configurations.each do |cfg|
        cfg.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
      end
    end
    user_project.save
  end
end

# Silences "will be run during every build" warnings for [CP] phases lacking I/O paths
post_integrate do |installer|
  [installer.pods_project, installer.aggregate_targets.first.user_project].each do |proj|
    proj.targets.each do |t|
      t.build_phases.select { |p| p.isa == 'PBXShellScriptBuildPhase' && p.name&.start_with?('[CP]') }.each do |run|
        if (run.input_paths || []).empty? && (run.output_paths || []).empty?
          run.always_out_of_date = '1'
        end
      end
    end
    proj.save
  end
end
