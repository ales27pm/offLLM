# Ensure pods support iOS 18.0+; the app's deployment target lives in XcodeGen's project.yml too
platform :ios, '18.0'
ENV['RCT_NEW_ARCH_ENABLED'] = "1" # Enable Fabric/TurboModules

# Include React Native's CocoaPods helpers
require_relative '../node_modules/react-native/scripts/react_native_pods'

# --- Build hygiene for CI ---
install! 'cocoapods',
  :generate_multiple_pod_projects => true,
  # We link pods statically; avoid .xcfilelist noise & CI lookups
  :disable_input_output_paths => true,
  :warn_for_multiple_pod_sources => true

# --- Robust project discovery (ios/ has XcodeGen output)
project_candidates = Dir['*.xcodeproj'] + Dir['**/*.xcodeproj']
project_path = project_candidates.first
raise "No .xcodeproj found near Podfile (#{__dir__})" unless project_path
puts "Using Xcode project at: #{project_path}"

# Map build configurations so CocoaPods knows which are debug vs release
project project_path, 'Debug' => :debug, 'Release' => :release
app_target = File.basename(project_path, '.xcodeproj')

USE_FLIPPER = ENV['USE_FLIPPER'] == '1'
NEW_ARCH_ENABLED = ENV['RCT_NEW_ARCH_ENABLED'] == '1'

target app_target do
  use_frameworks! :linkage => :static

  config = (use_native_modules! rescue nil) || {}
  react_native_path = config[:reactNativePath] || File.expand_path('../node_modules/react-native', __dir__)

  use_react_native!(
    :path => react_native_path,
    :hermes_enabled => true,
    :new_arch_enabled => true,
    :fabric_enabled => NEW_ARCH_ENABLED,
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  # Ensure <react/bridging/*.h> resolves during compilation.
  pod 'ReactCommon/turbomodule/bridging', :path => "#{react_native_path}/ReactCommon"

  if USE_FLIPPER
    use_flipper!({ 'Flipper' => '0.203.0' })
  end
end

# ---- Helpers ----
FORBIDDEN_HERMES_MARKERS = [
  'replace hermes',
  'replace hermes for the right configuration',
  '[hermes]'
].freeze

def strip_hermes_replacement_scripts!(project)
  project.targets.each do |t|
    t.build_phases
      .select { |p|
        p.isa == 'PBXShellScriptBuildPhase' &&
        FORBIDDEN_HERMES_MARKERS.any? { |m|
          (p.name || '').downcase.include?(m) ||
          (p.shell_script || '').downcase.include?(m)
        }
      }
      .each do |p|
        t.build_phases.delete(p)
        p.remove_from_project
      end
  end
  project.save
end

def pods_projects_for(installer)
  pods = [installer.pods_project]
  pods.concat(Array(installer.generated_projects)) if installer.respond_to?(:generated_projects)
  pods.compact
end

def user_projects_for(installer)
  installer.aggregate_targets.map(&:user_project).compact.uniq { |p| p.path.to_s }
end

def scrub_cp_filelists_from_target(target)
  target.build_phases.each do |phase|
    next unless phase.respond_to?(:name)
    next unless phase.name&.include?('[CP]')
    begin
      phase.input_paths = [] if phase.respond_to?(:input_paths=)
      phase.output_paths = [] if phase.respond_to?(:output_paths=)
      phase.input_file_list_paths = [] if phase.respond_to?(:input_file_list_paths=)
      phase.output_file_list_paths = [] if phase.respond_to?(:output_file_list_paths=)
    rescue => e
      puts "WARN: Skipping scrub for phase #{phase.name}: #{e}"
    end
  end
end

# ---- Post-install hardening (all-in-one) ----
post_install do |installer|
  react_native_post_install(installer) if defined?(react_native_post_install)

  pods_projects = pods_projects_for(installer)
  user_projects = user_projects_for(installer)
  all_projects  = (pods_projects + user_projects).uniq { |p| p.path.to_s }

  min_target = Gem::Version.new('18.0')

  all_projects.each do |proj|
    # 1) Remove Hermes "replacement" scripts everywhere
    strip_hermes_replacement_scripts!(proj)

    proj.targets.each do |t|
      # 2) Scrub CP *.xcfilelist expectations & quiet “every build” warnings
      scrub_cp_filelists_from_target(t)

      t.build_configurations.each do |cfg|
        bs = cfg.build_settings

        # Allow CocoaPods run-script phases to create header symlinks (Xcode 15+ default is YES)
        bs['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO' # see Apple/IndieStack notes.  [oai_citation:0‡Apple Developer](https://developer.apple.com/forums/thread/731041?utm_source=chatgpt.com) [oai_citation:1‡Indie Stack](https://indiestack.com/2023/06/xcode-build-script-sandboxing/?utm_source=chatgpt.com)

        # Swift previews note — harmless; ensure Debug uses -Onone
        if cfg.name.include?('Debug')
          bs['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
          bs['SWIFT_COMPILATION_MODE']   = 'singlefile'
        else
          bs['SWIFT_OPTIMIZATION_LEVEL'] ||= '-O'
        end

        # Stable toolchain for RN/Folly
        bs['CLANG_CXX_LANGUAGE_STANDARD'] ||= 'gnu++17'
        bs['CLANG_CXX_LIBRARY']          ||= 'libc++'
        bs['GCC_C_LANGUAGE_STANDARD']    ||= 'gnu11'

        # **Disable Folly SIMD** to avoid SimdAnyOf/SimdForEach failures
        # and make sure flags inherit rather than override
        bs['OTHER_CPLUSPLUSFLAGS'] = [bs['OTHER_CPLUSPLUSFLAGS'], '$(inherited)', '-DFOLLY_DISABLE_SIMD=1'].compact.join(' ').squeeze(' ')
        bs['OTHER_CFLAGS']         = [bs['OTHER_CFLAGS'],         '$(inherited)', '-DFOLLY_DISABLE_SIMD=1'].compact.join(' ').squeeze(' ')
        # (Folly SIMD headers are guarded by feature macros; disabling SIMD is a supported path.)  [oai_citation:2‡Fossies](https://fossies.org/linux/folly/folly/algorithm/simd/detail/SimdPlatform.h?utm_source=chatgpt.com)

        # Bump any low deployment targets; enforce iOS 18.0+ across all Pods
        current = Gem::Version.new(bs['IPHONEOS_DEPLOYMENT_TARGET'] || '0')
        bs['IPHONEOS_DEPLOYMENT_TARGET'] = min_target.to_s if current < min_target

        # Ensure dSYMs on Release
        if cfg.name == 'Release'
          bs['DEBUG_INFORMATION_FORMAT'] = 'dwarf-with-dsym'
        end
      end
    end

    # Mark [CP] phases without I/O as always out of date (keeps Xcode quiet)
    proj.targets.each do |t|
      t.build_phases
        .select { |p| p.isa == 'PBXShellScriptBuildPhase' && p.name&.start_with?('[CP]') }
        .each do |run|
          if (run.input_paths || []).empty? && (run.output_paths || []).empty?
            run.always_out_of_date = '1'
          end
        end
    end

    proj.save
  end

  # CI guard: fail if any Hermes replacement script remains
  if ENV['CI']
    offending = []
    all_projects.each do |proj|
      proj.targets.each do |t|
        t.build_phases.select { |p| p.isa == 'PBXShellScriptBuildPhase' }.each do |phase|
          name = (phase.name || '').downcase
          body = (phase.shell_script || '').downcase
          if FORBIDDEN_HERMES_MARKERS.any? { |m| name.include?(m) || body.include?(m) }
            offending << "#{proj.path.basename} :: #{t.name} :: #{phase.name}"
          end
        end
      end
    end
    unless offending.empty?
      raise <<~MSG
        Detected forbidden Hermes script phase(s):
          #{offending.join("\n  ")}
        CI policy: the "[Hermes] Replace Hermes" script must not exist after pod install.
      MSG
    end
  end
end

# Final pass after integration (keeps projects clean across re-runs)
post_integrate do |installer|
  (pods_projects_for(installer) + user_projects_for(installer)).each do |proj|
    strip_hermes_replacement_scripts!(proj)
    proj.targets.each do |t|
      t.build_phases
        .select { |p| p.isa == 'PBXShellScriptBuildPhase' && p.name&.start_with?('[CP]') }
        .each { |run| run.always_out_of_date = '1' if (run.input_paths || []).empty? && (run.output_paths || []).empty? }
    end
    proj.save
  end
end