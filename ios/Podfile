require 'open3'

post_install_hook = File.expand_path('scripts/post_install_hardening_hook.rb', __dir__)
require post_install_hook if File.exist?(post_install_hook)

platform :ios, '18.0'

def env_flag_enabled?(name, default:)
  raw = ENV[name]
  return default if raw.nil?

  normalized = raw.strip.downcase
  return true if %w[1 true yes on].include?(normalized)
  return false if %w[0 false no off].include?(normalized)

  default
end

def append_build_flag!(config, key, flag)
  current = config.build_settings[key]
  changed = false

  case current
  when nil
    config.build_settings[key] = ['$(inherited)', flag]
    changed = true
  when Array
    unless current.include?(flag)
      current << flag
      config.build_settings[key] = current
      changed = true
    end
  else
    tokens = current.to_s.split(/\s+/)
    unless tokens.include?(flag)
      tokens << flag
      config.build_settings[key] = tokens.join(' ')
      changed = true
    end
  end

  changed
end

def append_swift_module_flag!(config, module_map_flag)
  pair = ['-Xcc', module_map_flag]
  current = config.build_settings['OTHER_SWIFT_FLAGS']
  changed = false

  case current
  when nil
    config.build_settings['OTHER_SWIFT_FLAGS'] = ['$(inherited)'] + pair
    changed = true
  when Array
    pair.each do |component|
      next if current.include?(component)
      current << component
      changed = true
    end
    config.build_settings['OTHER_SWIFT_FLAGS'] = current
  else
    tokens = current.to_s.split(/\s+/)
    pair.each do |component|
      next if tokens.include?(component)
      tokens << component
      changed = true
    end
    config.build_settings['OTHER_SWIFT_FLAGS'] = tokens.join(' ')
  end

  changed
end

install! 'cocoapods', :disable_input_output_paths => true

# --- Auto-detect the .xcodeproj near this Podfile ---
#
project_candidates = Dir.glob(File.join(__dir__, '*.xcodeproj')).sort
preferred = ENV['XCODE_PROJECT_NAME']
project_path =
  if preferred && File.exist?(File.join(__dir__, "#{preferred}.xcodeproj"))
    File.join(__dir__, "#{preferred}.xcodeproj")
  elsif project_candidates.any?
    project_candidates.first
  else
    nil
  end

raise "No .xcodeproj found near Podfile (#{__dir__})" unless project_path
project File.basename(project_path)

begin
  rn_path = File.join(__dir__, '..', 'node_modules', 'react-native')
  require File.join(rn_path, 'scripts', 'react_native_pods')
rescue => e
  abort "[Podfile] Could not load React Native pod helpers: #{e.message}\n" \
        "[Podfile] Hint: run 'npm ci' (or 'yarn install') at repo root before 'pod install'."
end

prepare_react_native_project!

# Ensure glog/src/config.h exists (prevents 'config.h not found' CI errors)
pre_install do |installer|
  Pod::UI.puts 'Ensuring glog/src/config.h existsâ€¦'
  glog_src = File.join(installer.sandbox.root.to_s, 'glog', 'src')
  config_h = File.join(glog_src, 'config.h')
  config_ios = File.join(glog_src, 'config_ios.h')
  config_cmake = File.join(glog_src, 'config.h.cmake')

  if File.directory?(glog_src) && !File.exist?(config_h)
    if File.exist?(config_ios)
      FileUtils.cp(config_ios, config_h)
    elsif File.exist?(config_cmake)
      FileUtils.cp(config_cmake, config_h)
    end
  end
end

target 'monGARS' do
  config = use_native_modules!

  new_arch_enabled = env_flag_enabled?('RCT_NEW_ARCH_ENABLED', default: true)
  fabric_enabled = env_flag_enabled?('RCT_FABRIC_ENABLED', default: new_arch_enabled)

  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => flags[:hermes_enabled],
    :fabric_enabled => fabric_enabled,
    :new_arch_enabled => new_arch_enabled,
    :app_path => "#{__dir__}/..",
    :config_file_dir => File.expand_path('..', __dir__)
  )

  # Add third-party pods only if present (keeps CI resilient)
  def add_pod_if_present(name, path)
    pod name, :path => path if File.exist?(File.join(__dir__, path))
  end

  add_pod_if_present 'RNCAsyncStorage', '../node_modules/@react-native-async-storage/async-storage'
  add_pod_if_present 'react-native-clipboard', '../node_modules/@react-native-community/clipboard'
  add_pod_if_present 'react-native-slider', '../node_modules/@react-native-community/slider'
  add_pod_if_present 'RNDeviceInfo', '../node_modules/react-native-device-info'
  add_pod_if_present 'RNFS', '../node_modules/react-native-fs'
  add_pod_if_present 'react-native-blob-util', '../node_modules/react-native-blob-util'
  add_pod_if_present 'react-native-safe-area-context', '../node_modules/react-native-safe-area-context'
  add_pod_if_present 'react-native-restart', '../node_modules/react-native-restart'
  add_pod_if_present 'react-native-quick-base64', '../node_modules/react-native-quick-base64'
  add_pod_if_present 'react-native-get-random-values', '../node_modules/react-native-get-random-values'
  add_pod_if_present 'react-native-uuid', '../node_modules/react-native-uuid'
  add_pod_if_present 'react-native-mmkv', '../node_modules/react-native-mmkv'
  add_pod_if_present 'react-native-sqlite-storage', '../node_modules/react-native-sqlite-storage'
  add_pod_if_present 'react-native-music-control', '../node_modules/react-native-music-control'

end

post_install do |installer|
  react_native_post_install(installer)

  if defined?(PostInstallHardeningHook)
    PostInstallHardeningHook.apply(installer)
  end

  # Unconditionally disable I/O path analysis to avoid flaky .xcfilelist issues
  installer.pods_project.targets.each do |t|
    t.build_configurations.each do |c|
      c.build_settings['DISABLE_INPUT_OUTPUT_PATHS'] = 'YES'
    end
  end

  # Remove obsolete Hermes phase if present (idempotent)
  hermes_phase_labels = ['[Hermes] Replace Hermes']
  remove_hermes_phase = lambda do |target, scope|
    return 0 unless target.respond_to?(:shell_script_build_phases)
    phases = target.shell_script_build_phases.select do |phase|
      phase_name = phase.respond_to?(:name) ? phase.name.to_s.strip : ''
      display_name =
        if phase.respond_to?(:display_name)
          phase.display_name.to_s.strip
        else
          phase_name
        end
      hermes_phase_labels.include?(display_name)
    end
    removed = 0
    phases.each { |p| target.build_phases.delete(p); removed += 1 }
    removed
  end

  installer.pods_project.targets.each do |target|
    removed = remove_hermes_phase.call(target, 'pods')
    Pod::UI.puts "[Podfile] Removed #{removed} legacy Hermes phases from #{target.name}" if removed > 0
  end

  header_search_fix = '$(PODS_ROOT)/Headers/Public/RCTDeprecation'
  module_map_path = '$(PODS_ROOT)/Headers/Public/RCTDeprecation/RCTDeprecation.modulemap'
  module_map_flag = "-fmodule-map-file=#{module_map_path}"
  installer.aggregate_targets.each do |aggregate_target|
    user_project = aggregate_target.user_project
    next unless user_project

    project_modified = false

    user_project.targets.each do |target|
      next unless target.name == 'monGARS'

      target.build_configurations.each do |config|
        existing = config.build_settings['HEADER_SEARCH_PATHS']

        if existing.nil?
          config.build_settings['HEADER_SEARCH_PATHS'] = ['$(inherited)', header_search_fix]
          project_modified = true
          next
        end

        if existing.is_a?(Array)
          unless existing.include?(header_search_fix)
            existing << header_search_fix
            config.build_settings['HEADER_SEARCH_PATHS'] = existing
            project_modified = true
          end
        else
          value = existing.to_s
          unless value.include?(header_search_fix)
            config.build_settings['HEADER_SEARCH_PATHS'] = "#{value} #{header_search_fix}"
            project_modified = true
          end
        end

        project_modified ||= append_build_flag!(config, 'OTHER_CFLAGS', module_map_flag)
        project_modified ||= append_build_flag!(config, 'OTHER_CPLUSPLUSFLAGS', module_map_flag)
        project_modified ||= append_swift_module_flag!(config, module_map_flag)
      end
    end

    user_project.save if project_modified
  end

  # Try to apply RN Contacts orientation patch (if repo has the script)
  patch_script = File.join(__dir__, 'scripts', 'patch-react-native-contacts.sh')
  if File.exist?(patch_script)
    stdout_str, stderr_str, status = Open3.capture3('bash', patch_script)
    if !status.success?
      stdout_str.each_line { |line| Pod::UI.warn("[Podfile] STDOUT: #{line.strip}") unless line.strip.empty? }
      stderr_str.each_line { |line| Pod::UI.warn("[Podfile] STDERR: #{line.strip}") unless line.strip.empty? }
      Pod::UI.warn('[Podfile] Contacts patch failed (non-fatal). ' \
                   'This may be due to sandboxing or idempotency. Consider re-running the patch manually.')
    end
  else
    Pod::UI.warn('[Podfile] Missing ios/scripts/patch-react-native-contacts.sh; skipping contacts orientation patch.')
  end
end
