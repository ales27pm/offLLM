platform :ios, '13.0'

# React Native helpers (tolerant if node_modules is missing)
begin
  require_relative '../node_modules/react-native/scripts/react_native_pods'
  require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
rescue LoadError => e
  puts "[Podfile] Could not load React Native pod helpers: #{e}"
  puts "[Podfile] Hint: run 'npm ci' (or 'yarn install') at repo root before 'pod install'."
  def use_react_native!(*); end
  def use_react_native_codegen_discovery!(*); end
  def react_native_post_install(*); end
end

# --- Auto-detect the .xcodeproj near this Podfile ---
project_candidates = Dir.glob(File.join(__dir__, '*.xcodeproj')).sort
preferred = ENV['XCODE_PROJECT_NAME']
project_path =
  if preferred && File.exist?(File.join(__dir__, "#{preferred}.xcodeproj"))
    File.join(__dir__, "#{preferred}.xcodeproj")
  elsif project_candidates.any?
    project_candidates.first
  end

raise "No .xcodeproj found near Podfile (#{__dir__})" unless project_path
project File.basename(project_path)

use_frameworks! :linkage => :static

# Ensure glog/src/config.h exists
pre_install do |installer|
  Pod::UI.puts "Ensuring glog/src/config.h existsâ€¦"
  glog_src = File.join(installer.sandbox.root.to_s, 'glog', 'src')
  config_h = File.join(glog_src, 'config.h')
  config_ios = File.join(glog_src, 'config_ios.h')
  config_cmake = File.join(glog_src, 'config.h.cmake')

  if File.directory?(glog_src) && !File.exist?(config_h)
    if File.exist?(config_ios)
      FileUtils.cp(config_ios, config_h)
      Pod::UI.puts "Copied glog/src/config_ios.h -> config.h"
    elsif File.exist?(config_cmake)
      FileUtils.cp(config_cmake, config_h)
      Pod::UI.puts "Copied glog/src/config.h.cmake -> config.h"
    else
      Pod::UI.warn "Could not find a glog config template to copy."
    end
  end
end

target 'monGARS' do
  use_react_native!(
    :hermes_enabled => true,
    :fabric_enabled => true,
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )
  use_react_native_codegen_discovery!(
    :reactNativePath => "../node_modules/react-native"
  )

  pod 'RNFS', :path => '../node_modules/react-native-fs'
  pod 'RNDeviceInfo', :path => '../node_modules/react-native-device-info'
  pod 'RNCClipboard', :path => '../node_modules/@react-native-clipboard/clipboard'
  pod 'RNCAsyncStorage', :path => '../node_modules/@react-native-async-storage/async-storage'
  pod 'react-native-contacts', :path => '../node_modules/react-native-contacts'
  pod 'react-native-config', :path => '../node_modules/react-native-config'
  pod 'react-native-voice', :path => '../node_modules/@react-native-voice/voice'
  pod 'react-native-sqlite-storage', :path => '../node_modules/react-native-sqlite-storage'
  pod 'react-native-slider', :path => '../node_modules/@react-native-community/slider'
  pod 'react-native-music-control', :path => '../node_modules/react-native-music-control'

  use_native_modules!
end

post_install do |installer|
  react_native_post_install(installer)

  installer.pods_project.targets.each do |t|
    t.build_configurations.each do |c|
      c.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
      c.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone' if c.name == 'Debug'
    end
  end
end


