/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeContactsCxxSpecJSI : public TurboModule {
protected:
  NativeContactsCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value getAll(jsi::Runtime &rt) = 0;
  virtual jsi::Value getAllWithoutPhotos(jsi::Runtime &rt) = 0;
  virtual jsi::Value getContactById(jsi::Runtime &rt, jsi::String contactId) = 0;
  virtual jsi::Value getCount(jsi::Runtime &rt) = 0;
  virtual jsi::Value getPhotoForId(jsi::Runtime &rt, jsi::String contactId) = 0;
  virtual jsi::Value addContact(jsi::Runtime &rt, jsi::Object contact) = 0;
  virtual jsi::Value openContactForm(jsi::Runtime &rt, jsi::Object contact) = 0;
  virtual jsi::Value openExistingContact(jsi::Runtime &rt, jsi::Object contact) = 0;
  virtual jsi::Value viewExistingContact(jsi::Runtime &rt, jsi::Object contact) = 0;
  virtual jsi::Value editExistingContact(jsi::Runtime &rt, jsi::Object contact) = 0;
  virtual jsi::Value updateContact(jsi::Runtime &rt, jsi::Object contact) = 0;
  virtual jsi::Value deleteContact(jsi::Runtime &rt, jsi::Object contact) = 0;
  virtual jsi::Value getContactsMatchingString(jsi::Runtime &rt, jsi::String str) = 0;
  virtual jsi::Value getContactsByPhoneNumber(jsi::Runtime &rt, jsi::String phoneNumber) = 0;
  virtual jsi::Value getContactsByEmailAddress(jsi::Runtime &rt, jsi::String emailAddress) = 0;
  virtual jsi::Value checkPermission(jsi::Runtime &rt) = 0;
  virtual jsi::Value requestPermission(jsi::Runtime &rt) = 0;
  virtual jsi::Value writePhotoToPath(jsi::Runtime &rt, jsi::String contactId, jsi::String file) = 0;
  virtual void iosEnableNotesUsage(jsi::Runtime &rt, bool enabled) = 0;
  virtual jsi::Value getGroups(jsi::Runtime &rt) = 0;
  virtual jsi::Value getGroup(jsi::Runtime &rt, jsi::String identifier) = 0;
  virtual jsi::Value deleteGroup(jsi::Runtime &rt, jsi::String identifier) = 0;
  virtual jsi::Value updateGroup(jsi::Runtime &rt, jsi::String identifier, jsi::Object groupData) = 0;
  virtual jsi::Value addGroup(jsi::Runtime &rt, jsi::Object group) = 0;
  virtual jsi::Value contactsInGroup(jsi::Runtime &rt, jsi::String identifier) = 0;
  virtual jsi::Value addContactsToGroup(jsi::Runtime &rt, jsi::String groupIdentifier, jsi::Array contactIdentifiers) = 0;
  virtual jsi::Value removeContactsFromGroup(jsi::Runtime &rt, jsi::String groupIdentifier, jsi::Array contactIdentifiers) = 0;

};

template <typename T>
class JSI_EXPORT NativeContactsCxxSpec : public TurboModule {
public:
  jsi::Value create(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.create(rt, propName);
  }

  std::vector<jsi::PropNameID> getPropertyNames(jsi::Runtime& runtime) override {
    return delegate_.getPropertyNames(runtime);
  }

  static constexpr std::string_view kModuleName = "RCTContacts";

protected:
  NativeContactsCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeContactsCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeContactsCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeContactsCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    jsi::Value getAll(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getAll) == 1,
          "Expected getAll(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getAll, jsInvoker_, instance_);
    }
    jsi::Value getAllWithoutPhotos(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getAllWithoutPhotos) == 1,
          "Expected getAllWithoutPhotos(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getAllWithoutPhotos, jsInvoker_, instance_);
    }
    jsi::Value getContactById(jsi::Runtime &rt, jsi::String contactId) override {
      static_assert(
          bridging::getParameterCount(&T::getContactById) == 2,
          "Expected getContactById(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getContactById, jsInvoker_, instance_, std::move(contactId));
    }
    jsi::Value getCount(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getCount) == 1,
          "Expected getCount(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getCount, jsInvoker_, instance_);
    }
    jsi::Value getPhotoForId(jsi::Runtime &rt, jsi::String contactId) override {
      static_assert(
          bridging::getParameterCount(&T::getPhotoForId) == 2,
          "Expected getPhotoForId(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getPhotoForId, jsInvoker_, instance_, std::move(contactId));
    }
    jsi::Value addContact(jsi::Runtime &rt, jsi::Object contact) override {
      static_assert(
          bridging::getParameterCount(&T::addContact) == 2,
          "Expected addContact(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addContact, jsInvoker_, instance_, std::move(contact));
    }
    jsi::Value openContactForm(jsi::Runtime &rt, jsi::Object contact) override {
      static_assert(
          bridging::getParameterCount(&T::openContactForm) == 2,
          "Expected openContactForm(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::openContactForm, jsInvoker_, instance_, std::move(contact));
    }
    jsi::Value openExistingContact(jsi::Runtime &rt, jsi::Object contact) override {
      static_assert(
          bridging::getParameterCount(&T::openExistingContact) == 2,
          "Expected openExistingContact(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::openExistingContact, jsInvoker_, instance_, std::move(contact));
    }
    jsi::Value viewExistingContact(jsi::Runtime &rt, jsi::Object contact) override {
      static_assert(
          bridging::getParameterCount(&T::viewExistingContact) == 2,
          "Expected viewExistingContact(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::viewExistingContact, jsInvoker_, instance_, std::move(contact));
    }
    jsi::Value editExistingContact(jsi::Runtime &rt, jsi::Object contact) override {
      static_assert(
          bridging::getParameterCount(&T::editExistingContact) == 2,
          "Expected editExistingContact(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::editExistingContact, jsInvoker_, instance_, std::move(contact));
    }
    jsi::Value updateContact(jsi::Runtime &rt, jsi::Object contact) override {
      static_assert(
          bridging::getParameterCount(&T::updateContact) == 2,
          "Expected updateContact(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::updateContact, jsInvoker_, instance_, std::move(contact));
    }
    jsi::Value deleteContact(jsi::Runtime &rt, jsi::Object contact) override {
      static_assert(
          bridging::getParameterCount(&T::deleteContact) == 2,
          "Expected deleteContact(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::deleteContact, jsInvoker_, instance_, std::move(contact));
    }
    jsi::Value getContactsMatchingString(jsi::Runtime &rt, jsi::String str) override {
      static_assert(
          bridging::getParameterCount(&T::getContactsMatchingString) == 2,
          "Expected getContactsMatchingString(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getContactsMatchingString, jsInvoker_, instance_, std::move(str));
    }
    jsi::Value getContactsByPhoneNumber(jsi::Runtime &rt, jsi::String phoneNumber) override {
      static_assert(
          bridging::getParameterCount(&T::getContactsByPhoneNumber) == 2,
          "Expected getContactsByPhoneNumber(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getContactsByPhoneNumber, jsInvoker_, instance_, std::move(phoneNumber));
    }
    jsi::Value getContactsByEmailAddress(jsi::Runtime &rt, jsi::String emailAddress) override {
      static_assert(
          bridging::getParameterCount(&T::getContactsByEmailAddress) == 2,
          "Expected getContactsByEmailAddress(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getContactsByEmailAddress, jsInvoker_, instance_, std::move(emailAddress));
    }
    jsi::Value checkPermission(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::checkPermission) == 1,
          "Expected checkPermission(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::checkPermission, jsInvoker_, instance_);
    }
    jsi::Value requestPermission(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::requestPermission) == 1,
          "Expected requestPermission(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::requestPermission, jsInvoker_, instance_);
    }
    jsi::Value writePhotoToPath(jsi::Runtime &rt, jsi::String contactId, jsi::String file) override {
      static_assert(
          bridging::getParameterCount(&T::writePhotoToPath) == 3,
          "Expected writePhotoToPath(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::writePhotoToPath, jsInvoker_, instance_, std::move(contactId), std::move(file));
    }
    void iosEnableNotesUsage(jsi::Runtime &rt, bool enabled) override {
      static_assert(
          bridging::getParameterCount(&T::iosEnableNotesUsage) == 2,
          "Expected iosEnableNotesUsage(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::iosEnableNotesUsage, jsInvoker_, instance_, std::move(enabled));
    }
    jsi::Value getGroups(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getGroups) == 1,
          "Expected getGroups(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getGroups, jsInvoker_, instance_);
    }
    jsi::Value getGroup(jsi::Runtime &rt, jsi::String identifier) override {
      static_assert(
          bridging::getParameterCount(&T::getGroup) == 2,
          "Expected getGroup(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getGroup, jsInvoker_, instance_, std::move(identifier));
    }
    jsi::Value deleteGroup(jsi::Runtime &rt, jsi::String identifier) override {
      static_assert(
          bridging::getParameterCount(&T::deleteGroup) == 2,
          "Expected deleteGroup(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::deleteGroup, jsInvoker_, instance_, std::move(identifier));
    }
    jsi::Value updateGroup(jsi::Runtime &rt, jsi::String identifier, jsi::Object groupData) override {
      static_assert(
          bridging::getParameterCount(&T::updateGroup) == 3,
          "Expected updateGroup(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::updateGroup, jsInvoker_, instance_, std::move(identifier), std::move(groupData));
    }
    jsi::Value addGroup(jsi::Runtime &rt, jsi::Object group) override {
      static_assert(
          bridging::getParameterCount(&T::addGroup) == 2,
          "Expected addGroup(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addGroup, jsInvoker_, instance_, std::move(group));
    }
    jsi::Value contactsInGroup(jsi::Runtime &rt, jsi::String identifier) override {
      static_assert(
          bridging::getParameterCount(&T::contactsInGroup) == 2,
          "Expected contactsInGroup(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::contactsInGroup, jsInvoker_, instance_, std::move(identifier));
    }
    jsi::Value addContactsToGroup(jsi::Runtime &rt, jsi::String groupIdentifier, jsi::Array contactIdentifiers) override {
      static_assert(
          bridging::getParameterCount(&T::addContactsToGroup) == 3,
          "Expected addContactsToGroup(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addContactsToGroup, jsInvoker_, instance_, std::move(groupIdentifier), std::move(contactIdentifiers));
    }
    jsi::Value removeContactsFromGroup(jsi::Runtime &rt, jsi::String groupIdentifier, jsi::Array contactIdentifiers) override {
      static_assert(
          bridging::getParameterCount(&T::removeContactsFromGroup) == 3,
          "Expected removeContactsFromGroup(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::removeContactsFromGroup, jsInvoker_, instance_, std::move(groupIdentifier), std::move(contactIdentifiers));
    }

  private:
    friend class NativeContactsCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
