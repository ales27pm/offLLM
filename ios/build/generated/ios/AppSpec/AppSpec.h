/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of AppSpec symbols
#ifndef AppSpec_H
#define AppSpec_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


NS_ASSUME_NONNULL_BEGIN
namespace JS {
  namespace NativeLLM {
    struct LoadOptions {
      NSString *quantization() const;
      std::optional<double> contextLength() const;

      LoadOptions(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeLLM_LoadOptions)
+ (RCTManagedPointer *)JS_NativeLLM_LoadOptions:(id)json;
@end
namespace JS {
  namespace NativeLLM {
    struct GenerateOptions {
      std::optional<double> maxTokens() const;
      std::optional<double> temperature() const;
      std::optional<double> topK() const;
      std::optional<double> topP() const;
      std::optional<facebook::react::LazyVector<NSString *>> stop() const;

      GenerateOptions(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeLLM_GenerateOptions)
+ (RCTManagedPointer *)JS_NativeLLM_GenerateOptions:(id)json;
@end
@protocol NativeLLMSpec <RCTBridgeModule, RCTTurboModule>

- (void)loadModel:(NSString *)_path
         _options:(JS::NativeLLM::LoadOptions &)_options
          resolve:(RCTPromiseResolveBlock)resolve
           reject:(RCTPromiseRejectBlock)reject;
- (void)unloadModel:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)generate:(NSString *)_prompt
        _options:(JS::NativeLLM::GenerateOptions &)_options
         resolve:(RCTPromiseResolveBlock)resolve
          reject:(RCTPromiseRejectBlock)reject;
- (void)embed:(NSString *)_text
      resolve:(RCTPromiseResolveBlock)resolve
       reject:(RCTPromiseRejectBlock)reject;
- (void)getPerformanceMetrics:(RCTPromiseResolveBlock)resolve
                       reject:(RCTPromiseRejectBlock)reject;
- (void)getKVCacheSize:(RCTPromiseResolveBlock)resolve
                reject:(RCTPromiseRejectBlock)reject;
- (void)getKVCacheMaxSize:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (void)clearKVCache:(RCTPromiseResolveBlock)resolve
              reject:(RCTPromiseRejectBlock)reject;
- (void)addMessageBoundary:(RCTPromiseResolveBlock)resolve
                    reject:(RCTPromiseRejectBlock)reject;
- (void)adjustPerformanceMode:(NSString *)_mode
                      resolve:(RCTPromiseResolveBlock)resolve
                       reject:(RCTPromiseRejectBlock)reject;

@end

@interface NativeLLMSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeLLM'
   */
  class JSI_EXPORT NativeLLMSpecJSI : public ObjCTurboModule {
  public:
    NativeLLMSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline NSString *JS::NativeLLM::LoadOptions::quantization() const
{
  id const p = _v[@"quantization"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeLLM::LoadOptions::contextLength() const
{
  id const p = _v[@"contextLength"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeLLM::GenerateOptions::maxTokens() const
{
  id const p = _v[@"maxTokens"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeLLM::GenerateOptions::temperature() const
{
  id const p = _v[@"temperature"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeLLM::GenerateOptions::topK() const
{
  id const p = _v[@"topK"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeLLM::GenerateOptions::topP() const
{
  id const p = _v[@"topP"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<facebook::react::LazyVector<NSString *>> JS::NativeLLM::GenerateOptions::stop() const
{
  id const p = _v[@"stop"];
  return RCTBridgingToOptionalVec(p, ^NSString *(id itemValue_0) { return RCTBridgingToString(itemValue_0); });
}
NS_ASSUME_NONNULL_END
#endif // AppSpec_H
