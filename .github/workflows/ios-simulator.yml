name: iOS Simulator

on:
  push:
    branches: [main, master]
  pull_request:

jobs:
  build:
    name: Simulator build (iPhone 16 Pro / iOS 18)
    runs-on: macos-15
    env:
      NODE_OPTIONS: --max_old_space_size=4096
      RCT_NEW_ARCH_ENABLED: 1
      USE_HERMES: true
      SCHEME: MyOfflineLLMApp
      CONFIGURATION: Debug
      SIM_DEVICE: iPhone 16 Pro
      BUILD_DIR: build
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install Node deps
        run: npm ci

      - name: Cache Bundler
        uses: actions/cache@v4
        with:
          path: ios/vendor/bundle
          key: ${{ runner.os }}-bundler-${{ hashFiles('ios/Gemfile.lock') }}
          restore-keys: ${{ runner.os }}-bundler-

      - name: Bundle config path
        working-directory: ios
        run: bundle config set path vendor/bundle

      - name: Bundle install
        working-directory: ios
        run: bundle install

      - name: Install XcodeGen
        run: brew install xcodegen

      - name: Clean DerivedData
        run: rm -rf ~/Library/Developer/Xcode/DerivedData/*

      - name: Generate Xcode project
        run: xcodegen generate --spec ios/project.yml

      - name: Clean CocoaPods sandbox if stale
        working-directory: ios
        run: |
          set -euo pipefail
          rm -f Pods/Manifest.lock
          rm -rf Pods/Headers || true

      - name: Set NODE_BINARY for Xcode scripts
        run: |
          rm -f ios/.xcode.env.local
          printf 'export NODE_BINARY="%s"\n' "$(command -v node)" > ios/.xcode.env

      - name: Install Pods (bundler)
        working-directory: ios
        run: bundle exec pod install --repo-update

      - name: Scrub Hermes script phases
        working-directory: ios
        run: |
          bundle exec ruby ../scripts/strip_hermes_phase.rb $(find Pods -name "*.xcodeproj") MyOfflineLLMApp.xcodeproj

      - name: Assert Hermes phase is gone
        run: |
          set -euo pipefail
          if /usr/bin/grep -R --include=project.pbxproj --line-number -i "Replace Hermes|\[Hermes\]" \
               ios/Pods ios/MyOfflineLLMApp.xcodeproj 2>/dev/null; then
            echo "::error::Forbidden Hermes 'Replace Hermes' script phase still present after scrubbing."
            exit 1
          fi
          echo "✅ Hermes phase not found."

      - name: Snapshot Pods shell script phases (forensics)
        if: always()
        run: |
          mkdir -p build
          ruby - <<'RUBY' > build/pods_shell_scripts.txt
            require 'xcodeproj'
            p = Xcodeproj::Project.open('ios/Pods/Pods.xcodeproj')
            p.targets.each do |t|
              t.build_phases
               .select { |bp| bp.isa == 'PBXShellScriptBuildPhase' }
               .each { |bp| puts "#{t.name} :: #{bp.name}" }
            end
          RUBY

      - name: Upload Pods/Xcode projects on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ios-forensics-${{ github.job }}
          path: |
            ios/Podfile.lock
            ios/Pods/Pods.xcodeproj/project.pbxproj
            ios/MyOfflineLLMApp.xcodeproj/project.pbxproj
            build/pods_shell_scripts.txt

      - name: Resolve Swift package dependencies
        run: xcodebuild -resolvePackageDependencies -workspace ios/MyOfflineLLMApp.xcworkspace -scheme MyOfflineLLMApp -UseModernBuildSystem=YES

      - name: Build (Simulator)
        run: |
          set -euo pipefail
          mkdir -p "${BUILD_DIR}"
          xcodebuild \
            -workspace ios/MyOfflineLLMApp.xcworkspace \
            -scheme "${SCHEME}" \
            -configuration "${CONFIGURATION}" \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,name=${SIM_DEVICE}" \
            -UseModernBuildSystem=YES \
            -resultBundlePath "${BUILD_DIR}/MyOfflineLLMApp.xcresult" \
            CODE_SIGNING_ALLOWED=NO \
            clean build | tee "${BUILD_DIR}/xcodebuild.log" | xcpretty

      - name: Upload xcodebuild log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-log
          path: ${{ env.BUILD_DIR }}/xcodebuild.log

      - name: Export xcresult as JSON
        if: always()
        run: |
          set -euo pipefail
          XR="${BUILD_DIR}/MyOfflineLLMApp.xcresult"
          if [ -d "$XR" ]; then
            /usr/bin/xcrun xcresulttool get --format json --path "$XR" > "${BUILD_DIR}/xcresult.json"
          else
            echo "{}" > "${BUILD_DIR}/xcresult.json"
          fi

      - name: Generate CI diagnosis (compact)
        if: always()
        run: |
          set -euo pipefail
          : "${BUILD_DIR:=build}"
          : > "${BUILD_DIR}/ci_diagnosis.md"
          echo "# Build Diagnosis" >> "${BUILD_DIR}/ci_diagnosis.md"
          echo "" >> "${BUILD_DIR}/ci_diagnosis.md"
          if command -v python3 >/dev/null 2>&1; then
            if [ -f "scripts/xcresult_top_issues.py" ] && [ -s "${BUILD_DIR}/xcresult.json" ]; then
              echo "## Top Issues (xcresult)" >> "${BUILD_DIR}/ci_diagnosis.md"
              python3 scripts/xcresult_top_issues.py "${BUILD_DIR}/xcresult.json" >> "${BUILD_DIR}/ci_diagnosis.md" || true
              echo "" >> "${BUILD_DIR}/ci_diagnosis.md"
            fi
          fi
          if [ -f "${BUILD_DIR}/xcodebuild.log" ]; then
            echo "## Recent Errors & Warnings (log tail)" >> "${BUILD_DIR}/ci_diagnosis.md"
            grep -iE "error|failed|warning" "${BUILD_DIR}/xcodebuild.log" | tail -n 300 >> "${BUILD_DIR}/ci_diagnosis.md" || true
            echo "" >> "${BUILD_DIR}/ci_diagnosis.md"
          fi
          python3 - <<'PY' "${BUILD_DIR}/ci_diagnosis.md"
          import os, sys
          p = sys.argv[1]
          data = open(p,'rb').read()
          MAX = 180_000
          if len(data) > MAX:
              open(p,'wb').write(data[:MAX] + b"\n\n…(truncated)\n")
          PY

      - name: Upload diagnosis report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-diagnosis
          path: |
            ${{ env.BUILD_DIR }}/ci_diagnosis.md
            ${{ env.BUILD_DIR }}/xcresult.json

      - name: Summarize build log
        if: always()
        run: |
          if [ -f "${BUILD_DIR}/xcodebuild.log" ]; then
            echo "Summary of warnings and errors:"
            grep -iE "error|warning|failed" "${BUILD_DIR}/xcodebuild.log" | tail -n 200 || true
          else
            echo "No xcodebuild.log found"
          fi
