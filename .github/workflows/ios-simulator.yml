name: iOS Simulator

on:
  push:
    branches: [main, master]
  pull_request:

jobs:
  build:
    name: Simulator build (iPhone 16 Pro / iOS 18)
    runs-on: macos-15
    env:
      NODE_OPTIONS: --max_old_space_size=4096
      RCT_NEW_ARCH_ENABLED: 1
      USE_HERMES: true
      SCHEME: MyOfflineLLMApp
      CONFIGURATION: Debug
      SIM_DEVICE: iPhone 16 Pro
      BUILD_DIR: build
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install Node deps
        run: npm ci

      - name: Cache Bundler
        uses: actions/cache@v4
        with:
          path: ios/vendor/bundle
          key: ${{ runner.os }}-bundler-${{ hashFiles('ios/Gemfile.lock') }}
          restore-keys: ${{ runner.os }}-bundler-

      - name: Bundle config path
        working-directory: ios
        run: bundle config set path vendor/bundle

      - name: Bundle install
        working-directory: ios
        run: bundle install

      - name: Install XcodeGen
        run: brew install xcodegen

      - name: Clean DerivedData
        run: rm -rf ~/Library/Developer/Xcode/DerivedData/*

      - name: Generate Xcode project
        run: xcodegen generate --spec ios/project.yml

      - name: Clean CocoaPods sandbox if stale
        working-directory: ios
        run: |
          set -euo pipefail
          rm -f Pods/Manifest.lock
          rm -rf Pods/Headers || true

      - name: Set NODE_BINARY for Xcode scripts
        run: |
          rm -f ios/.xcode.env.local
          printf 'export NODE_BINARY="%s"\n' "$(command -v node)" > ios/.xcode.env

      - name: Install Pods (bundler)
        working-directory: ios
        run: bundle exec pod install --repo-update

      - name: Scrub Hermes script phases
        working-directory: ios
        run: |
          bundle exec ruby ../scripts/strip_hermes_phase.rb Pods/Pods.xcodeproj ../ios/MyOfflineLLMApp.xcodeproj

      - name: Assert Hermes phase is gone
        run: |
          set -euo pipefail
          if /usr/bin/grep -R --line-number -E "Replace Hermes|\\[Hermes\\]" \
               ios/Pods/Pods.xcodeproj/project.pbxproj ios/MyOfflineLLMApp.xcodeproj/project.pbxproj; then
            echo "::error::Forbidden Hermes 'Replace Hermes' script phase still present after scrubbing."
            exit 1
          fi
          echo "âœ… Hermes phase not found."

      - name: Upload Xcode project files (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-projects-after-scrub
          path: |
            ios/Podfile.lock
            ios/Pods/Pods.xcodeproj/project.pbxproj
            ios/MyOfflineLLMApp.xcodeproj/project.pbxproj

      - name: Resolve Swift package dependencies
        run: xcodebuild -resolvePackageDependencies -workspace ios/MyOfflineLLMApp.xcworkspace -scheme MyOfflineLLMApp -UseModernBuildSystem=YES

      - name: Build (Simulator)
        run: |
          set -euo pipefail
          mkdir -p "${BUILD_DIR}"
          xcodebuild \
            -workspace ios/MyOfflineLLMApp.xcworkspace \
            -scheme "${SCHEME}" \
            -configuration "${CONFIGURATION}" \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,name=${SIM_DEVICE}" \
            -UseModernBuildSystem=YES \
            CODE_SIGNING_ALLOWED=NO \
            clean build | tee "${BUILD_DIR}/xcodebuild.log" | xcpretty

      - name: Upload xcodebuild log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-log
          path: ${{ env.BUILD_DIR }}/xcodebuild.log

      - name: Summarize build log
        if: always()
        run: |
          if [ -f "${BUILD_DIR}/xcodebuild.log" ]; then
            echo "Summary of warnings and errors:"
            grep -iE "error|warning|failed" "${BUILD_DIR}/xcodebuild.log" | tail -n 200 || true
          else
            echo "No xcodebuild.log found"
          fi
