name: iOS Unsigned Build (monGARS)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-unsigned:
    runs-on: macos-15   # newer image likely has Xcode 16.4; we still fallback below
    env:
      RCT_NEW_ARCH_ENABLED: "1"
      USE_HERMES: "true"
      SCHEME: "monGARS"
      CONFIGURATION: "Release"
      BUILD_DIR: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show installed Xcodes
        run: ls -1 /Applications | grep -E '^Xcode' || true

      # Try 16.4 first, fallback to 16.2 on this same runner
      - name: Select Xcode 16.4 (attempt)
        id: xcode164
        continue-on-error: true
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.4"

      - name: Select Xcode 16.2 (fallback)
        if: steps.xcode164.outcome == 'failure'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Confirm Xcode
        id: xcodever
        run: |
          set -e
          xcodebuild -version
          SEL=$(xcodebuild -version | head -n1 | awk '{print $2}')
          echo "xcode=$SEL" >> "$GITHUB_OUTPUT"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install JS deps
        run: npm ci

      - name: Setup Ruby (CocoaPods)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true
          working-directory: ios

      - name: Install XcodeGen
        run: brew install xcodegen

      - name: Generate Xcode project
        working-directory: ios
        run: xcodegen generate

      - name: Verify project
        run: test -d ios/monGARS.xcodeproj

      - name: Install Pods
        working-directory: ios
        run: |
          bundle install
          bundle exec pod install --repo-update

      - name: Apply post-install hardening
        run: |
          gem install xcodeproj
          ruby scripts/ci/post_install_hardening_hook.rb

      - name: Build (unsigned, device)
        run: |
          set -euo pipefail
          xcodebuild \
            -workspace ios/monGARS.xcworkspace \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            -derivedDataPath "$BUILD_DIR/DerivedData" \
            -resultBundlePath "$BUILD_DIR/$SCHEME.xcresult" \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
            | tee "$BUILD_DIR/xcodebuild.log"

      # New: summarize xcresult errors right after build, even if the build failed
      - name: Summarize build errors
        if: always()
        run: |
          set -e
          if [ -d "$BUILD_DIR/monGARS.xcresult" ]; then
            xcrun xcresulttool get --path "$BUILD_DIR/monGARS.xcresult" --format json > "$BUILD_DIR/monGARS.xcresult.json" || true
            python3 - << 'PY'
import json,sys
p="build/monGARS.xcresult.json"
try:
    j=json.load(open(p))
    issues=j.get('issues',{})
    errs=issues.get('errorSummaries',[])
    warns=issues.get('warningSummaries',[])
    def show(kind, arr, n=10):
        if arr:
            print(f"\n==== {kind.upper()} (showing up to {n}) ====")
            for i,e in enumerate(arr[:n],1):
                msg=e.get('message','').strip()
                doc=e.get('documentLocationInCreatingWorkspace',{}).get('url','')
                print(f"{i}. {msg}")
                if doc: print(f"   @ {doc}")
    show('errors', errs)
    show('warnings', warns)
except Exception as e:
    print("xcresult parse skipped:",e)
PY
          else
            echo "No .xcresult found to summarize."
          fi

      - name: Package unsigned IPA + zip .app
        if: always()   # run even on build failure so we can see what's in the folder
        run: |
          set -e
          APP_DIR="$BUILD_DIR/DerivedData/Build/Products/$CONFIGURATION-iphoneos"
          APP_PATH="$APP_DIR/$SCHEME.app"
          if [ ! -d "$APP_PATH" ]; then
            echo "❌ Not found: $APP_PATH"
            ls -la "$APP_DIR" || true
          else
            rm -rf "$BUILD_DIR/Payload"; mkdir -p "$BUILD_DIR/Payload"
            cp -R "$APP_PATH" "$BUILD_DIR/Payload/"
            (cd "$BUILD_DIR" && zip -qry offLLM-unsigned.ipa Payload)
            (cd "$APP_DIR" && zip -qry "$PWD/../../$SCHEME.app.zip" "$SCHEME.app")
          fi

      # Unique names + overwrite to avoid 409 conflicts on re-runs
      - name: Upload IPA
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-unsigned-ipa-xcode-${{ steps.xcodever.outputs.xcode }}
          path: |
            build/offLLM-unsigned.ipa
            build/monGARS.app.zip
          if-no-files-found: ignore
          overwrite: true

      - name: Upload logs & xcresult
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-unsigned-reports-xcode-${{ steps.xcodever.outputs.xcode }}
          path: |
            build/xcodebuild.log
            build/monGARS.xcresult
            build/monGARS.xcresult.json
          if-no-files-found: warn
          overwrite: true
