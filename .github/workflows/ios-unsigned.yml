name: iOS (unsigned) — Simulator .app & Device .ipa

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ios-unsigned-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  RUBY_VERSION: "3.2"
  SCHEME: "monGARS"
  WORKSPACE: "ios/monGARS.xcworkspace"
  DERIVED_DATA: ${{ github.workspace }}/build/DerivedData
  RESULT_BUNDLE: ${{ github.workspace }}/build/DerivedData/ResultBundle_build.xcresult
  IPA_OUTPUT: ${{ github.workspace }}/build/unsigned-app.ipa
  # Optional RN flags
  NODE_OPTIONS: --max_old_space_size=4096
  RCT_NEW_ARCH_ENABLED: "1"

jobs:
  ios-unsigned:
    name: Build iOS (Simulator .app + Device .ipa unsigned)
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- Select Xcode 16.4 (image has multiple Xcodes) ----
      - name: Select Xcode 16.4
        run: |
          sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer
          xcodebuild -version
          xcrun simctl list runtimes

      # ---- Node (with npm cache) ----
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install JS deps (ci)
        run: npm ci

      # ---- Ruby / Bundler (installs CocoaPods from Gemfile.lock -> 1.16.x) ----
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      # ---- Optional: Codegen step if your repo uses RN codegen/specs ----
      - name: RN codegen (optional)
        run: |
          if npm run | grep -q "^  codegen"; then
            npm run codegen
          else
            echo "No codegen script found; skipping"
          fi

      # ---- XcodeGen (if you keep a project.yml; safe to no-op otherwise) ----
      - name: Generate Xcode project (optional)
        run: |
          if [ -f "ios/project.yml" ]; then
            brew install xcodegen || true
            (cd ios && xcodegen generate)
          else
            echo "No ios/project.yml; skipping XcodeGen"
          fi

      # ---- CocoaPods install (produces ios/monGARS.xcworkspace) ----
      - name: Install iOS Pods
        run: |
          cd ios
          bundle exec pod install --repo-update
          cd -

      # ---- Doctor checks (as per AGENTS.md) ----
      - name: iOS Doctor
        run: |
          if [ -x "./scripts/ios_doctor.sh" ]; then
            ./scripts/ios_doctor.sh
          else
            echo "Doctor script missing; running lightweight checks…"
            test -f "$WORKSPACE/contents.xcworkspacedata" || (echo "::error::Workspace missing ($WORKSPACE)"; exit 2)
            xcodebuild -list -workspace "$WORKSPACE" | grep -F "${SCHEME}" || (echo "::error::Scheme ${SCHEME} not found"; exit 2)
          fi

      # ---- Build (Simulator .app) ----
      - name: Build (iphonesimulator)
        run: |
          set -euxo pipefail
          rm -rf "${RESULT_BUNDLE}"
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -sdk iphonesimulator \
            -configuration Release \
            -derivedDataPath "${DERIVED_DATA}" \
            -resultBundlePath "${RESULT_BUNDLE}" \
            build

      - name: Package Simulator .app (zip)
        run: |
          set -euxo pipefail
          APP_PATH=$(find "${DERIVED_DATA}/Build/Products/Release-iphonesimulator" -maxdepth 1 -name "*.app" -print -quit)
          if [ -z "$APP_PATH" ]; then
            echo "::error::Simulator .app not found"; exit 3
          fi
          SIM_ZIP="${{ github.workspace }}/build/simulator-app.zip"
          /usr/bin/zip -qry "$SIM_ZIP" "$APP_PATH"
          echo "Simulator app: $SIM_ZIP"

      # ---- Archive (Device, unsigned) ----
      - name: Archive (iphoneos, unsigned)
        run: |
          set -euxo pipefail
          ARCHIVE_PATH="${{ github.workspace }}/build/App.xcarchive"
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -destination "generic/platform=iOS" \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            ENABLE_BITCODE=NO \
            archive

      # ---- Create unsigned IPA (manual Payload/ zip, no signing) ----
      - name: Create unsigned IPA
        run: |
          set -euxo pipefail
          ARCHIVE_PATH="${{ github.workspace }}/build/App.xcarchive"
          APP_IN_ARCHIVE=$(find "$ARCHIVE_PATH/Products/Applications" -maxdepth 1 -name "*.app" -print -quit)
          if [ -z "$APP_IN_ARCHIVE" ]; then
            echo "::error::No .app inside archive"; exit 4
          fi
          WORKDIR="${{ github.workspace }}/build/ipa-work"
          mkdir -p "$WORKDIR/Payload"
          cp -R "$APP_IN_ARCHIVE" "$WORKDIR/Payload/"
          # Optional: include SwiftSupport if you want stricter App Store packaging (not needed for unsigned testing)
          (cd "$WORKDIR" && /usr/bin/zip -qry "${{ env.IPA_OUTPUT }}" Payload)
          echo "Unsigned IPA: ${{ env.IPA_OUTPUT }}"

      # ---- Collect logs / xcresult ----
      - name: Zip xcresult bundle
        if: always()
        run: |
          set -euxo pipefail
          if [ -d "${RESULT_BUNDLE}" ]; then
            /usr/bin/zip -qry "${{ github.workspace }}/build/ResultBundle_build.xcresult.zip" "${RESULT_BUNDLE}"
          fi

      # ---- Upload artifacts ----
      - name: Upload Simulator .app (zip)
        uses: actions/upload-artifact@v4
        with:
          name: ios-simulator-app
          path: ${{ github.workspace }}/build/simulator-app.zip
          if-no-files-found: error
          retention-days: 7

      - name: Upload Device archive (.xcarchive)
        uses: actions/upload-artifact@v4
        with:
          name: ios-device-archive
          path: ${{ github.workspace }}/build/App.xcarchive
          if-no-files-found: error
          retention-days: 7

      - name: Upload unsigned IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-unsigned-ipa
          path: ${{ env.IPA_OUTPUT }}
          if-no-files-found: error
          retention-days: 7

      - name: Upload xcresult (build)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcresult-build
          path: ${{ github.workspace }}/build/ResultBundle_build.xcresult.zip
          if-no-files-found: warn
          retention-days: 7
