name: iOS Unsigned Build

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-ios:
    runs-on: macos-15
    env:
      XCODE_WORKSPACE: ios/monGARS.xcworkspace
      XCODE_SCHEME: monGARS
      ARCHIVE_PATH: build/monGARS.xcarchive
      RESULT_PATH: build/monGARS.xcresult
      OUTPUT_DIR: build/output
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js (for codegen/pod install)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install npm dependencies
        run: npm ci

      - name: Validate patch-package patches
        run: npx --yes patch-package --check

      - name: Install Ruby gems and XcodeGen/Pods
        run: |
          cd ios
          gem install bundler
          bundle install
          bundle exec pod install --repo-update
          cd ..

      - name: Generate iOS project (XcodeGen)
        run: |
          cd ios
          xcodegen generate
          cd ..

      - name: Build and Archive (unsigned)
        run: |
          # Clean previous artifacts
          rm -rf build
          # Build archive with code signing disabled
          set -o pipefail
          xcodebuild -workspace $XCODE_WORKSPACE \
            -scheme $XCODE_SCHEME -configuration Release \
            -destination generic/platform=iOS \
            CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO \
            -archivePath $ARCHIVE_PATH \
            -resultBundlePath $RESULT_PATH \
            clean archive | tee build-log.txt

      - name: Prepare output directory
        if: always()
        run: |
          mkdir -p "$OUTPUT_DIR"
          OUTPUT_DIR_ABS="$(python3 -c "import os,sys; root=os.environ.get('GITHUB_WORKSPACE') or os.getcwd(); target=os.environ['OUTPUT_DIR']; sys.stdout.write(os.path.realpath(os.path.join(root, target)))")"
          echo "OUTPUT_DIR_ABS=$OUTPUT_DIR_ABS" >>"$GITHUB_ENV"

      - name: Collect build log
        if: always()
        run: |
          mkdir -p "$OUTPUT_DIR_ABS"
          if [ -f build-log.txt ]; then
            cp build-log.txt "$OUTPUT_DIR_ABS/"
          fi

      - name: Create Payload and IPA
        if: success()
        run: |
          mkdir -p "$OUTPUT_DIR_ABS"
          APP_PATH="$ARCHIVE_PATH/Products/Applications/${XCODE_SCHEME}.app"
          PAYLOAD_DIR="$OUTPUT_DIR_ABS/Payload"
          rm -f "$OUTPUT_DIR_ABS/${XCODE_SCHEME}.ipa"
          rm -rf "$PAYLOAD_DIR"
          mkdir -p "$PAYLOAD_DIR"
          cp -R "$APP_PATH" "$PAYLOAD_DIR/"
          (
            cd "$OUTPUT_DIR_ABS"
            zip -r "${XCODE_SCHEME}.ipa" Payload
          )
          rm -rf "$PAYLOAD_DIR"

      - name: Package .app bundle
        if: success()
        run: |
          mkdir -p "$OUTPUT_DIR_ABS"
          APP_DIR="$ARCHIVE_PATH/Products/Applications"
          rm -f "$OUTPUT_DIR_ABS/${XCODE_SCHEME}.zip"
          (
            cd "$APP_DIR" && zip -r "$OUTPUT_DIR_ABS/${XCODE_SCHEME}.zip" "${XCODE_SCHEME}.app"
          )

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-unsigned-ipa
          path: |
            ${{ env.RESULT_PATH }}
            ${{ env.OUTPUT_DIR }}/${{ env.XCODE_SCHEME }}.ipa
            ${{ env.OUTPUT_DIR }}/${{ env.XCODE_SCHEME }}.zip
            ${{ env.OUTPUT_DIR }}/build-log.txt
          if-no-files-found: warn
