name: iOS (unsigned) - Simulator app & Device archive

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ios-unsigned-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  RUBY_VERSION: "3.2"
  SCHEME: "MyOfflineLLMApp"
  WORKSPACE: "ios/MyOfflineLLMApp.xcworkspace"
  ENABLE_SIGNED_EXPORT: "false"   # set to "true" if you want the optional signed export steps
  IOS_SIM_DEVICE: "iPhone 16 Pro"
  IOS_SIM_OS: "18.6"              # default runtime; Boot step falls back to 18.4 if missing

jobs:
  sim-build:
    name: Simulator build (iPhone 16 Pro / iOS 18)
    runs-on: macos-15
    env:
      NODE_OPTIONS: --max_old_space_size=4096
      RCT_NEW_ARCH_ENABLED: 1
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install JS deps
        run: npm run ci:install

      - name: Run tests
        run: npm run test:ci

      - name: Set up Xcode 16.4
        run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ios

      - name: Install xcodegen
        run: brew install xcodegen

      - name: Generate Xcode Workspace
        run: |
          cd ios
          xcodegen generate

      - name: Install Ruby dependencies
        run: |
          cd ios
          bundle install
      - name: Codegen env guard
        run: |
          set -euo pipefail
          export CODEGEN_OUTPUT_DIR="${CODEGEN_OUTPUT_DIR:-$(pwd)/ios/build/generated}"
          export TEMPLATE_SRC_DIR="${TEMPLATE_SRC_DIR:-$(pwd)/src/specs}"
          npm run codegen

      - name: Install Pods (verbose, fail-fast)
        working-directory: ios
        run: |
          set -euo pipefail
          bundle exec pod repo update
          RCT_NEW_ARCH_ENABLED=1 bundle exec pod install --repo-update --verbose

      - name: Show key build settings (Release)
        run: |
          xcodebuild -showBuildSettings \
            -workspace "${{ env.WORKSPACE }}" \
            -scheme "${{ env.SCHEME }}" \
            -configuration Release | egrep 'SDKROOT|IPHONEOS_DEPLOYMENT_TARGET|SUPPORTED_PLATFORMS|TARGETED_DEVICE_FAMILY' || true

      - name: Show Xcode & Runtimes
        run: |
          xcodebuild -version
          xcrun simctl list runtimes

      - name: Boot Simulator with Fallback
        run: |
          #!/bin/bash
          set -euo pipefail
          IOS_SIM_OS="${IOS_SIM_OS:-18.6}"
          IOS_SIM_DEVICE="${IOS_SIM_DEVICE:-iPhone 16 Pro}"
          AVAILABLE_RUNTIMES=$(xcrun simctl list runtimes -j | jq -r '.runtimes[] | select(.platform == "iOS" and .isAvailable == true) | .version')
          echo "Available iOS runtimes: $AVAILABLE_RUNTIMES"
          if ! echo "$AVAILABLE_RUNTIMES" | grep -q "^${IOS_SIM_OS}$"; then
            echo "::warning::iOS ${IOS_SIM_OS} not found, falling back to 18.4"
            IOS_SIM_OS="18.4"
            if ! echo "$AVAILABLE_RUNTIMES" | grep -q "^18.4$"; then
              echo "::warning::iOS 18.4 not found, selecting latest available runtime"
              IOS_SIM_OS=$(echo "$AVAILABLE_RUNTIMES" | sort -V | tail -n 1)
              if [ -z "$IOS_SIM_OS" ]; then
                echo "::error::No available iOS runtimes found"
                exit 1
              fi
            fi
            echo "IOS_SIM_OS=$IOS_SIM_OS" >> "$GITHUB_ENV"
          fi
          RUNTIME_ID=$(xcrun simctl list runtimes -j | jq -r --arg ios_version "$IOS_SIM_OS" '.runtimes[] | select(.platform == "iOS" and .version == $ios_version and .isAvailable == true) | .identifier' | head -n 1)
          if [ -z "$RUNTIME_ID" ]; then
            echo "::error::Cannot resolve runtime identifier for iOS ${IOS_SIM_OS}. Available runtimes: $AVAILABLE_RUNTIMES"
            exit 1
          fi
          echo "Resolved RUNTIME_ID: $RUNTIME_ID"
          DEVICE_TYPE_ID=$(xcrun simctl list devicetypes -j | jq -r --arg device_name "$IOS_SIM_DEVICE" '.devicetypes[] | select(.name == $device_name) | .identifier' | head -n 1)
          if [ -z "$DEVICE_TYPE_ID" ]; then
            echo "::warning::Device ${IOS_SIM_DEVICE} not found, falling back to iPhone 15"
            IOS_SIM_DEVICE="iPhone 15"
            DEVICE_TYPE_ID=$(xcrun simctl list devicetypes -j | jq -r --arg device_name "iPhone 15" '.devicetypes[] | select(.name == $device_name) | .identifier' | head -n 1)
            if [ -z "$DEVICE_TYPE_ID" ]; then
              echo "::warning::Device iPhone 15 not found, falling back to iPhone 14"
              IOS_SIM_DEVICE="iPhone 14"
              DEVICE_TYPE_ID=$(xcrun simctl list devicetypes -j | jq -r --arg device_name "iPhone 14" '.devicetypes[] | select(.name == $device_name) | .identifier' | head -n 1)
              if [ -z "$DEVICE_TYPE_ID" ]; then
                echo "::error::No compatible device types found for iOS ${IOS_SIM_OS}. Available devices: $(xcrun simctl list devicetypes -j | jq -r '.devicetypes[] | .name')"
                echo "Raw device types output: $(xcrun simctl list devicetypes -j)"
                exit 1
              fi
            fi
            echo "IOS_SIM_DEVICE=$IOS_SIM_DEVICE" >> "$GITHUB_ENV"
          fi
          echo "Resolved DEVICE_TYPE_ID: $DEVICE_TYPE_ID for ${IOS_SIM_DEVICE}"
          xcrun simctl delete $(xcrun simctl list devices -j | jq -r --arg RUNTIME_ID "$RUNTIME_ID" --arg device_name "$IOS_SIM_DEVICE" '.devices | to_entries[] | select(.key == $RUNTIME_ID) | .value[] | select(.name == $device_name) | .udid') 2>/dev/null || true
          UDID=$(xcrun simctl list devices -j | jq -r --arg RUNTIME_ID "$RUNTIME_ID" --arg device_name "$IOS_SIM_DEVICE" '.devices | to_entries[] | select(.key == $RUNTIME_ID) | .value[] | select(.name == $device_name and .isAvailable == true) | .udid' | head -n 1)
          if [ -z "$UDID" ]; then
            echo "Creating new simulator for ${IOS_SIM_DEVICE} / iOS ${IOS_SIM_OS}"
            UDID=$(xcrun simctl create "Custom ${IOS_SIM_DEVICE}" "$DEVICE_TYPE_ID" "$RUNTIME_ID")
            if [ -z "$UDID" ]; then
              echo "::error::Failed to create simulator for ${IOS_SIM_DEVICE} / iOS ${IOS_SIM_OS}. Device Type ID: $DEVICE_TYPE_ID, Runtime ID: $RUNTIME_ID"
              echo "Raw device types output: $(xcrun simctl list devicetypes -j)"
              exit 1
            fi
          fi
          echo "Resolved UDID: $UDID"
          xcrun simctl boot "$UDID" || echo "::warning::Simulator $UDID already booted or failed to boot, continuing"
          xcrun simctl bootstatus "$UDID" -b || true
          echo "Booted device $UDID (${IOS_SIM_DEVICE} / iOS ${IOS_SIM_OS})"

      - name: Build (Simulator)
        run: |
          set -euo pipefail
          IOS_DESTINATION="platform=iOS Simulator,OS=${IOS_SIM_OS},name=${IOS_SIM_DEVICE}"
          export IOS_DESTINATION
          ./scripts/build_unsigned_ios.sh

      - name: Export xcresult to JSON (sim)
        if: always()
        run: |
          set -euo pipefail
          LOGDIR="$HOME/Library/Logs/xcodebuild"
          RESULT=$(ls -t "$LOGDIR"/*.xcresult 2>/dev/null | head -n1 || true)
          if [ -z "$RESULT" ]; then
            echo "No .xcresult found at $LOGDIR"
            exit 0
          fi
          echo "Found xcresult: $RESULT"
          /usr/bin/xcrun xcresulttool get --format json --legacy --path "$RESULT" > "${{ runner.temp }}/sim.xcresult.json" || true

      - name: Upload xcresult JSON (sim)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sim-xcresult.json
          path: ${{ runner.temp }}/sim.xcresult.json
          if-no-files-found: ignore

      - name: Upload Simulator app (zip)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SCHEME }}-Simulator
          path: ios/${{ env.SCHEME }}-Simulator.zip
          if-no-files-found: ignore

      - name: Upload xcodebuild.log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sim-xcodebuild-log
          path: ios/xcodebuild.log
          if-no-files-found: ignore

      - name: Upload xcresult
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sim-xcresult
          path: ios/${{ env.SCHEME }}.xcresult
          if-no-files-found: ignore

  device-archive:
    name: Device archive + Unsigned IPA
    runs-on: macos-15
    needs: sim-build
    env:
      NODE_OPTIONS: --max_old_space_size=4096
      RCT_NEW_ARCH_ENABLED: 1
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Set up Xcode 16.4
        run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer

      - name: Verify active Xcode
        shell: bash
        run: |
          set -euo pipefail
          xcodebuild -version
          echo "DEVELOPER_DIR=${DEVELOPER_DIR:-$(xcode-select -p)}"

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ios

      - name: Install XcodeGen (if needed)
        working-directory: ios
        run: brew install xcodegen || true

      - name: Generate Xcode project
        working-directory: ios
        run: xcodegen generate

      - name: Bundle install
        working-directory: ios
        run: bundle install

      - name: Install Pods
        working-directory: ios
        run: bundle exec pod install --repo-update

      # Show settings to detect any pinned SDKs
      - name: Show effective build settings (SDK/Platforms)
        shell: bash
        run: |
          xcodebuild -showBuildSettings \
            -workspace ios/MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Release | egrep 'SDKROOT|SUPPORTED_PLATFORMS|IPHONEOS_DEPLOYMENT_TARGET' || true

      # Unpin any iphoneos18.x Base SDK in pbxproj/xcconfigs
      - name: Unpin Base SDK (SDKROOT) if pinned to iphoneos18.x
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "ios/MyOfflineLLMApp.xcodeproj/project.pbxproj" ]; then
            sed -E -i '' \
              -e 's/SDKROOT = iphoneos18\.[0-9]+;/SDKROOT = iphoneos;/g' \
              -e 's/SDKROOT = iphoneos18\.[0-9]+/SDKROOT = iphoneos/g' \
              ios/MyOfflineLLMApp.xcodeproj/project.pbxproj || true
          fi
          find ios -name "*.xcconfig" -print0 | xargs -0 -I{} \
            sed -E -i '' 's/SDKROOT *= *iphoneos18\.[0-9]+/SDKROOT = iphoneos/g' "{}" || true

          echo "After unpinning — effective SDKROOT:"
          xcodebuild -showBuildSettings \
            -workspace ios/MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Release | grep -E "^ *SDKROOT" || true

      - name: Archive (device, unsigned; generic iOS; force latest SDK)
        id: archive
        working-directory: ios
        shell: bash
        run: |
          set -euo pipefail
          ARCHIVE_PATH="build/${{ env.SCHEME }}.xcarchive"
          echo "Archiving with $(xcodebuild -version | head -1)…"
          xcodebuild \
            -workspace "${{ env.WORKSPACE }}" \
            -scheme "${{ env.SCHEME }}" \
            -configuration Release \
            -sdk iphoneos \
            SDKROOT=iphoneos \
            SUPPORTED_PLATFORMS=iphoneos \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
            ONLY_ACTIVE_ARCH=NO ARCHS=arm64 \
            -destination "generic/platform=iOS" \
            -archivePath "$ARCHIVE_PATH" \
            archive | tee xcodebuild-archive.log

          if [ ! -d "$ARCHIVE_PATH/Products/Applications" ]; then
            echo "::error::Archive missing Applications folder: $ARCHIVE_PATH/Products/Applications"
            xcodebuild -showdestinations -workspace "${{ env.WORKSPACE }}" -scheme "${{ env.SCHEME }}" -sdk iphoneos || true
            xcodebuild -showBuildSettings -workspace "${{ env.WORKSPACE }}" -scheme "${{ env.SCHEME }}" -configuration Release | grep -E '^ *SDKROOT' || true
            exit 1
          fi
          echo "archive=$ARCHIVE_PATH" >> "$GITHUB_OUTPUT"

      - name: Upload .xcarchive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SCHEME }}-xcarchive
          path: ios/build/${{ env.SCHEME }}.xcarchive

      # Always create an unsigned IPA from the archive
      - name: Create unsigned IPA from archive
        working-directory: ios
        shell: bash
        env:
          IPA_OUT: ${{ runner.temp }}/MyOfflineLLMApp-unsigned.ipa
        run: |
          set -euo pipefail
          archive_path="${{ steps.archive.outputs.archive }}"
          : "${archive_path:?Archive path missing}"
          APP_PATH="$(/usr/bin/find "$archive_path/Products/Applications" -maxdepth 1 -type d -name '*.app' -print -quit)"
          if [ -z "$APP_PATH" ]; then
            echo "::error::No .app found inside archive."
            /usr/bin/find "$archive_path" -name '*.app' -print || true
            exit 1
          fi
          rm -rf "$APP_PATH/_CodeSignature" || true
          rm -f "$APP_PATH/embedded.mobileprovision" || true
          WORK_DIR="$(mktemp -d)"
          mkdir -p "$WORK_DIR/Payload"
          cp -R "$APP_PATH" "$WORK_DIR/Payload/"
          (cd "$WORK_DIR" && zip -qry "$IPA_OUT" Payload)
          mv "$IPA_OUT" .
          echo "IPA_PATH=$(pwd)/$(basename "$IPA_OUT")" >> "$GITHUB_ENV"
          echo "Unsigned IPA created at: $(pwd)/$(basename "$IPA_OUT")"

      - name: Upload unsigned IPA
        uses: actions/upload-artifact@v4
        with:
          name: MyOfflineLLMApp-unsigned-ipa
          path: ${{ env.IPA_PATH }}
          if-no-files-found: error

      # --- Optional signed export (disabled by default to avoid 'secrets' in if:) ---
      - name: Prepare ExportOptions.plist
        if: ${{ env.ENABLE_SIGNED_EXPORT == 'true' }}
        working-directory: ios
        shell: bash
        run: |
          set -euo pipefail
          printf '%s\n' \
          '<?xml version="1.0" encoding="UTF-8"?>' \
          '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' \
          '<plist version="1.0"><dict>' \
          '<key>method</key><string>ad-hoc</string>' \
          '<key>signingStyle</key><string>manual</string>' \
          '<key>provisioningProfiles</key><dict>' \
          "<key>${{ secrets.IOS_BUNDLE_ID }}</key><string>${{ secrets.IOS_PROFILE_NAME }}</string>" \
          '</dict>' \
          '<key>stripSwiftSymbols</key><true/>' \
          '<key>compileBitcode</key><false/>' \
          '</dict></plist>' > ExportOptions.plist
          cat ExportOptions.plist

      - name: Install signing assets and export IPA
        if: ${{ env.ENABLE_SIGNED_EXPORT == 'true' }}
        working-directory: ios
        shell: bash
        run: |
          set -euo pipefail
          KEYCHAIN="$RUNNER_TEMP/build.keychain-db"
          security create-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          echo "${{ secrets.IOS_SIGNING_CERT_P12 }}" | base64 --decode > cert.p12
          security import cert.p12 -k "$KEYCHAIN" -P "${{ secrets.IOS_P12_PASSWORD }}" -A
          security list-keychain -d user -s "$KEYCHAIN" login.keychain-db
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "${{ secrets.IOS_MOBILEPROVISION_B64 }}" | base64 --decode > "$HOME/Library/MobileDevice/Provisioning Profiles/${{ secrets.IOS_PROFILE_NAME }}.mobileprovision"
          xcodebuild -exportArchive \
            -archivePath "${{ steps.archive.outputs.archive }}" \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build/export-ipa \
            -allowProvisioningUpdates | tee xcodebuild-export.log

      - name: Upload IPA (if exported)
        if: ${{ env.ENABLE_SIGNED_EXPORT == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SCHEME }}-IPA
          path: ios/build/export-ipa/*.ipa
          if-no-files-found: ignore