name: iOS (unsigned) — Simulator app & Device archive

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ios-unsigned-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  RUBY_VERSION: "3.2"
  XCODE_VERSION: "16.4"
  SCHEME: "monGARS"
  WORKSPACE: "ios/monGARS.xcworkspace"
  DERIVED_DATA: "${{ github.workspace }}/build/DerivedData"
  RESULT_BUNDLE_SIM: "${{ github.workspace }}/build/ResultBundle_sim.xcresult"
  RESULT_BUNDLE_DEV: "${{ github.workspace }}/build/ResultBundle_device.xcresult"
  RCT_NEW_ARCH_ENABLED: "1"

jobs:
  sim-build:
    name: Simulator build (.app for iPhone 16 Pro / iOS 18)
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v5

      - name: Select Xcode ${{ env.XCODE_VERSION }}
        run: |
          sudo xcode-select -s "/Applications/Xcode_${XCODE_VERSION}.app"
          xcodebuild -version

      - uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Set up Ruby ${{ env.RUBY_VERSION }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ios

      - name: Install xcpretty
        run: gem install xcpretty

      - name: Cache Pods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: pods-${{ runner.os }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: pods-${{ runner.os }}-

      - name: Install JS deps
        run: |
          npm ci

      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen >/dev/null 2>&1; then
            brew install xcodegen
          fi

      - name: Generate Xcode project
        working-directory: ios
        run: xcodegen generate

      - name: Install CocoaPods
        working-directory: ios
        run: |
          set -euo pipefail
          if bundle exec pod install --repo-update; then
            exit 0
          fi
          echo "bundle exec pod install failed; retrying with system pod"
          pod install --repo-update

      - name: Clean caches (global + repo-local) and set fresh module cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Caches/com.apple.dt.Xcode
          rm -rf build/DerivedData
          rm -rf build/DerivedData/ModuleCache.noindex
          rm -rf build/DerivedData/Build/Intermediates.noindex/ArchiveIntermediates
          rm -rf build/DerivedData/Build/Intermediates.noindex/PrecompiledHeaders
          MODULE_CACHE_DIR="$(mktemp -d)"
          echo "MODULE_CACHE_DIR=${MODULE_CACHE_DIR}" >> $GITHUB_ENV
          echo "CLANG_MODULE_CACHE_PATH=${MODULE_CACHE_DIR}" >> $GITHUB_ENV

      - name: Build — Simulator (generic destination)
        env:
          RCT_NEW_ARCH_ENABLED: "1"
          MODULE_CACHE_DIR: ${{ env.MODULE_CACHE_DIR }}
          CLANG_MODULE_CACHE_PATH: ${{ env.CLANG_MODULE_CACHE_PATH }}
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$RESULT_BUNDLE_SIM")"
          xcodebuild \
            -workspace "${WORKSPACE}" \
            -scheme "${SCHEME}" \
            -configuration Release \
            -sdk iphonesimulator \
            -destination "generic/platform=iOS Simulator" \
            -derivedDataPath "${DERIVED_DATA}" \
            -resultBundlePath "${RESULT_BUNDLE_SIM}" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            clean build | xcpretty && exit ${PIPESTATUS[0]}

      - name: Remove temporary module cache
        if: env.MODULE_CACHE_DIR != ''
        run: |
          if [ -d "${MODULE_CACHE_DIR}" ]; then
            rm -rf "${MODULE_CACHE_DIR}"
          fi
        env:
          MODULE_CACHE_DIR: ${{ env.MODULE_CACHE_DIR }}

      - name: Upload Simulator Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-sim-products
          path: |
            build/DerivedData/Build/Products/Release-iphonesimulator/*.app
            ${{ env.RESULT_BUNDLE_SIM }}
          if-no-files-found: warn

  device-archive:
    name: Device archive (.xcarchive, unsigned)
    runs-on: macos-15
    needs: sim-build
    steps:
      - uses: actions/checkout@v5

      - name: Select Xcode ${{ env.XCODE_VERSION }}
        run: |
          sudo xcode-select -s "/Applications/Xcode_${XCODE_VERSION}.app"
          xcodebuild -version

      - uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Set up Ruby ${{ env.RUBY_VERSION }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ios

      - name: Install xcpretty
        run: gem install xcpretty

      - name: Cache Pods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: pods-${{ runner.os }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: pods-${{ runner.os }}-

      - name: Install JS deps
        run: npm ci

      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen >/dev/null 2>&1; then
            brew install xcodegen
          fi

      - name: Generate Xcode project
        working-directory: ios
        run: xcodegen generate

      - name: Install CocoaPods
        working-directory: ios
        run: |
          set -euo pipefail
          if bundle exec pod install --repo-update; then
            exit 0
          fi
          echo "bundle exec pod install failed; retrying with system pod"
          pod install --repo-update

      - name: Clean caches (global + repo-local) and set fresh module cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Caches/com.apple.dt.Xcode
          rm -rf build/DerivedData
          rm -rf build/DerivedData/ModuleCache.noindex
          rm -rf build/DerivedData/Build/Intermediates.noindex/ArchiveIntermediates
          rm -rf build/DerivedData/Build/Intermediates.noindex/PrecompiledHeaders
          MODULE_CACHE_DIR="$(mktemp -d)"
          echo "MODULE_CACHE_DIR=${MODULE_CACHE_DIR}" >> $GITHUB_ENV
          echo "CLANG_MODULE_CACHE_PATH=${MODULE_CACHE_DIR}" >> $GITHUB_ENV

      - name: Build — Generic iOS Device (Archive)
        env:
          RCT_NEW_ARCH_ENABLED: "1"
          MODULE_CACHE_DIR: ${{ env.MODULE_CACHE_DIR }}
          CLANG_MODULE_CACHE_PATH: ${{ env.CLANG_MODULE_CACHE_PATH }}
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$RESULT_BUNDLE_DEV")"
          xcodebuild \
            -workspace "${WORKSPACE}" \
            -scheme "${SCHEME}" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -derivedDataPath "${DERIVED_DATA}" \
            -resultBundlePath "${RESULT_BUNDLE_DEV}" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            clean build archive | xcpretty && exit ${PIPESTATUS[0]}

      - name: Remove temporary module cache
        if: env.MODULE_CACHE_DIR != ''
        run: |
          if [ -d "${MODULE_CACHE_DIR}" ]; then
            rm -rf "${MODULE_CACHE_DIR}"
          fi
        env:
          MODULE_CACHE_DIR: ${{ env.MODULE_CACHE_DIR }}

      - name: Upload Device Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-device-archive
          path: |
            build/DerivedData/Build/Products/Release-iphoneos/*.app
            build/DerivedData/Build/Intermediates.noindex/ArchiveIntermediates/${{ env.SCHEME }}/BuildProductsPath/Release-iphoneos/*.app
            ${{ env.RESULT_BUNDLE_DEV }}
          if-no-files-found: warn
