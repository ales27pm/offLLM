name: iOS Build - xcresult JSON (iPhone 16 Pro iOS 18.x fallback 18.6→18.5→18.4)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  ios:
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Verify Xcode
        shell: bash
        run: |
          set -euo pipefail
          xcodebuild -version
          xcodebuild -showsdks || true
          echo "DEVELOPER_DIR=${DEVELOPER_DIR:-not-set}"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install JS deps
        run: npm ci

      - name: Setup Ruby & CocoaPods
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"

      - name: Install CocoaPods & xcpretty
        shell: bash
        run: |
          set -euo pipefail
          gem install cocoapods -N
          gem install xcpretty -N
          pod --version

      - name: Ensure iOS project exists (optional XcodeGen)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "ios/MyOfflineLLMApp/project.yml" ]; then
            echo "Generating project with XcodeGen"
            brew install xcodegen || true
            (cd ios/MyOfflineLLMApp && xcodegen generate)
          fi

      - name: Install Pods
        shell: bash
        run: |
          set -euo pipefail
          cd ios
          pod repo update
          pod install --repo-update
          cd -
          find ios -maxdepth 3 -name "*.xcworkspace" -print

      - name: Ensure jq is available
        shell: bash
        run: |
          set -euo pipefail
          command -v jq >/dev/null 2>&1 || brew install jq || true
          jq --version || true

      # Prefer iOS 18.6, then 18.5, then 18.4; create iPhone 16 Pro if missing
      - name: Resolve/create & boot Simulator (iPhone 16 Pro; iOS 18.x highest available)
        id: sim
        shell: bash
        run: |
          set -euo pipefail
          WANT_RUNTIMES=("com.apple.CoreSimulator.SimRuntime.iOS-18-6" \
                         "com.apple.CoreSimulator.SimRuntime.iOS-18-5" \
                         "com.apple.CoreSimulator.SimRuntime.iOS-18-4")
          RUNTIME=""
          LABEL=""
          RUNTIMES_JSON="$(xcrun simctl list runtimes --json)"
          for r in "${WANT_RUNTIMES[@]}"; do
            if printf '%s' "$RUNTIMES_JSON" | jq -e --arg r "$r" '.runtimes[] | select(.identifier==$r and .isAvailable==true)' >/dev/null; then
              RUNTIME="$r"
              LABEL="$(printf '%s' "$r" | sed -E 's/.*iOS-([0-9]+)-([0-9]+)$/iOS \1.\2/')"
              break
            fi
          done
          if [ -z "$RUNTIME" ]; then
            echo "::error::No iOS 18.6 / 18.5 / 18.4 runtime found."
            xcrun simctl list runtimes
            exit 1
          fi
          echo "Using runtime: $RUNTIME ($LABEL)"
          UDID="$(xcrun simctl list devices --json | jq -r --arg RUNTIME "$RUNTIME" '.devices[$RUNTIME][]? | select(.isAvailable==true) | select(.name=="iPhone 16 Pro") | select(.state=="Shutdown" or .state=="Booted") | .udid' | head -n1)"
          if [ -z "${UDID:-}" ]; then
            NAME="iPhone 16 Pro (${LABEL})"
            echo "Creating simulator: $NAME"
            UDID="$(xcrun simctl create "$NAME" "iPhone 16 Pro" "$RUNTIME")"
          fi
          echo "Using UDID: $UDID"
          xcrun simctl boot "$UDID" || true
          xcrun simctl bootstatus "$UDID" -b
          echo "destination=platform=iOS Simulator,id=$UDID" >> "$GITHUB_OUTPUT"

      - name: Build (Simulator) and export .xcresult
        shell: bash
        env:
          SCHEME: MyOfflineLLMApp
          WORKSPACE: ios/MyOfflineLLMApp.xcworkspace
          CONFIGURATION: Debug
          SDK: iphonesimulator
          RESULT_BUNDLE: ${{ runner.temp }}/MyOfflineLLMApp.xcresult
          RESULT_JSON: ${{ runner.temp }}/MyOfflineLLMApp.xcresult.json
        run: |
          set -euo pipefail
          DESTINATION="${{ steps.sim.outputs.destination }}"
          echo "Building with destination: $DESTINATION"
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -sdk "$SDK" \
            -destination "$DESTINATION" \
            -resultBundlePath "$RESULT_BUNDLE" \
            -showBuildTimingSummary \
            build | xcpretty
          /usr/bin/xcrun xcresulttool get --format json --legacy --path "$RESULT_BUNDLE" > "$RESULT_JSON"
          echo "Result bundle: $RESULT_BUNDLE"
          echo "Result JSON:   $RESULT_JSON"

      - name: Upload .xcresult bundle
        uses: actions/upload-artifact@v4
        with:
          name: MyOfflineLLMApp-xcresult
          path: ${{ runner.temp }}/MyOfflineLLMApp.xcresult

      - name: Upload xcresult JSON
        uses: actions/upload-artifact@v4
        with:
          name: MyOfflineLLMApp-xcresult.json
          path: ${{ runner.temp }}/MyOfflineLLMApp.xcresult.json

      # ---------- DEVICE ARCHIVE (UNSIGNED) + IPA PACKAGING ----------
      # 1) Show current effective settings (helps diagnose pins)
      - name: Show effective build settings (SDK/Platforms)
        shell: bash
        run: |
          xcodebuild -showBuildSettings \
            -workspace ios/MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Release | egrep 'SDKROOT|SUPPORTED_PLATFORMS|IPHONEOS_DEPLOYMENT_TARGET' || true

      # 2) Unpin any iphoneos18.x Base SDK in pbxproj/xcconfigs
      - name: Unpin Base SDK (SDKROOT) if pinned to iphoneos18.x
        shell: bash
        run: |
          set -euo pipefail
          # pbxproj
          if [ -f "ios/MyOfflineLLMApp.xcodeproj/project.pbxproj" ]; then
            sed -E -i '' 's/SDKROOT = iphoneos18\.[0-9]+;/SDKROOT = iphoneos;/g' ios/MyOfflineLLMApp.xcodeproj/project.pbxproj || true
          fi
          # xcconfigs
          find ios -name "*.xcconfig" -print0 | xargs -0 -I{} sed -E -i '' 's/SDKROOT *= *iphoneos18\.[0-9]+/SDKROOT = iphoneos/g' "{}" || true
          echo "After unpinning — effective SDKROOT:"
          xcodebuild -showBuildSettings \
            -workspace ios/MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Release | grep -E "^ *SDKROOT" || true

      # 3) Archive using generic iOS device (no signing)
      - name: Archive for generic iOS device (no signing)
        id: archive
        shell: bash
        env:
          SCHEME: MyOfflineLLMApp
          WORKSPACE: ios/MyOfflineLLMApp.xcworkspace
          CONFIGURATION: Release
          ARCHIVE_PATH: ${{ runner.temp }}/MyOfflineLLMApp.xcarchive
        run: |
          set -euo pipefail
          echo "Archiving (generic iOS, no codesign, latest installed SDK)…"
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -sdk iphoneos \
            SDKROOT=iphoneos \
            SUPPORTED_PLATFORMS=iphoneos \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
            ONLY_ACTIVE_ARCH=NO ARCHS=arm64 \
            -destination "generic/platform=iOS" \
            -archivePath "$ARCHIVE_PATH" \
            archive | xcpretty
          if [ ! -d "$ARCHIVE_PATH/Products/Applications" ]; then
            echo "::error::Archive missing Applications folder: $ARCHIVE_PATH/Products/Applications"
            xcodebuild -showdestinations -workspace "$WORKSPACE" -scheme "$SCHEME" -sdk iphoneos || true
            exit 1
          fi
          APP_PATH="$(/usr/bin/find "$ARCHIVE_PATH/Products/Applications" -maxdepth 1 -type d -name '*.app' -print -quit)"
          if [ -z "$APP_PATH" ]; then
            echo "::error::No .app found inside archive."
            /usr/bin/find "$ARCHIVE_PATH" -name '*.app' -print || true
            exit 1
          fi
          echo "APP_PATH=$APP_PATH" >> "$GITHUB_ENV"
          echo "ARCHIVE_PATH=$ARCHIVE_PATH" >> "$GITHUB_ENV"

      # 4) Zip Payload -> unsigned IPA
      - name: Create unsigned IPA from archive
        shell: bash
        env:
          IPA_OUT: ${{ runner.temp }}/offLLM-unsigned.ipa
        run: |
          set -euo pipefail
          : "${APP_PATH:?APP_PATH not set}"
          rm -rf "$APP_PATH/_CodeSignature" || true
          rm -f "$APP_PATH/embedded.mobileprovision" || true
          WORK_DIR="$(mktemp -d)"
          mkdir -p "$WORK_DIR/Payload"
          cp -R "$APP_PATH" "$WORK_DIR/Payload/"
          (cd "$WORK_DIR" && zip -qry "$IPA_OUT" Payload)
          mv "$IPA_OUT" .
          echo "IPA_PATH=$(pwd)/$(basename "$IPA_OUT")" >> "$GITHUB_ENV"
          echo "Unsigned IPA created at: $(pwd)/$(basename "$IPA_OUT")"

      - name: Upload unsigned IPA
        uses: actions/upload-artifact@v4
        with:
          name: offLLM-unsigned-ipa
          path: ${{ env.IPA_PATH }}
          if-no-files-found: error

