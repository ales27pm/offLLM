name: iOS CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-ios:
    runs-on: macos-14
    env:
      DEVELOPER_DIR: /Applications/Xcode_16.2.app/Contents/Developer
      XCODE_SCHEME: monGARS
      XCODE_WORKSPACE: ios/monGARS.xcworkspace
      DERIVED_DATA: build/DerivedData

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show Xcode version
        run: |
          xcodebuild -version
          xcode-select -p

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install JS deps
        run: |
          if [ -f yarn.lock ]; then
            corepack enable
            yarn --version
            yarn install --frozen-lockfile
          elif [ -f package-lock.json ]; then
            npm ci
          else
            echo "No yarn.lock or package-lock.json found, skipping JS install"
          fi

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install CocoaPods (if not using Bundler)
        if: ${{ !hashFiles('Gemfile') }}
        run: |
          gem install cocoapods -N
          pod --version

      - name: Pod cache
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ~/Library/Caches/CocoaPods
            ~/Library/Developer/Xcode/DerivedData
          key: pods-${{ runner.os }}-${{ env.DEVELOPER_DIR }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            pods-${{ runner.os }}-${{ env.DEVELOPER_DIR }}-

      - name: Install pods
        working-directory: ios
        run: |
          if [ -f ../Gemfile ]; then
            bundle exec pod install --repo-update
          else
            pod install --repo-update
          fi

      # ---- FIX: make sure glog's src/config.h exists on CI ----
      - name: Configure glog for iOS (generate config.h)
        run: |
          set -euo pipefail
          SRC_DIR="ios/Pods/glog/src"
          GLOG_DIR="ios/Pods/glog"

          mkdir -p "$SRC_DIR"

          # 1) Preferred: RN helper script (same as local CocoaPods post-install)
          if [ ! -f "$SRC_DIR/config.h" ]; then
            if [ -f node_modules/react-native/scripts/ios-configure-glog.sh ]; then
              echo "Running RN ios-configure-glog.sh"
              bash node_modules/react-native/scripts/ios-configure-glog.sh || true
            else
              echo "RN helper script not found, skipping to fallback"
            fi
          fi

          # 2) Fallback: autogen/configure inside the glog pod
          if [ ! -f "$SRC_DIR/config.h" ] && [ -d "$GLOG_DIR" ]; then
            echo "Trying glog autogen/configure"
            (
              cd "$GLOG_DIR"
              if [ -x ./autogen.sh ]; then ./autogen.sh || true; fi
              if [ -x ./configure ]; then ./configure || true; fi
            )
          fi

          # 3) Last resort: write a tiny iOS-safe stub so the include resolves
          if [ ! -f "$SRC_DIR/config.h" ]; then
            echo "Creating minimal iOS config.h stub"
            F="$SRC_DIR/config.h"
            : > "$F"
            echo "/* minimal config for iOS CI */" >> "$F"
            echo "#define HAVE_PTHREAD 1" >> "$F"
            echo "#define GLOG_OS_MACOSX 1" >> "$F"
            echo "#define GLOG_HAVE_STDINT_H 1" >> "$F"
            echo "#define GLOG_HAVE_SYS_TIME_H 1" >> "$F"
            echo "#define GLOG_HAVE_UNISTD_H 1" >> "$F"
            echo "#define GLOG_NDEBUG 1" >> "$F"
            echo "#define GOOGLE_GLOG_DLL_DECL" >> "$F"
            echo "#define GOOGLE_GLOG_DLL_DECL_FOR_UNITTESTS" >> "$F"
            echo "#define GLOG_USE_GLOG_EXPORT 1" >> "$F"
          fi

          # 4) Verify
          if [ -f "$SRC_DIR/config.h" ]; then
            echo "✅ glog src/config.h present."
          else
            echo "❌ glog src/config.h still missing."
            exit 1
          fi

      - name: Build (Release, device SDK)
        run: |
          set -euo pipefail
          mkdir -p build
          LOG_PATH="build/xcodebuild.log"
          # Clean
          xcodebuild -workspace "$XCODE_WORKSPACE" \
                     -scheme "$XCODE_SCHEME" \
                     -configuration Release \
                     -sdk iphoneos \
                     -derivedDataPath "$DERIVED_DATA" \
                     clean | tee "$LOG_PATH"

          # Build
          xcodebuild -workspace "$XCODE_WORKSPACE" \
                     -scheme "$XCODE_SCHEME" \
                     -configuration Release \
                     -sdk iphoneos \
                     -derivedDataPath "$DERIVED_DATA" \
                     build | tee -a "$LOG_PATH"

      - name: Upload xcodebuild log (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-log
          path: build/xcodebuild.log

      - name: Upload .xcarchive (optional if you archive)
        if: false
        uses: actions/upload-artifact@v4
        with:
          name: ios-archive
          path: build/DerivedData/Build/Products/*.xcarchive