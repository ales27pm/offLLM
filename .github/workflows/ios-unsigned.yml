name: iOS CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-ios:
    runs-on: macos-14

    env:
      DEVELOPER_DIR: /Applications/Xcode_16.2.app/Contents/Developer
      XCODE_SCHEME: monGARS
      DERIVED_DATA: build/DerivedData

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.19.4"
          cache: npm

      - name: Cache node_modules/Pods
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}-node-${{ hashFiles('package-lock.json','yarn.lock','pnpm-lock.yaml') }}

      - name: Install JS deps
        run: |
          set -euo pipefail
          corepack enable || true
          if [ -f yarn.lock ]; then
            yarn install --frozen-lockfile
          elif [ -f package-lock.json ]; then
            npm ci
          else
            npm i
          fi

      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen >/dev/null; then
            brew install xcodegen
          fi

      - name: Generate Xcode project
        working-directory: ios
        run: |
          set -euo pipefail
          xcodegen generate

      - name: Verify project presence
        run: |
          set -euo pipefail
          FOUND="$(/bin/ls -d ios/*.xcodeproj 2>/dev/null | head -n1 || true)"
          if [ -z "${FOUND}" ]; then
            echo "::error title=Missing Xcode project::No .xcodeproj found under ios/. Commit XcodeGen inputs and rerun."
            exit 1
          fi
          NAME="$(basename "${FOUND}" .xcodeproj)"
          echo "XCODE_PROJECT_PATH=${FOUND}" >> "$GITHUB_ENV"
          echo "XCODE_PROJECT_NAME=${NAME}" >> "$GITHUB_ENV"
          echo "Expect CocoaPods to generate workspace: ios/${NAME}.xcworkspace"

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: false

      - name: Install CocoaPods
        working-directory: ios
        run: |
          set -euo pipefail
          if [ -f ../Gemfile ]; then
            bundle install --path vendor/bundle
            bundle exec pod install --repo-update
          else
            pod install --repo-update
          fi

      - name: Post-install hardening (Pods & App projects)
        if: always()
        run: |
          set -euo pipefail
          ruby scripts/ci/post_install_hardening_hook.rb || true

      - name: Authenticate Git for SPM (avoid GitHub rate limits)
        env:
          # Provide ephemeral token to the shell step
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TOKEN="${GITHUB_TOKEN:-}"
          if [ -z "$TOKEN" ]; then
            echo "::error title=Missing token::GITHUB_TOKEN is empty in this step's environment."
            exit 1
          fi

          # 1) netrc so libcurl/libgit can authenticate without prompts
          {
            printf "machine github.com\n  login x-access-token\n  password %s\n" "${TOKEN}"
            printf "machine api.github.com\n  login x-access-token\n  password %s\n" "${TOKEN}"
          } > ~/.netrc
          chmod 600 ~/.netrc

          # 2) Normalize SSH/git protocols to HTTPS
          git config --global url."https://github.com/".insteadOf git@github.com:
          git config --global url."https://".insteadOf git://

          # 3) (Optional) Extraheader to cover edge HTTP clients
          BASIC="$(printf "x-access-token:%s" "${TOKEN}" | base64)"
          git config --global http.https://github.com/.extraheader "AUTHORIZATION: basic ${BASIC}"
          git config --global http.https://api.github.com/.extraheader "AUTHORIZATION: basic ${BASIC}"

          # 4) (Optional) Fallback credential store (kept in HOME and chmod 600)
          git config --global credential.helper store
          printf "https://x-access-token:%s@github.com\n" "${TOKEN}" > ~/.git-credentials
          chmod 600 ~/.git-credentials

      - name: Install xcbeautify (pretty xcodebuild output)
        run: |
          set -euo pipefail
          brew install xcbeautify || true

      - name: Clean SwiftPM state (fresh resolve)
        run: |
          set -euo pipefail
          rm -rf "$DERIVED_DATA/SourcePackages" || true
          find . -name "Package.resolved" -maxdepth 3 -print -exec rm -f {} \; || true

      - name: Build (Release, iphoneos, deterministic DerivedData)
        env:
          XCODE_WORKSPACE: ios/${{ env.XCODE_PROJECT_NAME }}.xcworkspace
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # for authenticated SPM fetches
        run: |
          set -euo pipefail
          xcodebuild \
            -resolvePackageDependencies \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            -arch arm64 \
            -derivedDataPath "$DERIVED_DATA" \
            -resultBundlePath "$DERIVED_DATA/ResultBundle.xcresult" \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY='' \
            PROVISIONING_PROFILE_SPECIFIER='' SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=NO \
            "OTHER_CFLAGS=-DOBJC_OLD_DISPATCH_PROTOTYPES=0" \
            build | xcbeautify

      - name: Package unsigned IPA from Release-iphoneos
        run: |
          set -euo pipefail
          PRODUCTS_DIR="$DERIVED_DATA/Build/Products"
          if [ ! -d "$PRODUCTS_DIR" ]; then
            echo "::group::Debug: list of DerivedData"
            /bin/ls -lahR "$DERIVED_DATA" || true
            echo "::endgroup::"
            echo "::error title=Products dir missing::No Build/Products directory at $PRODUCTS_DIR (build may have failed earlier)."
            exit 1
          fi
          APP_PATH="$PRODUCTS_DIR/Release-iphoneos/${XCODE_SCHEME}.app"
          if [ ! -d "$APP_PATH" ]; then
            echo "::group::Debug: list of Build/Products"
            /bin/ls -lahR "$PRODUCTS_DIR" || true
            echo "::endgroup::"
            echo "::error title=App not found::No app at $APP_PATH (build may have failed earlier)."
            exit 1
          fi
          mkdir -p build
          cd build
          rm -rf Payload
          mkdir -p Payload
          cp -R "$APP_PATH" Payload/
          /usr/bin/zip -qry monGARS-unsigned.ipa Payload
          /usr/bin/zip -qry "$(basename "$APP_PATH").zip" "$APP_PATH"

      - name: Upload unsigned IPA, app & logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-unsigned-ipa
          path: |
            build/monGARS-unsigned.ipa
            build/*.app.zip
            ${{ env.DERIVED_DATA }}/ResultBundle.xcresult
            ${{ env.DERIVED_DATA }}/Logs/Build
          if-no-files-found: error
          compression-level: 6
