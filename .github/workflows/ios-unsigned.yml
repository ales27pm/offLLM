name: iOS (unsigned) - Device archive

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ios-unsigned-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  RUBY_VERSION: "3.2"
  SCHEME: "MyOfflineLLMApp"
  WORKSPACE: "ios/MyOfflineLLMApp.xcworkspace"
  ENABLE_SIGNED_EXPORT: "false"  # leave false for unsigned build

jobs:
  device-archive:
    name: Device archive + Unsigned IPA
    runs-on: macos-15
    env:
      # Increase Node memory for Metro bundler
      NODE_OPTIONS: "--max_old_space_size=4096"
      RCT_NEW_ARCH_ENABLED: 1
      # Use matching deployment target and Swift version for build
      IPHONEOS_DEPLOYMENT_TARGET: "18.0"
      SWIFT_VERSION: "5.10"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install JS deps
        run: npm run ci:install

      - name: Run tests
        run: npm run test:ci

      - name: Set up Xcode 16.4
        run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer

      - name: Verify active Xcode
        shell: bash
        run: |
          set -euo pipefail
          xcodebuild -version
          echo "DEVELOPER_DIR=${DEVELOPER_DIR:-$(xcode-select -p)}"

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ios

      - name: Install XcodeGen (if needed)
        working-directory: ios
        run: brew install xcodegen || true

      - name: Generate Xcode project
        working-directory: ios
        run: xcodegen generate

      - name: Bundle install
        working-directory: ios
        run: bundle install

      - name: Clean CocoaPods sandbox if stale
        working-directory: ios
        shell: bash
        run: |
          set -euo pipefail
          rm -f Pods/Manifest.lock
          rm -rf Pods/Headers || true

      - name: Install Pods
        working-directory: ios
        run: bundle exec pod install --repo-update

      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ios/build
          key: ${{ runner.os }}-derived-${{ env.SCHEME }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: ${{ runner.os }}-derived-${{ env.SCHEME }}-

      - name: Show effective build settings (SDK/Platforms)
        shell: bash
        run: |
          xcodebuild -showBuildSettings \
            -workspace ios/MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Release | egrep 'SDKROOT|SUPPORTED_PLATFORMS|IPHONEOS_DEPLOYMENT_TARGET' || true

      - name: Unpin Base SDK (SDKROOT) if pinned
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "ios/MyOfflineLLMApp.xcodeproj/project.pbxproj" ]; then
            # Ensure SWIFT_VERSION and SDKROOT aren’t pinned to old values in the project file
            sed -E -i '' \
              -e "s/SWIFT_VERSION = [0-9]+\.[0-9]+;/SWIFT_VERSION = ${SWIFT_VERSION};/g" \
              -e 's/SDKROOT = iphoneos[0-9]+(\.[0-9]+)?;/SDKROOT = iphoneos;/g' \
              ios/MyOfflineLLMApp.xcodeproj/project.pbxproj || true
          fi
          # Do the same for any xcconfig files
          find ios -name "*.xcconfig" -print0 | xargs -0 -I{} \
            sed -E -i '' 's/SDKROOT *= *iphoneos[0-9]+(\.[0-9]+)?/SDKROOT = iphoneos/g' "{}" || true
          # Ensure Swift version is explicitly set in main xcconfig (append if not present)
          echo "SWIFT_VERSION=${SWIFT_VERSION}" >> ios/MyOfflineLLMApp.xcconfig || true

          echo "After unpinning — effective SDKROOT:"
          xcodebuild -showBuildSettings \
            -workspace ios/MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Release | grep -E "^ *SDKROOT" || true

      - name: Validate Xcode project
        working-directory: ios
        run: |
          set -euo pipefail
          WORKSPACE_BASENAME="$(basename "${{ env.WORKSPACE }}")"
          PROJECT_BASENAME="${WORKSPACE_BASENAME%.xcworkspace}.xcodeproj"
          # Regenerate project if it contains unresolved merge conflict markers
          if grep -E '^(<<<<<<<|=======|>>>>>>>)' "$PROJECT_BASENAME/project.pbxproj" >/dev/null; then
            echo "::error::Git conflict markers detected in project.pbxproj; regenerating..."
            xcodegen generate
          fi
          # Regenerate if xcodebuild -list fails (invalid project)
          if ! xcodebuild -list -project "$PROJECT_BASENAME" >/dev/null; then
            echo "::error::Xcode project is invalid, regenerating..."
            xcodegen generate
          fi
          # Abort if conflict markers still remain
          if grep -E '^(<<<<<<<|=======|>>>>>>>)' "$PROJECT_BASENAME/project.pbxproj" >/dev/null; then
            echo "::error::Conflict markers remain after regeneration"; exit 1;
          fi
          # Verify the scheme exists in the workspace
          xcodebuild -list -workspace "$WORKSPACE_BASENAME" | grep -q "${{ env.SCHEME }}" || {
            echo "::error::Scheme ${{ env.SCHEME }} not found"; exit 1; }

      - name: Archive (device, unsigned)
        id: archive
        working-directory: ios
        shell: bash
        run: |
          set -euo pipefail
          ARCHIVE_PATH="build/${{ env.SCHEME }}.xcarchive"
          echo "Archiving with $(xcodebuild -version | head -1)…"
          xcodebuild \
            -workspace "$(basename "${{ env.WORKSPACE }}")" \
            -scheme "${{ env.SCHEME }}" \
            -configuration Release \
            -sdk iphoneos \
            -destination "generic/platform=iOS" \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
            ONLY_ACTIVE_ARCH=NO ARCHS=arm64 \
            -archivePath "$ARCHIVE_PATH" \
            -resultBundlePath "${RUNNER_TEMP}/archive.xcresult" \
            archive | tee xcodebuild-archive.log

          # Verify that archive contains an application
          if [ ! -d "$ARCHIVE_PATH/Products/Applications" ]; then
            echo "::error::Archive missing Applications folder: $ARCHIVE_PATH/Products/Applications"
            # Print available destinations and settings for debugging
            xcodebuild -showdestinations -workspace "$(basename "${{ env.WORKSPACE }}")" -scheme "${{ env.SCHEME }}" -sdk iphoneos || true
            xcodebuild -showBuildSettings -workspace "$(basename "${{ env.WORKSPACE }}")" -scheme "${{ env.SCHEME }}" -configuration Release | grep -E '^ *SDKROOT' || true
            exit 1
          fi
          echo "archive=$(pwd)/$ARCHIVE_PATH" >> "$GITHUB_OUTPUT"

      - name: Upload .xcarchive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SCHEME }}-xcarchive
          path: ios/build/${{ env.SCHEME }}.xcarchive

      - name: Create unsigned IPA from archive
        working-directory: ios
        shell: bash
        env:
          IPA_OUT: ${{ runner.temp }}/MyOfflineLLMApp-unsigned.ipa
        run: |
          set -euo pipefail
          archive_path="${{ steps.archive.outputs.archive }}"
          : "${archive_path:?Archive path missing}"
          APP_PATH="$(/usr/bin/find "$archive_path/Products/Applications" -maxdepth 1 -type d -name '*.app' -print -quit)"
          if [ -z "$APP_PATH" ]; then
            echo "::error::No .app found inside archive."
            /usr/bin/find "$archive_path" -name '*.app' -print || true
            exit 1
          fi
          # Remove any signing info to create a truly unsigned .ipa
          rm -rf "$APP_PATH/_CodeSignature" || true
          rm -f "$APP_PATH/embedded.mobileprovision" || true
          # Package into an IPA
          WORK_DIR="$(mktemp -d)"
          mkdir -p "$WORK_DIR/Payload"
          cp -R "$APP_PATH" "$WORK_DIR/Payload/"
          (cd "$WORK_DIR" && zip -qry "$IPA_OUT" Payload)
          mv "$IPA_OUT" .
          echo "IPA_PATH=$(pwd)/$(basename "$IPA_OUT")" >> "$GITHUB_ENV"
          echo "Unsigned IPA created at: $(pwd)/$(basename "$IPA_OUT")"

      - name: Upload unsigned IPA
        uses: actions/upload-artifact@v4
        with:
          name: MyOfflineLLMApp-unsigned-ipa
          path: ${{ env.IPA_PATH }}
          if-no-files-found: error

      - name: Print top issues from xcresult on failure
        if: failure()
        shell: bash
        run: |
          set -euo pipefail
          RESULT_BUNDLE="${RUNNER_TEMP}/archive.xcresult"
          if [ -d "$RESULT_BUNDLE" ]; then
            echo "::group::xcresult: top issues"
            /usr/bin/xcrun xcresulttool get --format json --path "$RESULT_BUNDLE" --legacy \
            | /usr/bin/python3 scripts/xcresult_top_issues.py
            echo "::endgroup::"
          fi

