name: iOS CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-ios:
    runs-on: macos-15
    env:
      NODE_VERSION: "20"
      RUBY_VERSION: "3.2"
      SCHEME: "monGARS"
      WORKSPACE: "ios/monGARS.xcworkspace"
      DERIVED_DATA: "${{ github.workspace }}/build/DerivedData"
      XCODE_VERSION: "16.4"
      DEVELOPER_DIR: "/Applications/Xcode_16.4.app/Contents/Developer"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Authenticate Git for SPM
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          git config --global url."https://x-access-token:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"

      - name: Show toolchain versions
        run: |
          sw_vers
          xcodebuild -version
          xcode-select -p
          node -v
          ruby --version
          gem --version

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            ~/.cocoapods
            ios/Pods
          key: ${{ runner.os }}-pods-xcode-${{ env.XCODE_VERSION }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-xcode-${{ env.XCODE_VERSION }}-
            ${{ runner.os }}-pods-

      - name: Cache DerivedData (optional)
        uses: actions/cache@v4
        with:
          path: ${{ env.DERIVED_DATA }}
          key: ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-${{ github.ref }}-
            ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-

      - name: Install JS deps
        run: npm ci

      - name: Install XcodeGen (if needed)
        run: |
          if ! command -v xcodegen >/dev/null 2>&1; then
            brew update
            brew install xcodegen
          fi

      - name: Generate Xcode project (XcodeGen)
        run: |
          if [ -f "ios/project.yml" ]; then
            (cd ios && xcodegen generate)
          else
            echo "::error title=Missing XcodeGen spec::No ios/project.yml found"
            exit 1
          fi

      - name: Run codegen
        run: npm run codegen

      - name: Install CocoaPods
        run: |
          cd ios
          bundle exec pod install --repo-update
          cd ..

      - name: Detect workspace
        run: |
          WS="$(
            /usr/bin/find ios -maxdepth 1 -name '*.xcworkspace' -print -quit
          )"
          if [ -z "$WS" ]; then
            echo "::error title=Workspace not found::No ios/*.xcworkspace after pod install"
            exit 1
          fi
          echo "WORKSPACE=$WS" >> "$GITHUB_ENV"
          echo "Detected: $WS"

      - name: iOS Doctor (workspace must exist)
        run: |
          chmod +x scripts/ios_doctor.sh || true
          ./scripts/ios_doctor.sh

      - name: Normalize workspace path
        run: |
          echo "WORKSPACE=ios/$WORKSPACE" >> "$GITHUB_ENV"

      - name: Resolve SwiftPM packages
        run: |
          set -euxo pipefail
          xcodebuild -resolvePackageDependencies \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -clonedSourcePackagesDirPath "$DERIVED_DATA/SourcePackages"

      - name: Build (prefer device; fallback to simulator)
        env:
          SCHEME: ${{ env.SCHEME }}
          CONFIGURATION: Release
        run: |
          set -euxo pipefail
          RESULT_DIR="$DERIVED_DATA"
          RB_DEVICE="$RESULT_DIR/ResultBundle_device.xcresult"
          RB_SIM="$RESULT_DIR/ResultBundle_sim.xcresult"

          build_with_dest () {
            local DEST="$1"
            local RB="$2"
            rm -rf "$RB"
            xcodebuild -workspace "$WORKSPACE" \
                       -scheme "$SCHEME" \
                       -destination "$DEST" \
                       -configuration "$CONFIGURATION" \
                       -derivedDataPath "$DERIVED_DATA" \
                       -resultBundlePath "$RB" \
                       CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO \
                       clean build
          }

          # Try a generic iOS (device) build first.
          set +e; build_with_dest "generic/platform=iOS" "$RB_DEVICE"; STATUS=$?; set -e
          if [ $STATUS -ne 0 ]; then
            echo "Device platform unavailable on this runner — falling back to Simulator."
            # Find latest available iOS runtime (e.g. com.apple.CoreSimulator.SimRuntime.iOS-18-6)
            RUNTIME_ID="$(xcrun simctl list runtimes | awk -F '[() ]+' '/iOS .* (available)/ {print $2}' | tail -1 || true)"
            # Find or create an iPhone 16 Pro on that runtime
            SIM_ID="$(xcrun simctl list devices | awk -v R="$RUNTIME_ID" -F '[() ]+' '$0 ~ R && /iPhone 16 Pro/ && /(Booted|Shutdown)/ {print $6; exit}' || true)"
            if [ -z "${SIM_ID:-}" ] && [ -n "${RUNTIME_ID:-}" ]; then
              SIM_ID="$(xcrun simctl create 'CI iPhone 16 Pro' 'com.apple.CoreSimulator.SimDeviceType.iPhone-16-Pro' "$RUNTIME_ID")"
            fi
            DEST_SIM="${SIM_ID:+id=$SIM_ID}"
            [ -n "$DEST_SIM" ] || DEST_SIM="platform=iOS Simulator,name=iPhone 16 Pro"
            build_with_dest "$DEST_SIM" "$RB_SIM"
          fi

      - name: Package artifacts (zip .app and make unsigned IPA)
        run: |
          set -euxo pipefail
          mkdir -p build
          DEV_DIR="$DERIVED_DATA/Build/Products/Release-iphoneos"
          SIM_DIR="$DERIVED_DATA/Build/Products/Release-iphonesimulator"
          PRODUCTS_DIR="$([ -d "$DEV_DIR" ] && echo "$DEV_DIR" || echo "$SIM_DIR")"
          APP_PATH="$(/usr/bin/find "$PRODUCTS_DIR" -maxdepth 2 -name '*.app' -print -quit || true)"
          if [ -z "$APP_PATH" ]; then
            echo "::error title=App not produced::No .app found under $PRODUCTS_DIR. Check scheme and targets."
            exit 1
          fi
          (cd "$(dirname "$APP_PATH")" && /usr/bin/zip -qry "$GITHUB_WORKSPACE/build/$(basename "$APP_PATH").zip" "$(basename "$APP_PATH")")

          # Create an unsigned IPA. If Simulator, IPA is for inspection only (not installable on devices).
          TMP_PAYLOAD="$(mktemp -d)"
          mkdir -p "$TMP_PAYLOAD/Payload"
          cp -R "$APP_PATH" "$TMP_PAYLOAD/Payload/"
          (cd "$TMP_PAYLOAD" && /usr/bin/zip -qry "$GITHUB_WORKSPACE/build/offLLM-unsigned.ipa" "Payload")
          rm -rf "$TMP_PAYLOAD"

      - name: Extract errors from xcresult
        if: always()
        run: |
          set -euo pipefail
          mkdir -p build
          for RB in "$DERIVED_DATA/ResultBundle_device.xcresult" "$DERIVED_DATA/ResultBundle_sim.xcresult"; do
            [ -d "$RB" ] || continue
            NAME="$(basename "$RB" .xcresult)"
            xcrun xcresulttool get --format json --path "$RB" > "build/${NAME}.json" || true
          done
          grep -n '"issue' build/*.json | head -n 200 || true

      - name: Upload unsigned IPA, app & logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-unsigned-ipa
          path: |
            build/offLLM-unsigned.ipa
            build/*.app.zip
            ${{ env.DERIVED_DATA }}/Build/Logs
            ${{ env.DERIVED_DATA }}/Logs/Build
            ${{ env.DERIVED_DATA }}/ResultBundle_device.xcresult
            ${{ env.DERIVED_DATA }}/ResultBundle_sim.xcresult
            build/*.json
          if-no-files-found: error
          compression-level: 6

  archive-ipa:
    name: Archive (device) & make unsigned IPA
    needs: [build-ios] # or remove this line to run in parallel
    runs-on: macos-15
    env:
      WORKSPACE: ios/monGARS.xcworkspace
      SCHEME: monGARS
      DERIVED_DATA: ${{ github.workspace }}/build/DerivedData
      XCODE_VERSION: "16.4"
      DEVELOPER_DIR: "/Applications/Xcode_16.4.app/Contents/Developer"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Set up Ruby (3.2) with bundler cache
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: NPM install (root)
        run: npm ci

      - name: Bundle install (ios/)
        working-directory: ios
        run: |
          bundle config set path 'vendor/bundle'
          bundle install --jobs 4

      - name: CocoaPods install
        working-directory: ios
        env:
          COCOAPODS_DISABLE_STATS: "true"
        run: bundle exec pod install

      - name: "Doctor: verify workspace exists"
        run: |
          test -f "${WORKSPACE}" || { echo "::error title=Workspace missing::${WORKSPACE} not found after pod install"; exit 1; }

      - name: Resolve SwiftPM deps
        run: |
          xcodebuild -resolvePackageDependencies \
            -workspace "${WORKSPACE}" \
            -scheme "${SCHEME}" \
            -clonedSourcePackagesDirPath "${DERIVED_DATA}/SourcePackages"

      - name: Archive (device) — try generic iOS
        id: archive
        continue-on-error: true
        run: |
          set -euxo pipefail
          ARCHIVE_PATH="${DERIVED_DATA}/Archive.xcarchive"
          RB_ARCHIVE="${DERIVED_DATA}/ResultBundle_archive.xcresult"
          rm -rf "$ARCHIVE_PATH" "$RB_ARCHIVE"
          xcodebuild archive \
            -workspace "${WORKSPACE}" \
            -scheme "${SCHEME}" \
            -destination "generic/platform=iOS" \
            -configuration Release \
            -derivedDataPath "${DERIVED_DATA}" \
            -resultBundlePath "${RB_ARCHIVE}" \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO \
            -archivePath "$ARCHIVE_PATH"
          echo "ok=true" >> "$GITHUB_OUTPUT"

      - name: Fallback note if device platform is missing
        if: steps.archive.outcome == 'failure'
        run: |
          echo "::warning title=Device platform unavailable::This runner image lacks the iOS Device platform. See uploaded xcresult for details."

      - name: Package unsigned IPA from archive (if archive succeeded)
        if: steps.archive.outputs.ok == 'true'
        run: |
          set -euxo pipefail
          ARCHIVE_PATH="${DERIVED_DATA}/Archive.xcarchive"
          APP_PATH="$(/usr/bin/find "$ARCHIVE_PATH/Products/Applications" -maxdepth 2 -name '*.app' -print -quit || true)"
          if [ -z "$APP_PATH" ]; then
            echo "::error title=No .app in archive::Archive succeeded but no .app found under Products/Applications."
            exit 1
          fi
          mkdir -p build
          # zip .app for inspection
          (cd "$(dirname "$APP_PATH")" && /usr/bin/zip -qry "$GITHUB_WORKSPACE/build/$(basename "$APP_PATH").zip" "$(basename "$APP_PATH")")
          # create unsigned IPA (device build; still unsigned)
          TMP="$(mktemp -d)"; mkdir -p "$TMP/Payload"
          cp -R "$APP_PATH" "$TMP/Payload/"
          (cd "$TMP" && /usr/bin/zip -qry "$GITHUB_WORKSPACE/build/offLLM-device-unsigned.ipa" "Payload")
          rm -rf "$TMP"

      - name: Extract errors from xcresult (archive)
        if: always()
        run: |
          set -euo pipefail
          mkdir -p build
          RB="${DERIVED_DATA}/ResultBundle_archive.xcresult"
          if [ -d "$RB" ]; then
            xcrun xcresulttool get --format json --path "$RB" > "build/ResultBundle_archive.json" || true
            grep -n '"issue' "build/ResultBundle_archive.json" | head -n 200 || true
          fi

      - name: Upload archive artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-archive-and-ipa
          path: |
            build/offLLM-device-unsigned.ipa
            build/*.app.zip
            ${{ env.DERIVED_DATA }}/Archive.xcarchive
            ${{ env.DERIVED_DATA }}/ResultBundle_archive.xcresult
            build/ResultBundle_archive.json
          if-no-files-found: warn
          compression-level: 6
