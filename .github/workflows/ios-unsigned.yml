name: iOS CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-ios:
    runs-on: macos-14

    env:
      DEVELOPER_DIR: /Applications/Xcode_16.2.app/Contents/Developer
      XCODE_SCHEME: monGARS
      XCODE_WORKSPACE: ios/monGARS.xcworkspace
      DERIVED_DATA: build/DerivedData

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}-node-${{ hashFiles('package-lock.json','yarn.lock','pnpm-lock.yaml') }}

      - name: Install JS deps
        run: |
          if [ -f yarn.lock ]; then
            corepack enable
            yarn install --frozen-lockfile
          elif [ -f pnpm-lock.yaml ]; then
            corepack enable
            pnpm i --frozen-lockfile
          else
            npm ci
          fi

      - name: Show iOS tree
        run: |
          echo "ios/ contents:"
          ls -la ios
          echo "Find .xcodeproj:"
          find ios -maxdepth 2 -name "*.xcodeproj" -print || true

      - name: Verify Xcode project exists
        run: |
          if [ ! -d "ios/monGARS.xcodeproj" ]; then
            echo "::error title=Missing Xcode project::ios/monGARS.xcodeproj not found. Check Podfile 'project' line or commit the project."
            exit 1
          fi

      - name: Set up Ruby and CocoaPods
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: false

      - name: Install CocoaPods
        working-directory: ios
        run: |
          set -euo pipefail
          if [ -f ../Gemfile ]; then
            bundle install --path vendor/bundle
            bundle exec pod install --repo-update
          else
            pod install --repo-update
          fi

      - name: Patch glog config.h (CI safety net)
        run: |
          set -euo pipefail
          GLOG_SRC="ios/Pods/glog/src"
          if [ -d "$GLOG_SRC" ]; then
            if [ ! -f "$GLOG_SRC/config.h" ]; then
              if [ -f "$GLOG_SRC/config_ios.h" ]; then
                cp "$GLOG_SRC/config_ios.h" "$GLOG_SRC/config.h"
                echo "Patched glog: config_ios.h -> config.h"
              elif [ -f "$GLOG_SRC/config.h.cmake" ]; then
                cp "$GLOG_SRC/config.h.cmake" "$GLOG_SRC/config.h"
                echo "Patched glog: config.h.cmake -> config.h"
              else
                echo "::warning::Could not find a glog config template to copy."
              fi
            fi
          else
            echo "::warning::glog src folder not found at $GLOG_SRC"
          fi

      - name: Build (Release, device SDK)
        run: |
          set -euo pipefail
          xcodebuild \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -arch arm64 \
            -derivedDataPath "$DERIVED_DATA" \
            CODE_SIGNING_ALLOWED=NO \
            build | xcpretty && exit ${PIPESTATUS[0]}

      - name: Archive artifacts (optional)
        if: always()
        run: |
          mkdir -p artifacts/xcode-log
          if [ -d "$DERIVED_DATA/Logs/Build" ]; then
            cp -R "$DERIVED_DATA/Logs/Build" artifacts/xcode-log/
          fi
        continue-on-error: true

      - name: Upload artifacts (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-logs
          path: artifacts/xcode-log
          if-no-files-found: ignore
