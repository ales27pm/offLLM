name: iOS Unsigned IPA

on:
  push:
    branches: [main, master]
  pull_request:

jobs:
  unsigned-ipa:
    name: Unsigned device IPA (Release, no codesign)
    runs-on: macos-15
    env:
      NODE_OPTIONS: --max_old_space_size=4096
      RCT_NEW_ARCH_ENABLED: 1
      USE_HERMES: true
      SCHEME: MyOfflineLLMApp
      CONFIGURATION: Release
      BUILD_DIR: build
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install Node deps
        run: npm ci

      - name: Cache Bundler
        uses: actions/cache@v4
        with:
          path: ios/vendor/bundle
          key: ${{ runner.os }}-bundler-${{ hashFiles('ios/Gemfile.lock') }}
          restore-keys: ${{ runner.os }}-bundler-

      - name: Bundle config path
        working-directory: ios
        run: bundle config set path vendor/bundle

      - name: Bundle install
        working-directory: ios
        run: bundle install

      - name: Install XcodeGen
        run: brew install xcodegen

      - name: Clean DerivedData
        run: rm -rf ~/Library/Developer/Xcode/DerivedData/*

      - name: Generate Xcode project
        run: xcodegen generate --spec ios/project.yml

      - name: Clean CocoaPods sandbox if stale
        working-directory: ios
        run: |
          set -euo pipefail
          rm -f Pods/Manifest.lock
          rm -rf Pods/Headers || true

      - name: Set NODE_BINARY for Xcode scripts
        run: |
          rm -f ios/.xcode.env.local
          printf 'export NODE_BINARY="%s"\n' "$(command -v node)" > ios/.xcode.env

      - name: Install Pods (bundler)
        working-directory: ios
        run: bundle exec pod install --repo-update

      - name: Scrub Hermes script phases
        working-directory: ios
        run: |
          bundle exec ruby ../scripts/strip_hermes_phase.rb Pods/Pods.xcodeproj MyOfflineLLMApp.xcodeproj

      - name: Assert Hermes phase is gone
        run: |
          set -euo pipefail
          if /usr/bin/grep -R --include=project.pbxproj --line-number -i "Replace Hermes|\[Hermes\]" \
               ios/Pods ios/MyOfflineLLMApp.xcodeproj 2>/dev/null; then
            echo "::error::Forbidden Hermes 'Replace Hermes' script phase detected after pod install."
            exit 1
          fi
          echo "✅ Hermes phase not found."

      - name: Snapshot Pods shell script phases (forensics)
        if: always()
        run: |
          mkdir -p build
          ruby - <<'RUBY' > build/pods_shell_scripts.txt
            require 'xcodeproj'
            p = Xcodeproj::Project.open('ios/Pods/Pods.xcodeproj')
            p.targets.each do |t|
              t.build_phases
               .select { |bp| bp.isa == 'PBXShellScriptBuildPhase' }
               .each { |bp| puts "#{t.name} :: #{bp.name}" }
            end
          RUBY

      - name: Upload Pods/Xcode projects on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ios-forensics-${{ github.job }}
          path: |
            ios/Podfile.lock
            ios/Pods/Pods.xcodeproj/project.pbxproj
            ios/MyOfflineLLMApp.xcodeproj/project.pbxproj
            build/pods_shell_scripts.txt

      - name: Resolve Swift package dependencies
        run: xcodebuild -resolvePackageDependencies -workspace ios/MyOfflineLLMApp.xcworkspace -scheme MyOfflineLLMApp -UseModernBuildSystem=YES

      - name: Archive (no codesign)
        run: |
          set -euo pipefail
          mkdir -p "${BUILD_DIR}"
          SWIFT_WORKER_THREADS=1 SWIFT_SERIALIZE_DEBUGGING_OPTIONS=NO \
          xcodebuild clean archive \
            -workspace ios/MyOfflineLLMApp.xcworkspace \
            -scheme "${SCHEME}" \
            -configuration "${CONFIGURATION}" \
            -destination 'generic/platform=iOS' \
            -archivePath "${BUILD_DIR}/MyOfflineLLMApp.xcarchive" \
            -resultBundlePath "${BUILD_DIR}/MyOfflineLLMApp.xcresult" \
            -UseModernBuildSystem=YES -parallelizeTargets NO -jobs 1 \
            CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO | tee "${BUILD_DIR}/xcodebuild.log"

      - name: Summarize build log
        if: always()
        run: |
          if [ -f "${BUILD_DIR}/xcodebuild.log" ]; then
            echo "Summary of warnings and errors:"
            grep -iE "error|warning|failed" "${BUILD_DIR}/xcodebuild.log" | tail -n 200 || true
          else
            echo "No xcodebuild.log found"
          fi

      - name: Upload xcodebuild logs
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-logs
          path: |
            ${{ env.BUILD_DIR }}/xcodebuild.log
            ${{ env.BUILD_DIR }}/MyOfflineLLMApp.xcresult

      - name: Install jq (for report parser)
        if: always()
        run: brew install jq

      - name: Build diagnosis report
        if: always()
        run: bash scripts/ci/diagnose_build.sh "${BUILD_DIR}"

      - name: Upload diagnosis report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-ci-report
          path: build/ios_ci_report
          if-no-files-found: warn

      - name: Locate built .app and dSYMs
        id: locate
        run: |
          set -euo pipefail
          ARCHIVE_PATH="${BUILD_DIR}/MyOfflineLLMApp.xcarchive"
          APP_PATH="$(/usr/bin/find "${ARCHIVE_PATH}/Products/Applications" -maxdepth 1 -name '*.app' -print -quit)"
          if [[ -z "${APP_PATH}" ]]; then
            echo "::error::Could not find built .app in ${ARCHIVE_PATH}/Products/Applications"
            exit 1
          fi
          echo "app_path=${APP_PATH}" >> "$GITHUB_OUTPUT"
          echo "✅ Found app: ${APP_PATH}"

          DSYM_DIR="${ARCHIVE_PATH}/dSYMs"
          DSYM_ZIP="${BUILD_DIR}/MyOfflineLLMApp.dSYMs.zip"
          if compgen -G "${DSYM_DIR}/*.dSYM" > /dev/null; then
            /usr/bin/zip -qry "${DSYM_ZIP}" "${DSYM_DIR}"/*.dSYM
            echo "dsym_zip=${DSYM_ZIP}" >> "$GITHUB_OUTPUT"
            echo "✅ dSYMs zipped: ${DSYM_ZIP}"
          else
            echo "dsym_zip=" >> "$GITHUB_OUTPUT"
            echo "ℹ️ No dSYMs found to zip"
          fi

      - name: Create unsigned IPA
        run: |
          set -euo pipefail
          APP_PATH="${{ steps.locate.outputs.app_path }}"
          IPA_DIR="${BUILD_DIR}/ipa"
          PAYLOAD_DIR="${IPA_DIR}/Payload"
          mkdir -p "${PAYLOAD_DIR}"
          /bin/cp -R "${APP_PATH}" "${PAYLOAD_DIR}/"
          (cd "${IPA_DIR}" && /usr/bin/zip -qry "MyOfflineLLMApp-unsigned.ipa" "Payload")
          ls -la "${IPA_DIR}"

      - name: Upload unsigned IPA
        uses: actions/upload-artifact@v4
        with:
          name: MyOfflineLLMApp-unsigned-ipa
          path: build/ipa/MyOfflineLLMApp-unsigned.ipa
          if-no-files-found: error

      - name: Upload dSYMs (if any)
        if: ${{ steps.locate.outputs.dsym_zip != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: MyOfflineLLMApp-dSYMs
          path: ${{ steps.locate.outputs.dsym_zip }}
          if-no-files-found: warn
