name: iOS CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-ios:
    runs-on: macos-15

    env:
      NODE_VERSION: "20"
      RUBY_VERSION: "3.2"
      XCODE_VERSION: "16.2"
      DEVELOPER_DIR: /Applications/Xcode_16.2.app/Contents/Developer
      XCODE_SCHEME: monGARS
      DERIVED_DATA: build/DerivedData

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Show toolchain versions
        run: |
          sw_vers
          xcodebuild -version
          xcode-select -p
          node -v
          ruby --version
          gem --version

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: false

      - name: Install Ruby gems (bundler)
        run: |
          gem install bundler --no-document
          bundle config set path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      # ---------- CACHES ----------
      # Node modules cache (salted by package-lock.json)
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # CocoaPods repo cache (~/.cocoapods) and Pods/ (salted by Podfile.lock & Xcode)
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            ~/.cocoapods
            ios/Pods
          key: ${{ runner.os }}-pods-xcode-${{ env.XCODE_VERSION }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-xcode-${{ env.XCODE_VERSION }}-
            ${{ runner.os }}-pods-

      # DerivedData cache (optional; helps incremental builds on PRs)
      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/DerivedData
          key: ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-${{ github.ref }}-
            ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-

      - name: Install JS deps
        run: |
          set -euo pipefail
          corepack enable || true
          if [ -f yarn.lock ]; then
            yarn install --frozen-lockfile
          elif [ -f package-lock.json ]; then
            npm ci
          else
            npm i
          fi

      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen >/dev/null; then
            brew install xcodegen
          fi

      - name: Generate Xcode project (XcodeGen)
        run: |
          if [ -f "ios/project.yml" ]; then
            (cd ios && xcodegen generate)
          else
            echo "No ios/project.yml found, skipping XcodeGen"
          fi

      - name: Verify project presence
        run: |
          set -euo pipefail
          FOUND="$(/bin/ls -d ios/*.xcodeproj 2>/dev/null | head -n1 || true)"
          if [ -z "${FOUND}" ]; then
            echo "::error title=Missing Xcode project::No .xcodeproj found under ios/. Commit XcodeGen inputs and rerun."
            exit 1
          fi
          NAME="$(basename "${FOUND}" .xcodeproj)"
          echo "XCODE_PROJECT_PATH=${FOUND}" >> "$GITHUB_ENV"
          echo "XCODE_PROJECT_NAME=${NAME}" >> "$GITHUB_ENV"
          echo "Expect CocoaPods to generate workspace: ios/${NAME}.xcworkspace"

      - name: Install CocoaPods
        run: |
          cd ios
          bundle exec pod install --repo-update
          cd ..

      - name: iOS Doctor (validate workspace exists)
        run: |
          chmod +x scripts/ios_doctor.sh || true
          ./scripts/ios_doctor.sh

      - name: Post-install hardening (Pods & App projects)
        if: always()
        run: |
          set -euo pipefail
          ruby scripts/ci/post_install_hardening_hook.rb || true

      - name: Authenticate Git for SPM (avoid GitHub rate limits)
        env:
          # Provide ephemeral token to the shell step
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TOKEN="${GITHUB_TOKEN:-}"
          if [ -z "$TOKEN" ]; then
            echo "::error title=Missing token::GITHUB_TOKEN is empty in this step's environment."
            exit 1
          fi

          # 1) netrc so libcurl/libgit can authenticate without prompts
          {
            printf "machine github.com\n  login x-access-token\n  password %s\n" "${TOKEN}"
            printf "machine api.github.com\n  login x-access-token\n  password %s\n" "${TOKEN}"
          } > ~/.netrc
          chmod 600 ~/.netrc

          # 2) Normalize SSH/git protocols to HTTPS
          git config --global url."https://github.com/".insteadOf git@github.com:
          git config --global url."https://".insteadOf git://

          # 3) (Optional) Extraheader to cover edge HTTP clients
          BASIC="$(printf "x-access-token:%s" "${TOKEN}" | base64)"
          git config --global http.https://github.com/.extraheader "AUTHORIZATION: basic ${BASIC}"
          git config --global http.https://api.github.com/.extraheader "AUTHORIZATION: basic ${BASIC}"

          # 4) (Optional) Fallback credential store (kept in HOME and chmod 600)
          git config --global credential.helper store
          printf "https://x-access-token:%s@github.com\n" "${TOKEN}" > ~/.git-credentials
          chmod 600 ~/.git-credentials

      - name: Install xcbeautify (pretty xcodebuild output)
        run: |
          set -euo pipefail
          brew install xcbeautify || true

      - name: Dump Xcode schemes (debug aid)
        env:
          XCODE_WORKSPACE: ios/${{ env.XCODE_PROJECT_NAME }}.xcworkspace
        run: |
          set -euo pipefail
          mkdir -p build
          # List all schemes/targets in JSON (handy artifact when builds donâ€™t produce an .app)
          xcodebuild -list -json -workspace "$XCODE_WORKSPACE" > build/xcode-list.json || true
          echo "Schemes:"
          /usr/bin/plutil -p build/xcode-list.json 2>/dev/null | sed 's/^/  /' || cat build/xcode-list.json || true

      - name: Clean SwiftPM state (fresh resolve)
        run: |
          set -euo pipefail
          rm -rf "$DERIVED_DATA/SourcePackages" || true
          find . -name "Package.resolved" -maxdepth 3 -print -exec rm -f {} \; || true

      - name: Compute app output path from build settings (Release/iPhoneOS)
        env:
          XCODE_WORKSPACE: ios/${{ env.XCODE_PROJECT_NAME }}.xcworkspace
        run: |
          set -euo pipefail
          mkdir -p build
          # Try JSON first (available on modern Xcode), then fall back to text parsing.
          brew install jq || true
          # JSON (best): select the application product in this scheme, Release + iphoneos
          ( xcodebuild -showBuildSettings \
              -workspace "$XCODE_WORKSPACE" \
              -scheme "$XCODE_SCHEME" \
              -configuration Release \
              -sdk iphoneos \
              -json > build/showBuildSettings.json ) || true

          APP_DIR=""
          WRAPPER_NAME=""
          if [ -s build/showBuildSettings.json ] && command -v jq >/dev/null; then
            APP_DIR="$(jq -r '.[] | .buildSettings | select(.PRODUCT_TYPE=="com.apple.product-type.application") | .CONFIGURATION_BUILD_DIR' build/showBuildSettings.json | tail -n1)"
            WRAPPER_NAME="$(jq -r '.[] | .buildSettings | select(.PRODUCT_TYPE=="com.apple.product-type.application") | .WRAPPER_NAME' build/showBuildSettings.json | tail -n1)"
          fi

          # Text fallback: narrow to the application target block and scrape the two lines we need.
          if [ -z "$APP_DIR" ] || [ -z "$WRAPPER_NAME" ]; then
            xcodebuild -showBuildSettings \
              -workspace "$XCODE_WORKSPACE" \
              -scheme "$XCODE_SCHEME" \
              -configuration Release \
              -sdk iphoneos \
              > build/showBuildSettings.txt 2>&1 || true
            # Grep the last 'PRODUCT_TYPE = application' block for Release|iphoneos
            awk '
              /PRODUCT_TYPE = com\.apple\.product-type\.application/ { inapp=1 }
              inapp && /CONFIGURATION_BUILD_DIR =/ { gsub(/^[^=]*= /,"" ); gsub(/^ +| +$/,"" ); appdir=$0 }
              inapp && /WRAPPER_NAME =/             { gsub(/^[^=]*= /,"" ); gsub(/^ +| +$/,"" ); wrapper=$0 }
              inapp && appdir && wrapper { print appdir; print wrapper; exit }
            ' build/showBuildSettings.txt > build/appPath.tmp || true
            if [ -s build/appPath.tmp ]; then
              APP_DIR="$(sed -n '1p' build/appPath.tmp)"
              WRAPPER_NAME="$(sed -n '2p' build/appPath.tmp)"
            fi
          fi

          # Persist for later steps; also emit for logs.
          if [ -n "$APP_DIR" ] && [ -n "$WRAPPER_NAME" ]; then
            echo "Derived app path:"
            echo "  CONFIGURATION_BUILD_DIR: $APP_DIR"
            echo "  WRAPPER_NAME:            $WRAPPER_NAME"
            echo "APP_PATH=$APP_DIR/$WRAPPER_NAME" >> "$GITHUB_ENV"
          else
            echo "::warning title=Could not derive app path::The scheme may not include an application target. Packaging will fall back to scanning Build/Products."
          fi

      - name: Build (Release, iphoneos, deterministic DerivedData)
        env:
          XCODE_WORKSPACE: ios/${{ env.XCODE_PROJECT_NAME }}.xcworkspace
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # for authenticated SPM fetches
        run: |
          set -euo pipefail
          xcodebuild \
            -resolvePackageDependencies \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            -arch arm64 \
            -derivedDataPath "$DERIVED_DATA" \
            -resultBundlePath "$DERIVED_DATA/ResultBundle.xcresult" \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY='' \
            PROVISIONING_PROFILE_SPECIFIER='' SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=NO \
            "OTHER_CFLAGS=-DOBJC_OLD_DISPATCH_PROTOTYPES=0" \
            build | xcbeautify

      - name: Package unsigned IPA from Release-iphoneos
        run: |
          set -euo pipefail
          PRODUCTS_DIR="$DERIVED_DATA/Build/Products"
          if [ ! -d "$PRODUCTS_DIR" ]; then
            echo "::group::Debug: list of DerivedData"
            /bin/ls -lahR "$DERIVED_DATA" || true
            echo "::endgroup::"
            echo "::error title=Products dir missing::No Build/Products directory at $PRODUCTS_DIR (build may have failed earlier)."
            exit 1
          fi
          # Prefer the APP_PATH we derived from build settings; else first *.app we can find.
          if [ -n "${APP_PATH:-}" ] && [ -d "$APP_PATH" ]; then
            SELECTED_APP="$APP_PATH"
          else
            SELECTED_APP="$(/usr/bin/find "$PRODUCTS_DIR" -type d -name '*.app' -print -quit || true)"
          fi
          if [ -z "$SELECTED_APP" ]; then
            echo "::group::Debug: list of Build/Products"
            /bin/ls -lahR "$PRODUCTS_DIR" || true
            echo "::endgroup::"
            echo "::error title=App not found::No .app found under $PRODUCTS_DIR. The selected scheme may not build an iOS application target."
            exit 1
          fi
          mkdir -p build
          cd build
          rm -rf Payload
          mkdir -p Payload
          cp -R "$SELECTED_APP" Payload/
          /usr/bin/zip -qry monGARS-unsigned.ipa Payload
          /usr/bin/zip -qry "$(basename "$SELECTED_APP").zip" "$SELECTED_APP"

      - name: Upload unsigned IPA, app & logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-unsigned-ipa
          path: |
            build/monGARS-unsigned.ipa
            build/*.app.zip
            ${{ env.DERIVED_DATA }}/ResultBundle.xcresult
            ${{ env.DERIVED_DATA }}/Logs/Build
            build/xcode-list.json
            build/showBuildSettings.json
            build/showBuildSettings.txt
          if-no-files-found: error
          compression-level: 6
