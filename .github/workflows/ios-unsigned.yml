name: iOS (unsigned) — Simulator .app & Device Archive

on:
  push: { branches: [main] }
  pull_request:

concurrency:
  group: ios-unsigned-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  XCODE_VERSION: "16.1"
  RUBY_VERSION: "3.2"
  SCHEME: "MyOfflineLLMApp"
  WORKSPACE: "ios/MyOfflineLLMApp.xcworkspace"

jobs:
  # =========================
  # 1) Simulator build (iPhone 16 Pro / iOS 18)
  # =========================
  sim-build:
    runs-on: macos-15
    env:
      NODE_OPTIONS: --max_old_space_size=4096
      RCT_NEW_ARCH_ENABLED: 1

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install JS deps
        run: npm run ci:install

      - name: Run tests
        run: npm test

      - name: Select Xcode ${{ env.XCODE_VERSION }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ios

      - name: Generate Xcode project
        working-directory: ios
        run: |
          brew install xcodegen || true
          xcodegen generate
          bundle install

      - name: Run codegen (non-blocking)
        run: npm run codegen || echo 'Warning: Codegen failed, proceeding with build...'

      - name: Install Pods
        working-directory: ios
        run: bundle exec pod install --repo-update

      - name: Boot iPhone 16 Pro (iOS 18.x) simulator
        run: |
          set -e
          UDID=$(xcrun simctl list devices | awk '/iPhone 16 Pro \(.*18\./ && /Shutdown/ {print $NF}' | tr -d '()' | head -n1)
          if [ -z "$UDID" ]; then
            echo "❌ No iPhone 16 Pro iOS 18.x simulator found on this runner."
            exit 1
          fi
          echo "Booting simulator $UDID"
          xcrun simctl boot "$UDID"
          xcrun simctl bootstatus "$UDID" -b
          echo "SIM_DEST=platform=iOS Simulator,id=$UDID" >> $GITHUB_ENV

      - name: Build (unsigned, Simulator)
        working-directory: ios
        run: |
          set -euo pipefail
          RESULT_BUNDLE=${{ env.SCHEME }}.xcresult
          xcodebuild \
            -workspace "${{ env.WORKSPACE }}" \
            -scheme "${{ env.SCHEME }}" \
            -configuration Release \
            -sdk iphonesimulator -arch arm64 \
            -destination "$SIM_DEST" \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
            -derivedDataPath build \
            -resultBundlePath "$RESULT_BUNDLE" | tee xcodebuild.log

          APP_PATH="build/Build/Products/Release-iphonesimulator/${{ env.SCHEME }}.app"
          ditto -ck --sequesterRsrc --keepParent "$APP_PATH" ${{ env.SCHEME }}-Simulator.zip

      - name: Upload Simulator app (zip)
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ env.SCHEME }}-Simulator
          path: ios/${{ env.SCHEME }}-Simulator.zip
          if-no-files-found: ignore

      - name: Upload logs & xcresult
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sim-xcode-logs-and-result
          path: |
            ios/xcodebuild.log
            ios/${{ env.SCHEME }}.xcresult
          if-no-files-found: ignore

  # =========================
  # 2) Device archive (+ conditional IPA export if signing is provided)
  # =========================
  device-archive:
    runs-on: macos-15
    needs: sim-build
    env:
      NODE_OPTIONS: --max_old_space_size=4096
      RCT_NEW_ARCH_ENABLED: 1

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install JS deps
        run: npm run ci:install

      - name: Select Xcode ${{ env.XCODE_VERSION }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ios

      - name: Generate Xcode project & install pods
        working-directory: ios
        run: |
          brew install xcodegen || true
          xcodegen generate
          bundle install
          bundle exec pod install --repo-update

      - name: Archive (device, unsigned)
        working-directory: ios
        run: |
          set -euo pipefail
          ARCHIVE_PATH=build/${{ env.SCHEME }}.xcarchive
          xcodebuild \
            -workspace "${{ env.WORKSPACE }}" \
            -scheme "${{ env.SCHEME }}" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
            archive | tee xcodebuild-archive.log
          echo "ARCHIVE_PATH=$ARCHIVE_PATH" >> $GITHUB_ENV

      - name: Upload .xcarchive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SCHEME }}-xcarchive
          path: ios/build/${{ env.SCHEME }}.xcarchive

      # ---- Optional path A: Export IPA using P12 + mobileprovision secrets ----
      # Provide these as GitHub Secrets (base64-encoded files):
      #  - IOS_SIGNING_CERT_P12     : base64 of your .p12
      #  - IOS_P12_PASSWORD         : password for the .p12
      #  - IOS_MOBILEPROVISION_B64  : base64 of your .mobileprovision (Ad Hoc or Development)
      #  - IOS_PROFILE_NAME         : profile name (e.g., "My AdHoc Profile")
      #  - IOS_BUNDLE_ID            : e.g., com.yourcompany.MyOfflineLLMApp
      - name: Export IPA via manual signing (P12 + profile)
        if: ${{ secrets.IOS_SIGNING_CERT_P12 != '' && secrets.IOS_P12_PASSWORD != '' && secrets.IOS_MOBILEPROVISION_B64 != '' && secrets.IOS_PROFILE_NAME != '' && secrets.IOS_BUNDLE_ID != '' }}
        working-directory: ios
        run: |
          set -euo pipefail

          echo "::group::Install signing cert & profile"
          KEYCHAIN="$RUNNER_TEMP/build.keychain-db"
          security create-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"

          echo "${{ secrets.IOS_SIGNING_CERT_P12 }}" | base64 --decode > cert.p12
          security import cert.p12 -k "$KEYCHAIN" -P "${{ secrets.IOS_P12_PASSWORD }}" -A
          security list-keychain -d user -s "$KEYCHAIN" login.keychain-db

          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "${{ secrets.IOS_MOBILEPROVISION_B64 }}" | base64 --decode > "$HOME/Library/MobileDevice/Provisioning Profiles/${{ secrets.IOS_PROFILE_NAME }}.mobileprovision"
          echo "::endgroup::"

          cat > ExportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>ad-hoc</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${IOS_BUNDLE_ID}</key><string>${IOS_PROFILE_NAME}</string>
            </dict>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
          </dict>
          </plist>
          PLIST

          # Expand variables in the plist
          export IOS_BUNDLE_ID='${{ secrets.IOS_BUNDLE_ID }}'
          export IOS_PROFILE_NAME='${{ secrets.IOS_PROFILE_NAME }}'
          envsubst < ExportOptions.plist > ExportOptions.evaluated.plist

          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist ExportOptions.evaluated.plist \
            -exportPath build/export-ipa \
            -allowProvisioningUpdates | tee xcodebuild-export.log

          echo "IPA export complete."
          ls -lah build/export-ipa || true

      - name: Upload IPA (if exported)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SCHEME }}-IPA
          path: ios/build/export-ipa/*.ipa
          if-no-files-found: ignore

      # ---- Optional path B: (Alternative) Using App Store Connect API key via Fastlane match/sigh ----
      # If you prefer ASC API (no P12), add your fastlane step here using secrets:
      #  - ASC_KEY_ID, ASC_ISSUER_ID, ASC_PRIVATE_KEY (base64)
      # Then run `fastlane sigh --adhoc` to fetch a profile and export similarly.

      - name: Export IPA skipped (no signing secrets)
        if: ${{ !(secrets.IOS_SIGNING_CERT_P12 != '' && secrets.IOS_P12_PASSWORD != '' && secrets.IOS_MOBILEPROVISION_B64 != '' && secrets.IOS_PROFILE_NAME != '' && secrets.IOS_BUNDLE_ID != '') }}
        run: echo "Skipping IPA export — provide signing secrets to enable."
