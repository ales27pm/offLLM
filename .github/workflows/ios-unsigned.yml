name: iOS CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-ios:
    runs-on: macos-14

    env:
      DEVELOPER_DIR: /Applications/Xcode_16.2.app/Contents/Developer
      XCODE_SCHEME: monGARS
      DERIVED_DATA: build/DerivedData

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Cache node_modules & Pods
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}-node-${{ hashFiles('package-lock.json','yarn.lock','pnpm-lock.yaml') }}

      - name: Install JS deps
        run: |
          set -euo pipefail
          corepack enable || true
          if [ -f yarn.lock ]; then
            yarn install --frozen-lockfile
          elif [ -f package-lock.json ]; then
            npm ci
          else
            npm i
          fi

      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen >/dev/null; then
            brew install xcodegen
          fi

      - name: Generate Xcode project
        working-directory: ios
        run: |
          set -euo pipefail
          xcodegen generate

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: false

      - name: Install CocoaPods and xcpretty
        run: |
          set -euo pipefail
          gem install cocoapods --no-document
          gem install xcpretty --no-document

      - name: Install CocoaPods
        working-directory: ios
        run: |
          set -euo pipefail
          if [ -f ../Gemfile ]; then
            bundle install --path vendor/bundle
            bundle exec pod install --repo-update
          else
            pod install --repo-update
          fi

      - name: Detect Xcode workspace/project
        run: |
          set -euo pipefail
          WS="$(ls -1 ios/*.xcworkspace 2>/dev/null | head -n1 || true)"
          PRJ="$(ls -1 ios/*.xcodeproj 2>/dev/null | head -n1 || true)"
          if [ -n "$WS" ]; then
            echo "XCODE_WORKSPACE=$WS" >> "$GITHUB_ENV"
          fi
          if [ -n "$PRJ" ]; then
            echo "XCODE_PROJECT_PATH=$PRJ" >> "$GITHUB_ENV"
            echo "XCODE_PROJECT_NAME=$(basename "$PRJ" .xcodeproj)" >> "$GITHUB_ENV"
          fi
          if [ -z "$WS" ] && [ -z "$PRJ" ]; then
            echo "::error title=Missing Xcode project::No .xcworkspace or .xcodeproj found under ios/."
            exit 1
          fi

      - name: Patch glog config.h (CI safety net)
        run: |
          set -euo pipefail
          GLOG_SRC="ios/Pods/glog/src"
          if [ -d "$GLOG_SRC" ]; then
            if [ ! -f "$GLOG_SRC/config.h" ]; then
              if [ -f "$GLOG_SRC/config_ios.h" ]; then
                cp "$GLOG_SRC/config_ios.h" "$GLOG_SRC/config.h"
                echo "Patched glog: config_ios.h -> config.h"
              elif [ -f "$GLOG_SRC/config.h.cmake" ]; then
                cp "$GLOG_SRC/config.h.cmake" "$GLOG_SRC/config.h"
                echo "Patched glog: config.h.cmake -> config.h"
              else
                echo "::warning::Could not find a glog config template to copy."
              fi
            fi
          else
            echo "::warning::glog src folder not found at $GLOG_SRC"
          fi

      - name: Build (Release, device SDK)
        run: |
          set -euo pipefail
          if [ -n "${XCODE_WORKSPACE:-}" ]; then
            xcodebuild \
              -workspace "$XCODE_WORKSPACE" \
              -scheme "$XCODE_SCHEME" \
              -configuration Release \
              -sdk iphoneos \
              -arch arm64 \
              -derivedDataPath "$DERIVED_DATA" \
              CODE_SIGNING_ALLOWED=NO \
              build | xcpretty && exit ${PIPESTATUS[0]}
          else
            xcodebuild \
              -project "$XCODE_PROJECT_PATH" \
              -scheme "$XCODE_SCHEME" \
              -configuration Release \
              -sdk iphoneos \
              -arch arm64 \
              -derivedDataPath "$DERIVED_DATA" \
              CODE_SIGNING_ALLOWED=NO \
              build | xcpretty && exit ${PIPESTATUS[0]}
          fi

      - name: Archive artifacts (optional)
        if: always()
        run: |
          mkdir -p artifacts/xcode-log
          if [ -d "$DERIVED_DATA/Logs/Build" ]; then
            cp -R "$DERIVED_DATA/Logs/Build" artifacts/xcode-log/
          fi
        continue-on-error: true

      - name: Upload artifacts (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-logs
          path: artifacts/xcode-log
          if-no-files-found: ignore
