name: iOS CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  ios-unsigned:
    runs-on: macos-15
    env:
      NODE_VERSION: "20"
      RUBY_VERSION: "3.2"
      SCHEME: "monGARS"
      DERIVED_DATA: "${{ github.workspace }}/build/DerivedData"
      XCODE_VERSION: "16.4"
      DEVELOPER_DIR: /Applications/Xcode_16.4.app/Contents/Developer
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Authenticate Git for SPM
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          git config --global url."https://x-access-token:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"

      - name: Show toolchain versions
        run: |
          sw_vers
          xcodebuild -version
          xcode-select -p
          node -v
          ruby --version
          gem --version

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            ~/.cocoapods
            ios/Pods
          key: ${{ runner.os }}-pods-xcode-${{ env.XCODE_VERSION }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-xcode-${{ env.XCODE_VERSION }}-
            ${{ runner.os }}-pods-

      - name: Cache DerivedData (optional)
        uses: actions/cache@v4
        with:
          path: ${{ env.DERIVED_DATA }}
          key: ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-${{ github.ref }}-
            ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-

      - name: Install JS deps
        run: npm ci

      - name: Install XcodeGen (if needed)
        run: |
          if ! command -v xcodegen >/dev/null 2>&1; then
            brew update
            brew install xcodegen
          fi

      - name: Generate Xcode project (XcodeGen)
        run: |
          if [ -f "ios/project.yml" ]; then
            (cd ios && xcodegen generate)
          else
            echo "::error title=Missing XcodeGen spec::No ios/project.yml found"
            exit 1
          fi

      - name: Run codegen
        run: npm run codegen

      - name: Install CocoaPods
        run: |
          cd ios
          bundle exec pod install --repo-update
          cd ..

      - name: Detect workspace
        run: |
          WS="$(/usr/bin/find ios -maxdepth 1 -name '*.xcworkspace' -print -quit)"
          if [ -z "$WS" ]; then
            echo "::error title=Workspace not found::No ios/*.xcworkspace after pod install"
            exit 1
          fi
          echo "WORKSPACE=$WS" >> "$GITHUB_ENV"
          echo "Detected: $WS"

      - name: iOS Doctor (workspace must exist)
        run: |
          chmod +x scripts/ios_doctor.sh || true
          ./scripts/ios_doctor.sh

      - name: Normalize workspace path
        run: |
          echo "WORKSPACE=ios/$WORKSPACE" >> "$GITHUB_ENV"

      - name: Resolve SwiftPM packages
        run: |
          xcodebuild -resolvePackageDependencies \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -clonedSourcePackagesDirPath "$DERIVED_DATA/SourcePackages"

      - name: Build (unsigned, simulator .app)
        env:
          SCHEME: ${{ env.SCHEME }}
          CONFIGURATION: Release
        run: |
          set -euxo pipefail
          RESULT_BUNDLE="$DERIVED_DATA/ResultBundle.xcresult"
          # Pick a single iPhone 16 Pro (iOS 18.x) simulator UUID to avoid "multiple matching destinations"
          SIM_ID="$(xcrun simctl list devices 'iOS 18' | awk -F '[() ]+' '/iPhone 16 Pro .* (Booted|Shutdown)/ {print $6; exit}')"
          if [ -z "${SIM_ID:-}" ]; then
            echo "No iPhone 16 Pro (iOS 18.x) simulator found; falling back to automatic destination."
            xcodebuild -workspace "$WORKSPACE" \
                       -scheme "$SCHEME" \
                       -sdk iphonesimulator \
                       -destination "platform=iOS Simulator,name=iPhone 16 Pro" \
                       -destination-timeout 1 \
                       -configuration "$CONFIGURATION" \
                       -derivedDataPath "$DERIVED_DATA" \
                       -resultBundlePath "$RESULT_BUNDLE" \
                       clean build
          else
            xcodebuild -workspace "$WORKSPACE" \
                       -scheme "$SCHEME" \
                       -sdk iphonesimulator \
                       -destination "id=${SIM_ID}" \
                       -destination-timeout 1 \
                       -configuration "$CONFIGURATION" \
                       -derivedDataPath "$DERIVED_DATA" \
                       -resultBundlePath "$RESULT_BUNDLE" \
                       clean build
          fi

          PRODUCTS_DIR="$DERIVED_DATA/Build/Products/${CONFIGURATION}-iphonesimulator"
          APP_PATH="$(/usr/bin/find "$PRODUCTS_DIR" -maxdepth 2 -name '*.app' -print -quit || true)"
          if [ -z "$APP_PATH" ]; then
            echo "::error title=App not produced::No .app found under $PRODUCTS_DIR. Check scheme and targets."
            exit 1
          fi
          echo "Found app: $APP_PATH"

      - name: Extract errors from xcresult
        if: always()
        run: |
          set -euo pipefail
          BUNDLE="$DERIVED_DATA/ResultBundle.xcresult"
          if [ -d "$BUNDLE" ]; then
            mkdir -p build
            xcrun xcresulttool get --format json --path "$BUNDLE" > build/xcresult.json || true
            /usr/bin/grep -n '"issue' build/xcresult.json | head -n 200 || true
          else
            echo "No xcresult bundle at $BUNDLE"
          fi

      - name: Upload result bundle & parsed issues
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcresult-and-issues
          path: |
            ${{ env.DERIVED_DATA }}/ResultBundle.xcresult
            build/xcresult.json
          if-no-files-found: warn

      - name: Package artifacts (zip .app and make unsigned IPA)
        run: |
          set -euxo pipefail
          mkdir -p build
          PRODUCTS_DIR="$DERIVED_DATA/Build/Products/Release-iphonesimulator"
          APP_PATH="$(/usr/bin/find "$PRODUCTS_DIR" -maxdepth 2 -name '*.app' -print -quit)"

          # Zip .app for inspection
          (cd "$(dirname "$APP_PATH")" && /usr/bin/zip -qry "$GITHUB_WORKSPACE/build/$(basename "$APP_PATH").zip" "$(basename "$APP_PATH")")

          # Create an unsigned IPA (note: for installable-on-device IPA you'd need a device build + signing)
          TMP_PAYLOAD="$(mktemp -d)"
          mkdir -p "$TMP_PAYLOAD/Payload"
          cp -R "$APP_PATH" "$TMP_PAYLOAD/Payload/"
          (cd "$TMP_PAYLOAD" && /usr/bin/zip -qry "$GITHUB_WORKSPACE/build/offLLM-unsigned.ipa" "Payload")
          rm -rf "$TMP_PAYLOAD"

      - name: Upload unsigned IPA, app & logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-unsigned-ipa
          path: |
            build/offLLM-unsigned.ipa
            build/*.app.zip
            ${{ env.DERIVED_DATA }}/Build/Logs
            ${{ env.DERIVED_DATA }}/Logs/Build
          if-no-files-found: error
          compression-level: 6
