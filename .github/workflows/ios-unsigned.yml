name: iOS unsigned build

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  ios:
    runs-on: macos-14

    env:
      RCT_NEW_ARCH_ENABLED: "1"
      USE_HERMES: "true"
      SCHEME: monGARS
      CONFIGURATION: Release
      BUILD_DIR: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Show Xcode path/version
        run: |
          set -euo pipefail
          xcodebuild -version
          echo "MD_APPLE_SDK_ROOT=$(/usr/bin/xcode-select -p | sed 's#/Contents/Developer##')" >> "$GITHUB_ENV"

      - name: Setup Homebrew tools
        run: |
          set -euo pipefail
          brew update
          brew install xcodegen jq autoconf automake libtool

      - name: Setup Node and install JS deps
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci

      - name: Ensure ios/project.yml and Info.plist exist (no heredocs)
        run: |
          set -euo pipefail
          if [ ! -f ios/project.yml ]; then
            echo "Seeding ios/project.yml"
            mkdir -p ios
            {
              echo "name: monGARS"
              echo "options:"
              echo "  bundleIdPrefix: com.example"
              echo "  deploymentTarget:"
              echo "    iOS: \"18.0\""
              echo "targets:"
              echo "  monGARS:"
              echo "    type: application"
              echo "    platform: iOS"
              echo "    sources:"
              echo "      - path: ."
              echo "        excludes:"
              echo "          - ios/**/*"
              echo "          - android/**/*"
              echo "          - node_modules/**/*"
              echo "    settings:"
              echo "      PRODUCT_BUNDLE_IDENTIFIER: com.example.monGARS"
              echo "      INFOPLIST_FILE: ios/Info.plist"
            } > ios/project.yml
          fi
          if [ ! -f ios/Info.plist ]; then
            echo "Creating ios/Info.plist"
            mkdir -p ios
            {
              echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
              echo "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">"
              echo "<plist version=\"1.0\">"
              echo "<dict>"
              echo "  <key>CFBundleName</key><string>monGARS</string>"
              echo "  <key>CFBundleIdentifier</key><string>com.example.monGARS</string>"
              echo "  <key>CFBundleExecutable</key><string>\$(EXECUTABLE_NAME)</string>"
              echo "  <key>CFBundlePackageType</key><string>APPL</string>"
              echo "  <key>UISupportedInterfaceOrientations</key>"
              echo "  <array><string>UIInterfaceOrientationPortrait</string></array>"
              echo "  <key>LSRequiresIPhoneOS</key><true/>"
              echo "</dict>"
              echo "</plist>"
            } > ios/Info.plist
          fi

      - name: Generate .xcodeproj with XcodeGen
        run: |
          set -euo pipefail
          pushd ios >/dev/null
          rm -rf monGARS.xcodeproj
          xcodegen generate --spec project.yml
          test -d monGARS.xcodeproj && echo "✅ Generated ios/monGARS.xcodeproj"
          popd >/dev/null

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: false

      - name: Install CocoaPods and pods
        run: |
          set -euo pipefail
          gem install cocoapods -N
          cd ios
          pod repo update
          pod install --verbose

      - name: Ensure glog config.h exists (generate or copy)
        run: |
          set -euo pipefail
          SRC_DIR="ios/Pods/glog/src"
          GLOG_DIR="ios/Pods/glog"
          PRIV_HDR="ios/Pods/Headers/Private/glog/config.h"

          mkdir -p "$SRC_DIR"

          # 1) If src/config.h is missing, try configure
          if [ ! -f "$SRC_DIR/config.h" ]; then
            if [ -x "$GLOG_DIR/configure" ]; then
              echo "Running glog ./configure to generate config.h"
              (cd "$GLOG_DIR" && ./configure || true)
            fi
          fi

          # 2) If still missing, copy from any known location (Private headers first)
          if [ ! -f "$SRC_DIR/config.h" ]; then
            if [ -f "$PRIV_HDR" ]; then
              echo "Copying $PRIV_HDR -> $SRC_DIR/config.h"
              cp "$PRIV_HDR" "$SRC_DIR/config.h"
            else
              FOUND="$(/usr/bin/find ios/Pods -name config.h -path '*/glog/*' | head -n1 || true)"
              if [ -n "${FOUND:-}" ]; then
                echo "Copying $FOUND -> $SRC_DIR/config.h"
                cp "$FOUND" "$SRC_DIR/config.h"
              fi
            fi
          fi

          # 3) Final check
          if [ ! -f "$SRC_DIR/config.h" ]; then
            echo "❌ glog src/config.h still missing; build will likely fail."
            ls -la "$SRC_DIR" || true
            exit 1
          else
            echo "✅ glog src/config.h present."
          fi

      - name: Build (xcodebuild)
        run: |
          set -euo pipefail
          LOG="$BUILD_DIR/xcodebuild.log"
          mkdir -p "$BUILD_DIR"

          xcodebuild \
            -workspace ios/monGARS.xcworkspace \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -destination 'generic/platform=iOS' \
            -UseModernBuildSystem=YES \
            -showBuildTimingSummary \
            clean

          if ! xcodebuild \
            -workspace ios/monGARS.xcworkspace \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -destination 'generic/platform=iOS' \
            -derivedDataPath "$BUILD_DIR/DerivedData" \
            -UseModernBuildSystem=YES \
            -showBuildTimingSummary \
            build | tee "$LOG" ; then
            echo "------ tail of $LOG ------"
            tail -n 300 "$LOG" || true
            exit 65
          fi

          # Verify success using fixed-string grep (not regex)
          if ! grep -Fq "** BUILD SUCCEEDED **" "$LOG"; then
            echo "Build did not report success."
            tail -n 300 "$LOG" || true
            exit 65
          fi

      - name: Package .app → .ipa (unsigned)
        run: |
          set -euo pipefail
          PRODUCTS="$BUILD_DIR/DerivedData/Build/Products/${CONFIGURATION}-iphoneos"
          APP_PATH="$PRODUCTS/${SCHEME}.app"
          OUT_DIR="$BUILD_DIR/artifacts"
          mkdir -p "$OUT_DIR/Payload"
          test -d "$APP_PATH" || { echo "App not found at $APP_PATH"; exit 1; }
          cp -R "$APP_PATH" "$OUT_DIR/Payload/"
          (cd "$OUT_DIR" && zip -qry "${SCHEME}.ipa" Payload)
          echo "IPA at $OUT_DIR/${SCHEME}.ipa"

      - name: Export xcresult summary (JSON)
        run: |
          set -euo pipefail
          XCRESULT_DIR="$(/usr/bin/find "$BUILD_DIR" -name '*.xcresult' -maxdepth 3 -print -quit || true)"
          if [ -n "${XCRESULT_DIR:-}" ]; then
            /usr/bin/xcrun xcresulttool get --legacy --path "$XCRESULT_DIR" --format json > "$BUILD_DIR/monGARS.xcresult.json" || true
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-unsigned-build
          path: |
            build/xcodebuild.log
            build/artifacts/monGARS.ipa
            build/monGARS.xcresult.json
          if-no-files-found: warn