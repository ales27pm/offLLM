name: iOS CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  XCODE_VERSION: "16.4"

jobs:
  build-ios:
    runs-on: macos-15
    env:
      NODE_VERSION: "20"
      RUBY_VERSION: "3.2"
      SCHEME: "monGARS"
      DERIVED_DATA: "${{ github.workspace }}/build/DerivedData"
      RESULT_BUNDLE: "${{ github.workspace }}/build/DerivedData/ResultBundle_build.xcresult"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Set up Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install jq
        uses: dcarbone/install-jq-action@8867ddb4788346d7c22b72ea2e2ffe4d514c7bcb
        # jq keeps the parsing simple and resilient

      - name: Set up Ruby
        uses: ruby/setup-ruby@44511735964dcb71245e7e55f72539531f7bc0eb
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Authenticate Git for SPM
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          git config --global url."https://x-access-token:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"

      - name: Show toolchain versions
        run: |
          sw_vers
          xcodebuild -version
          xcode-select -p
          node -v
          ruby --version
          gem --version

      - name: Cache node_modules
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: |
            node_modules
            ~/.cache/npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache CocoaPods
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: |
            ~/.cocoapods
            ios/Pods
          key: ${{ runner.os }}-pods-xcode-${{ env.XCODE_VERSION }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-xcode-${{ env.XCODE_VERSION }}-
            ${{ runner.os }}-pods-

      - name: Cache DerivedData (optional)
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ${{ env.DERIVED_DATA }}
          key: ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-${{ github.ref }}-
            ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-

      - name: Install JS deps
        run: npm ci

      - name: Install XcodeGen (if needed)
        run: |
          if ! command -v xcodegen >/dev/null 2>&1; then
            brew update
            brew install xcodegen
          fi

      - name: Generate Xcode project (XcodeGen)
        run: |
          if [ -f "ios/project.yml" ]; then
            (cd ios && xcodegen generate)
          else
            echo "::error title=Missing XcodeGen spec::No ios/project.yml found"
            exit 1
          fi

      - name: Run codegen
        run: npm run codegen

      - name: Install CocoaPods
        run: |
          cd ios
          bundle exec pod install --repo-update
          cd ..

      - name: iOS Doctor (workspace must exist)
        run: |
          chmod +x scripts/ios_doctor.sh || true
          ./scripts/ios_doctor.sh

      - name: "Doctor: verify workspace path"
        run: |
          set -euo pipefail
          WS="${WORKSPACE:-ios/monGARS.xcworkspace}"
          case "$WS" in
            /*) WS="${WS#"$GITHUB_WORKSPACE"/}" ;;
          esac
          if [ ! -e "$WS" ]; then
            echo "::error title=Workspace missing::'$WS' not found. Check WORKSPACE env/Pod install."
            echo "pwd=$(pwd)"
            ls -la ios || true
            exit 66
          fi
          echo "WORKSPACE=$WS" >> "$GITHUB_ENV"

      - name: Resolve SwiftPM packages
        run: |
          set -euxo pipefail
          RB="$DERIVED_DATA/ResultBundle.xcresult"
          rm -rf "$RB"
          xcodebuild -resolvePackageDependencies \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -clonedSourcePackagesDirPath "$DERIVED_DATA/SourcePackages"

      - name: Prepare Simulator
        id: sim
        run: |
          set -euxo pipefail
          # Prime CoreSimulatorService; sometimes the first JSON call races and returns empty.
          xcodebuild -runFirstLaunch >/dev/null 2>&1 || true
          xcrun simctl list >/dev/null 2>&1 || true

          # Retry loop to obtain JSON (prevents JSONDecodeError on momentary empties)
          SIM_JSON=""
          for i in 1 2 3; do
            if SIM_JSON="$(xcrun simctl list -j runtimes devices devicetypes)"; then
              if [ -n "$SIM_JSON" ] && [ "${#SIM_JSON}" -gt 100 ]; then
                break
              fi
            fi
            echo "simctl JSON empty on attempt $i; retrying..."
            sleep 2
          done

          if [ -z "$SIM_JSON" ]; then
            echo "::error::No simulator JSON available from simctl after retries."
            exit 70
          fi

          # Prefer iOS 18.5 if present and available; else pick latest available iOS>=18
          HAS_185="$(echo "$SIM_JSON" | jq -r '.runtimes[] | select(.isAvailable and .name=="iOS 18.5") | .identifier' | head -1 || true)"
          if [ -n "$HAS_185" ]; then
            RUNTIME_ID="$HAS_185"
          else
            RUNTIME_ID="$(echo "$SIM_JSON" | jq -r '
              def v: .version // "0";
              def parse: (v | split(".") | map(tonumber));
              [ .runtimes[]
                | select(.isAvailable and (.identifier|startswith("com.apple.CoreSimulator.SimRuntime.iOS")))
                | select(((.version // "0") | startswith("18.")))
              ]
              | sort_by(.version | split(".") | map(tonumber))
              | last
              | .identifier // empty
            ' || true)"
          fi

          if [ -z "${RUNTIME_ID:-}" ]; then
            echo "::error::No available iOS 18.x Simulator runtime found."
            echo "$SIM_JSON" | head -c 5000 || true
            exit 70
          fi

          DEVICE_TYPE="$(echo "$SIM_JSON" | jq -r '.devicetypes[] | select(.name=="iPhone 16 Pro") | .identifier' | head -1 || true)"
          if [ -z "${DEVICE_TYPE:-}" ]; then
            DEVICE_TYPE="$(echo "$SIM_JSON" | jq -r '.devicetypes[] | select(.name|startswith("iPhone")) | .identifier' | head -1 || true)"
          fi
          if [ -z "${DEVICE_TYPE:-}" ]; then
            echo "::error::No iPhone device type found in simctl output."
            exit 71
          fi

          # Try to re-use an existing device for that runtime; else create a new one
          DEVICE_ID="$(echo "$SIM_JSON" | jq -r --arg rt "$RUNTIME_ID" --arg dt "$DEVICE_TYPE" '.devices[$rt][]? | select(.isAvailable and .deviceTypeIdentifier==$dt) | .udid' | head -1 || true)"
          if [ -z "${DEVICE_ID:-}" ]; then
            DEVICE_ID="$(xcrun simctl create "CI-iPhone" "$DEVICE_TYPE" "$RUNTIME_ID")"
          fi
          if [ -z "${DEVICE_ID:-}" ]; then
            echo "::error::Failed to create or find a simulator for runtime $RUNTIME_ID."
            exit 72
          fi

          echo "Runtime: $RUNTIME_ID"
          echo "DeviceType: $DEVICE_TYPE"
          echo "DeviceID: $DEVICE_ID"
          xcrun simctl boot "$DEVICE_ID" >/dev/null 2>&1 || true
          xcrun simctl bootstatus "$DEVICE_ID" -b
          echo "dest=id=$DEVICE_ID" >> "$GITHUB_OUTPUT"

      - name: Build (simulator)
        env:
          SCHEME: ${{ env.SCHEME }}
          CONFIGURATION: Release
          DERIVED_DATA: ${{ env.DERIVED_DATA }}
          RESULT_BUNDLE: ${{ env.RESULT_BUNDLE }}
          DEST: ${{ steps.sim.outputs.dest }}
        run: |
          set -euxo pipefail
          RB="$RESULT_BUNDLE"
          rm -rf "$RB"
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -sdk iphonesimulator \
            -destination "$DEST" \
            -configuration "$CONFIGURATION" \
            -derivedDataPath "$DERIVED_DATA" \
            -resultBundlePath "$RB" \
            clean build

      - name: Package artifacts (zip .app and make unsigned IPA)
        run: |
          set -euxo pipefail
          mkdir -p build
          PRODUCTS_DIR="$DERIVED_DATA/Build/Products/Release-iphonesimulator"
          APP_PATH="$(/usr/bin/find "$PRODUCTS_DIR" -maxdepth 2 -name '*.app' -print -quit || true)"
          if [ -z "$APP_PATH" ]; then
            echo "::error title=App not produced::No .app found under $PRODUCTS_DIR. Check scheme and targets."
            exit 1
          fi
          (cd "$(dirname "$APP_PATH")" && /usr/bin/zip -qry "$GITHUB_WORKSPACE/build/$(basename "$APP_PATH").zip" "$(basename "$APP_PATH")")

          # Create an unsigned IPA. If Simulator, IPA is for inspection only (not installable on devices).
          TMP_PAYLOAD="$(mktemp -d)"
          mkdir -p "$TMP_PAYLOAD/Payload"
          cp -R "$APP_PATH" "$TMP_PAYLOAD/Payload/"
          (cd "$TMP_PAYLOAD" && /usr/bin/zip -qry "$GITHUB_WORKSPACE/build/offLLM-unsigned.ipa" "Payload")
          rm -rf "$TMP_PAYLOAD"

      - name: Extract errors from xcresult
        if: always()
        run: |
          set -euo pipefail
          mkdir -p build
          RB="$RESULT_BUNDLE"
          if [ -d "$RB" ]; then
            xcrun xcresulttool get --format json --path "$RB" > "build/ResultBundle_build.json" || true
            grep -n '"issue' "build/ResultBundle_build.json" | head -n 200 || true
          fi

      - name: Upload unsigned IPA, app & logs
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: ios-unsigned-ipa
          path: |
            build/offLLM-unsigned.ipa
            build/*.app.zip
            ${{ env.DERIVED_DATA }}/Build/Logs
            ${{ env.DERIVED_DATA }}/Logs/Build
            ${{ env.RESULT_BUNDLE }}
            build/*.json
          if-no-files-found: error
          compression-level: 6

  archive-ipa:
    name: Archive (device) & make unsigned IPA
    needs: [build-ios] # or remove this line to run in parallel
    runs-on: macos-15
    env:
      SCHEME: monGARS
      DERIVED_DATA: ${{ github.workspace }}/build/DerivedData

    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 20
          cache: npm

      - name: Set up Ruby (3.2) with bundler cache
        uses: ruby/setup-ruby@44511735964dcb71245e7e55f72539531f7bc0eb
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Cache CocoaPods
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: |
            ~/.cocoapods
            ios/Pods
          key: ${{ runner.os }}-pods-xcode-${{ env.XCODE_VERSION }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-xcode-${{ env.XCODE_VERSION }}-
            ${{ runner.os }}-pods-

      - name: NPM install (root)
        run: npm ci

      - name: Install XcodeGen (if needed)
        run: |
          if ! command -v xcodegen >/dev/null 2>&1; then
            brew update
            brew install xcodegen
          fi

      - name: Generate Xcode project (XcodeGen)
        working-directory: ios
        run: xcodegen generate

      - name: Run codegen
        run: npm run codegen

      - name: Bundle install (ios/)
        working-directory: ios
        run: |
          bundle config set path 'vendor/bundle'
          bundle install --jobs 4

      - name: CocoaPods install
        working-directory: ios
        env:
          COCOAPODS_DISABLE_STATS: "true"
        run: bundle exec pod install

      - name: Detect Xcode container
        run: |
          set -euo pipefail
          CONTAINER="$(/usr/bin/find ios -maxdepth 1 -name '*.xcworkspace' -print -quit)"
          TYPE="workspace"
          if [ -z "$CONTAINER" ]; then
            CONTAINER="$(/usr/bin/find ios -maxdepth 1 -name '*.xcodeproj' -print -quit)"
            TYPE="project"
          fi
          if [ -z "$CONTAINER" ]; then
            echo "::error title=No Xcode container::No ios/*.xcworkspace or ios/*.xcodeproj found"
            exit 1
          fi
          echo "XCODE_CONTAINER=$CONTAINER" >> "$GITHUB_ENV"
          echo "XCODE_CONTAINER_TYPE=$TYPE" >> "$GITHUB_ENV"

      - name: iOS Doctor (workspace must exist)
        if: env.XCODE_CONTAINER_TYPE == 'workspace'
        run: |
          chmod +x scripts/ios_doctor.sh || true
          ./scripts/ios_doctor.sh

      - name: Resolve SwiftPM deps
        run: |
          set -euxo pipefail
          RB="$DERIVED_DATA/ResultBundle.xcresult"
          rm -rf "$RB"
          xcodebuild -resolvePackageDependencies \
            -${XCODE_CONTAINER_TYPE} "$XCODE_CONTAINER" \
            -scheme "$SCHEME" \
            -clonedSourcePackagesDirPath "$DERIVED_DATA/SourcePackages"

      - name: Check for iOS Device SDK
        id: sdk
        run: |
          if xcodebuild -showsdks | grep -q "iphoneos"; then
            echo "present=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Archive (device)
        if: steps.sdk.outputs.present == 'true'
        id: archive
        run: |
          set -euxo pipefail
          ARCHIVE_PATH="${DERIVED_DATA}/Archive.xcarchive"
          RB_ARCHIVE="${DERIVED_DATA}/ResultBundle_archive.xcresult"
          rm -rf "$ARCHIVE_PATH" "$RB_ARCHIVE"
          xcodebuild archive \
            -${XCODE_CONTAINER_TYPE} "$XCODE_CONTAINER" \
            -scheme "$SCHEME" \
            -destination "generic/platform=iOS" \
            -configuration Release \
            -derivedDataPath "$DERIVED_DATA" \
            -resultBundlePath "$RB_ARCHIVE" \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO \
            -archivePath "$ARCHIVE_PATH"

      - name: Fallback note if device platform is missing
        if: steps.sdk.outputs.present != 'true'
        run: |
          echo "::warning title=Device platform unavailable::This runner image lacks the iOS Device platform. See uploaded xcresult for details."

      - name: Package unsigned IPA from archive
        if: steps.archive.conclusion == 'success'
        run: |
          set -euxo pipefail
          ARCHIVE_PATH="${DERIVED_DATA}/Archive.xcarchive"
          APP_PATH="$(/usr/bin/find "$ARCHIVE_PATH/Products/Applications" -maxdepth 2 -name '*.app' -print -quit || true)"
          if [ -z "$APP_PATH" ]; then
            echo "::error title=No .app in archive::Archive succeeded but no .app found under Products/Applications."
            exit 1
          fi
          mkdir -p build
          (cd "$(dirname "$APP_PATH")" && /usr/bin/zip -qry "$GITHUB_WORKSPACE/build/$(basename "$APP_PATH").zip" "$(basename "$APP_PATH")")
          APP_BASENAME="$(basename "$APP_PATH" .app)"
          TMP="$(mktemp -d)"; mkdir -p "$TMP/Payload"
          cp -R "$APP_PATH" "$TMP/Payload/"
          (cd "$TMP" && /usr/bin/zip -qry "$GITHUB_WORKSPACE/build/${APP_BASENAME}-device-unsigned.ipa" "Payload")
          rm -rf "$TMP"

      - name: Extract errors from xcresult (archive)
        if: always()
        run: |
          set -euo pipefail
          mkdir -p build
          RB="${DERIVED_DATA}/ResultBundle_archive.xcresult"
          if [ -d "$RB" ]; then
            xcrun xcresulttool get --format json --path "$RB" > "build/ResultBundle_archive.json" || true
            grep -n '"issue' "build/ResultBundle_archive.json" | head -n 200 || true
          fi

      - name: Upload archive artifacts
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: ios-archive-and-ipa
          path: |
            build/*.ipa
            build/*.app.zip
            ${{ env.DERIVED_DATA }}/Archive.xcarchive
            ${{ env.DERIVED_DATA }}/ResultBundle_archive.xcresult
            build/ResultBundle_archive.json
          if-no-files-found: warn
          compression-level: 6
