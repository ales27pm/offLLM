name: iOS CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-ios:
    runs-on: macos-15
    env:
      NODE_VERSION: "20"
      RUBY_VERSION: "3.2"
      SCHEME: "monGARS"
      WORKSPACE: "ios/monGARS.xcworkspace"
      DERIVED_DATA: "${{ github.workspace }}/build/DerivedData"
      XCODE_VERSION: "16.2"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Do NOT override Info.plist from the workflow; let XcodeGen/Pods define it.
      # Any old overrides like INFOPLIST_FILE are intentionally removed.

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Show toolchain versions
        run: |
          sw_vers
          xcodebuild -version
          xcode-select -p
          node -v
          ruby --version
          gem --version

      # ---------- CACHES ----------
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            ~/.cocoapods
            ios/Pods
          key: ${{ runner.os }}-pods-xcode-${{ env.XCODE_VERSION }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-xcode-${{ env.XCODE_VERSION }}-
            ${{ runner.os }}-pods-

      - name: Cache DerivedData (optional)
        uses: actions/cache@v4
        with:
          path: ${{ env.DERIVED_DATA }}
          key: ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-${{ github.ref }}-
            ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-

      - name: Install JS deps
        run: npm ci

      - name: Install XcodeGen and xcbeautify (if needed)
        run: |
          if ! command -v xcodegen >/dev/null 2>&1 || ! command -v xcbeautify >/dev/null 2>&1; then
            brew update
            brew install xcodegen xcbeautify
          fi

      - name: Generate Xcode project (XcodeGen)
        run: |
          if [ -f "ios/project.yml" ]; then
            (cd ios && xcodegen generate)
          else
            echo "::error title=Missing XcodeGen spec::No ios/project.yml found"
            exit 1
          fi

      - name: Install CocoaPods
        run: |
          cd ios
          bundle exec pod install --repo-update
          cd ..

      - name: iOS Doctor (workspace must exist)
        run: |
          chmod +x scripts/ios_doctor.sh || true
          ./scripts/ios_doctor.sh

      - name: Build (unsigned, simulator .app)
        env:
          SCHEME: ${{ env.SCHEME }}
          CONFIGURATION: Release
        run: |
          set -euxo pipefail
          xcodebuild -workspace "$WORKSPACE" \
                     -scheme "$SCHEME" \
                     -sdk iphonesimulator \
                     -configuration "$CONFIGURATION" \
                     -derivedDataPath "$DERIVED_DATA" \
                     clean build | xcbeautify

          PRODUCTS_DIR="$DERIVED_DATA/Build/Products/${CONFIGURATION}-iphonesimulator"
          APP_PATH="$(/usr/bin/find "$PRODUCTS_DIR" -maxdepth 2 -name '*.app' -print -quit || true)"
          if [ -z "$APP_PATH" ]; then
            echo "::error title=App not produced::No .app found under $PRODUCTS_DIR. Check scheme and targets."
            exit 1
          fi
          echo "Found app: $APP_PATH"

      - name: Package artifacts (zip .app and make unsigned IPA)
        run: |
          set -euxo pipefail
          mkdir -p build
          PRODUCTS_DIR="$DERIVED_DATA/Build/Products/Release-iphonesimulator"
          APP_PATH="$(/usr/bin/find "$PRODUCTS_DIR" -maxdepth 2 -name '*.app' -print -quit)"

          # Zip .app for inspection
          (cd "$(dirname "$APP_PATH")" && /usr/bin/zip -qry "$GITHUB_WORKSPACE/build/$(basename "$APP_PATH").zip" "$(basename "$APP_PATH")")

          # Create an unsigned IPA (note: for installable-on-device IPA you'd need a device build + signing)
          TMP_PAYLOAD="$(mktemp -d)"
          mkdir -p "$TMP_PAYLOAD/Payload"
          cp -R "$APP_PATH" "$TMP_PAYLOAD/Payload/"
          (cd "$TMP_PAYLOAD" && /usr/bin/zip -qry "$GITHUB_WORKSPACE/build/offLLM-unsigned.ipa" "Payload")
          rm -rf "$TMP_PAYLOAD"

      - name: Upload unsigned IPA, app & logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-unsigned-ipa
          path: |
            build/offLLM-unsigned.ipa
            build/*.app.zip
            ${{ env.DERIVED_DATA }}/Build/Logs
            ${{ env.DERIVED_DATA }}/Logs/Build
          if-no-files-found: error
          compression-level: 6
