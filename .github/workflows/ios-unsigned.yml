name: iOS (Unsigned)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
  workflow_call:

permissions:
  contents: read

concurrency:
  group: ios-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ios:
    runs-on: macos-14
    env:
      NODE_OPTIONS: --max_old_space_size=4096
      RCT_NEW_ARCH_ENABLED: "1"   # TurboModules/Fabric on
      USE_FLIPPER: "0"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node (cache npm)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm  # official caching

      - name: Install JS deps
        run: npm ci

      - name: Generate Turbo headers
        run: npm run codegen || true
        # required by your README flow before native build.

      - name: Select Xcode 16.1
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.1"

      - name: Setup Ruby & Bundler (caches gems)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true
        env:
          BUNDLE_GEMFILE: ios/Gemfile   # ensure bundler points to ios/Gemfile

      - name: Install XcodeGen & generate .xcodeproj
        working-directory: ios
        run: |
          brew install xcodegen || true
          if [ -f project.yml ]; then
            xcodegen generate
          elif [ -f MyOfflineLLMApp/project.yml ]; then
            xcodegen --spec MyOfflineLLMApp/project.yml
          else
            echo "❌ No XcodeGen spec found in ios/. Expected project.yml or MyOfflineLLMApp/project.yml"
            exit 1
          fi
        # README step before pods.

      - name: Recreate Pods & Workspace
        working-directory: ios
        run: |
          set -euo pipefail
          rm -rf Pods Podfile.lock MyOfflineLLMApp.xcworkspace
          bundle exec pod install --repo-update --verbose
          echo "Workspaces found:"
          find . -maxdepth 2 -name "*.xcworkspace" -print

      - name: Verify workspace & export path to env
        shell: bash
        run: |
          set -euo pipefail
          DEFAULT="ios/MyOfflineLLMApp.xcworkspace"
          if [ -f "$DEFAULT/contents.xcworkspacedata" ]; then
            echo "WORKSPACE=$DEFAULT" >> "$GITHUB_ENV"
            exit 0
          fi
          CANDIDATE="$(find ios -maxdepth 2 -name '*.xcworkspace' -print -quit || true)"
          if [ -n "$CANDIDATE" ] && [ -f "$CANDIDATE/contents.xcworkspacedata" ]; then
            echo "Using detected workspace: $CANDIDATE"
            echo "WORKSPACE=$CANDIDATE" >> "$GITHUB_ENV"
          else
            echo "❌ No .xcworkspace produced. Check ios/Podfile."
            exit 1
          fi

      - name: Build (Simulator, unsigned) — arm64 only
        run: |
          set -euo pipefail
          # Clean + build for arm64 simulator to avoid any stray x86_64 slices
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme MyOfflineLLMApp \
            -configuration Debug \
            -destination 'generic/platform=iOS Simulator' \
            -arch arm64 \
            ONLY_ACTIVE_ARCH=YES \
            EXCLUDED_ARCHS="x86_64" \
            CODE_SIGNING_ALLOWED=NO \
            clean build

      - name: Archive (Device, unsigned)
        run: |
          set -euo pipefail
          mkdir -p build
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme MyOfflineLLMApp \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath build/MyOfflineLLMApp.xcarchive \
            CODE_SIGNING_ALLOWED=NO \
            SKIP_INSTALL=NO \
            BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
            clean archive

      - name: Export unsigned .ipa
        run: |
          set -euo pipefail
          cat > ExportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>ad-hoc</string>
            <key>signingStyle</key><string>manual</string>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>destination</key><string>export</string>
            <key>manageAppVersionAndBuildNumber</key><false/>
          </dict>
          </plist>
          PLIST

          xcodebuild -exportArchive \
            -archivePath build/MyOfflineLLMApp.xcarchive \
            -exportPath build \
            -exportOptionsPlist ExportOptions.plist \
            CODE_SIGNING_ALLOWED=NO

          echo "Exported:"
          ls -la build

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: offLLM-ios-artifacts
          path: |
            build/*.ipa
            build/MyOfflineLLMApp.xcarchive
