name: iOS (unsigned) — Simulator app & Device archive

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ios-unsigned-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  RUBY_VERSION: "3.2"
  XCODE_VERSION: "16.4"
  SCHEME: "monGARS"
  WORKSPACE: "ios/monGARS.xcworkspace"
  DERIVED_DATA: "${{ github.workspace }}/build/DerivedData"
  RESULT_BUNDLE_SIM: "${{ github.workspace }}/build/ResultBundle_sim.xcresult"
  RESULT_BUNDLE_DEV: "${{ github.workspace }}/build/ResultBundle_device.xcresult"
  RCT_NEW_ARCH_ENABLED: "1"

jobs:
  sim-build:
    name: Simulator build (.app for iPhone 16 Pro / iOS 18)
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v5

      - name: Download bundled MLX model
        run: ./scripts/ci/download-mlx-model.sh

      - name: Select Xcode ${{ env.XCODE_VERSION }}
        run: |
          sudo xcode-select -s "/Applications/Xcode_${XCODE_VERSION}.app"
          xcodebuild -version

      - uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Set up Ruby ${{ env.RUBY_VERSION }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ios

      - name: Install xcpretty
        run: gem install xcpretty

      - name: Cache Pods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: pods-${{ runner.os }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: pods-${{ runner.os }}-

      - name: Install JS deps
        run: |
          npm ci

      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen >/dev/null 2>&1; then
            brew install xcodegen
          fi

      - name: Install xcresultparser
        run: |
          set -euo pipefail
          brew tap a7ex/homebrew-formulae
          brew install xcresultparser

      - name: Generate Xcode project
        working-directory: ios
        run: xcodegen generate

      - name: Install CocoaPods
        id: install_pods
        working-directory: ios
        run: |
          set -euo pipefail
          if bundle exec pod install --repo-update; then
            exit 0
          fi
          echo "bundle exec pod install failed; retrying with system pod"
          pod install --repo-update

      - name: Upload CocoaPods artifacts
        if: steps.install_pods.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ios-pods-sim-build
          path: |
            ios/Pods
            ios/monGARS.xcworkspace
            ios/Podfile.lock
          if-no-files-found: error

      - name: Clean caches (global + repo-local) and set fresh module cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Caches/com.apple.dt.Xcode
          rm -rf build/DerivedData
          rm -rf build/DerivedData/ModuleCache.noindex
          rm -rf build/DerivedData/Build/Intermediates.noindex/ArchiveIntermediates
          rm -rf build/DerivedData/Build/Intermediates.noindex/PrecompiledHeaders
          MODULE_CACHE_DIR="$(mktemp -d)"
          echo "MODULE_CACHE_DIR=${MODULE_CACHE_DIR}" >> $GITHUB_ENV
          echo "CLANG_MODULE_CACHE_PATH=${MODULE_CACHE_DIR}" >> $GITHUB_ENV

      - name: Build — Simulator (generic destination)
        env:
          RCT_NEW_ARCH_ENABLED: "1"
          MODULE_CACHE_DIR: ${{ env.MODULE_CACHE_DIR }}
          CLANG_MODULE_CACHE_PATH: ${{ env.CLANG_MODULE_CACHE_PATH }}
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$RESULT_BUNDLE_SIM")"
          LINK_MAP_DIR="${RUNNER_TEMP:-/tmp}"
          LINK_MAP_PATH="${LINK_MAP_DIR}/link-map-simulator-build-$(date +%s)-\$(TARGET_NAME)-\$(CURRENT_ARCH).map"
          EXTRA_OTHER_LDFLAGS="-v -Xlinker -map -Xlinker ${LINK_MAP_PATH}"
          BASE_OTHER_LDFLAGS="${OTHER_LDFLAGS:-}"
          if [[ "${BASE_OTHER_LDFLAGS}" != *"\$(inherited)"* ]]; then
            if [ -n "${BASE_OTHER_LDFLAGS}" ]; then
              BASE_OTHER_LDFLAGS="\$(inherited) ${BASE_OTHER_LDFLAGS}"
            else
              BASE_OTHER_LDFLAGS="\$(inherited)"
            fi
          fi
          OTHER_LDFLAGS="${BASE_OTHER_LDFLAGS} ${EXTRA_OTHER_LDFLAGS}"
          xcodebuild \
            -workspace "${WORKSPACE}" \
            -scheme "${SCHEME}" \
            -configuration Release \
            -sdk iphonesimulator \
            -destination "generic/platform=iOS Simulator" \
            -derivedDataPath "${DERIVED_DATA}" \
            -resultBundlePath "${RESULT_BUNDLE_SIM}" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            OTHER_LDFLAGS="${OTHER_LDFLAGS}" \
            clean build | xcpretty && exit ${PIPESTATUS[0]}

      - name: Summarize simulator xcresult
        if: ${{ always() }}
        run: |
          set -euo pipefail
          mkdir -p build
          if [ -d "${RESULT_BUNDLE_SIM}" ]; then
            if ! xcresultparser -o md "${RESULT_BUNDLE_SIM}" > build/ResultBundle_sim.md; then
              echo "::warning title=xcresultparser failed::Unable to summarize ${RESULT_BUNDLE_SIM}."
              rm -f build/ResultBundle_sim.md || true
            fi
          else
            echo "::warning title=xcresult missing::${RESULT_BUNDLE_SIM} not found; skipping summary."
          fi

      - name: Remove temporary module cache
        if: env.MODULE_CACHE_DIR != ''
        run: |
          if [ -d "${MODULE_CACHE_DIR}" ]; then
            rm -rf "${MODULE_CACHE_DIR}"
          fi
        env:
          MODULE_CACHE_DIR: ${{ env.MODULE_CACHE_DIR }}

      - name: Upload Simulator Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-sim-products
          path: |
            build/DerivedData/Build/Products/Release-iphonesimulator/*.app
            ${{ env.RESULT_BUNDLE_SIM }}
            build/ResultBundle_sim.md
          if-no-files-found: warn

  device-archive:
    name: Device archive (.xcarchive, unsigned)
    runs-on: macos-15
    needs: sim-build
    steps:
      - uses: actions/checkout@v5

      - name: Download bundled MLX model
        run: ./scripts/ci/download-mlx-model.sh

      - name: Select Xcode ${{ env.XCODE_VERSION }}
        run: |
          sudo xcode-select -s "/Applications/Xcode_${XCODE_VERSION}.app"
          xcodebuild -version

      - uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Set up Ruby ${{ env.RUBY_VERSION }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ios

      - name: Install xcpretty
        run: gem install xcpretty

      - name: Cache Pods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: pods-${{ runner.os }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: pods-${{ runner.os }}-

      - name: Install JS deps
        run: npm ci

      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen >/dev/null 2>&1; then
            brew install xcodegen
          fi

      - name: Install xcresultparser
        run: |
          set -euo pipefail
          brew tap a7ex/homebrew-formulae
          brew install xcresultparser

      - name: Generate Xcode project
        working-directory: ios
        run: xcodegen generate

      - name: Install CocoaPods
        id: install_pods
        working-directory: ios
        run: |
          set -euo pipefail
          if bundle exec pod install --repo-update; then
            exit 0
          fi
          echo "bundle exec pod install failed; retrying with system pod"
          pod install --repo-update

      - name: Upload CocoaPods artifacts
        if: steps.install_pods.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ios-pods-device-archive
          path: |
            ios/Pods
            ios/monGARS.xcworkspace
            ios/Podfile.lock
          if-no-files-found: error

      - name: Clean caches (global + repo-local) and set fresh module cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Caches/com.apple.dt.Xcode
          rm -rf build/DerivedData
          rm -rf build/DerivedData/ModuleCache.noindex
          rm -rf build/DerivedData/Build/Intermediates.noindex/ArchiveIntermediates
          rm -rf build/DerivedData/Build/Intermediates.noindex/PrecompiledHeaders
          MODULE_CACHE_DIR="$(mktemp -d)"
          echo "MODULE_CACHE_DIR=${MODULE_CACHE_DIR}" >> $GITHUB_ENV
          echo "CLANG_MODULE_CACHE_PATH=${MODULE_CACHE_DIR}" >> $GITHUB_ENV

      - name: Build — Generic iOS Device (Archive)
        env:
          RCT_NEW_ARCH_ENABLED: "1"
          MODULE_CACHE_DIR: ${{ env.MODULE_CACHE_DIR }}
          CLANG_MODULE_CACHE_PATH: ${{ env.CLANG_MODULE_CACHE_PATH }}
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$RESULT_BUNDLE_DEV")"
          LINK_MAP_DIR="${RUNNER_TEMP:-/tmp}"
          LINK_MAP_PATH="${LINK_MAP_DIR}/link-map-device-archive-$(date +%s)-\$(TARGET_NAME)-\$(CURRENT_ARCH).map"
          EXTRA_OTHER_LDFLAGS="-v -Xlinker -map -Xlinker ${LINK_MAP_PATH}"
          BASE_OTHER_LDFLAGS="${OTHER_LDFLAGS:-}"
          if [[ "${BASE_OTHER_LDFLAGS}" != *"\$(inherited)"* ]]; then
            if [ -n "${BASE_OTHER_LDFLAGS}" ]; then
              BASE_OTHER_LDFLAGS="\$(inherited) ${BASE_OTHER_LDFLAGS}"
            else
              BASE_OTHER_LDFLAGS="\$(inherited)"
            fi
          fi
          OTHER_LDFLAGS="${BASE_OTHER_LDFLAGS} ${EXTRA_OTHER_LDFLAGS}"
          xcodebuild \
            -workspace "${WORKSPACE}" \
            -scheme "${SCHEME}" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -derivedDataPath "${DERIVED_DATA}" \
            -resultBundlePath "${RESULT_BUNDLE_DEV}" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            OTHER_LDFLAGS="${OTHER_LDFLAGS}" \
            clean build archive | xcpretty && exit ${PIPESTATUS[0]}

      - name: Summarize device xcresult
        if: ${{ always() }}
        run: |
          set -euo pipefail
          mkdir -p build
          if [ -d "${RESULT_BUNDLE_DEV}" ]; then
            if ! xcresultparser -o md "${RESULT_BUNDLE_DEV}" > build/ResultBundle_device.md; then
              echo "::warning title=xcresultparser failed::Unable to summarize ${RESULT_BUNDLE_DEV}."
              rm -f build/ResultBundle_device.md || true
            fi
          else
            echo "::warning title=xcresult missing::${RESULT_BUNDLE_DEV} not found; skipping summary."
          fi

      - name: Remove temporary module cache
        if: env.MODULE_CACHE_DIR != ''
        run: |
          if [ -d "${MODULE_CACHE_DIR}" ]; then
            rm -rf "${MODULE_CACHE_DIR}"
          fi
        env:
          MODULE_CACHE_DIR: ${{ env.MODULE_CACHE_DIR }}

      - name: Upload Device Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-device-archive
          path: |
            build/DerivedData/Build/Products/Release-iphoneos/*.app
            build/DerivedData/Build/Intermediates.noindex/ArchiveIntermediates/${{ env.SCHEME }}/BuildProductsPath/Release-iphoneos/*.app
            ${{ env.RESULT_BUNDLE_DEV }}
            build/ResultBundle_device.md
          if-no-files-found: warn
