name: iOS (unsigned) — Archive + Unsigned IPA

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ios-unsigned-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  RUBY_VERSION: "3.2"
  XCODE_VERSION: "16.4"
  SCHEME: "monGARS"
  WORKSPACE: "ios/monGARS.xcworkspace"
  DERIVED_DATA: "${{ github.workspace }}/build/DerivedData"
  ARCHIVE_PATH: "${{ github.workspace }}/build/Archives/monGARS.xcarchive"
  RESULT_BUNDLE_DEV: "${{ github.workspace }}/build/ResultBundle_device.xcresult"
  IPA_OUT: "${{ github.workspace }}/build/ipa-unsigned/monGARS-unsigned.ipa"

jobs:
  device-archive:
    name: Device archive + unsigned IPA
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v5

      - name: Select Xcode ${{ env.XCODE_VERSION }}
        run: |
          sudo xcode-select -s "/Applications/Xcode_${XCODE_VERSION}.app"
          xcodebuild -version

      - uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install JS deps
        run: npm ci

      - name: Install xcresultparser
        run: |
          set -euo pipefail
          brew tap a7ex/homebrew-formulae
          brew install xcresultparser

      - name: Verify RN/Hermes versions
        run: python3 scripts/verify-ios-rn-versions.py

      - name: Clean caches (global + repo-local) and set fresh module cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Caches/com.apple.dt.Xcode
          rm -rf build/DerivedData
          rm -rf build/DerivedData/ModuleCache.noindex
          rm -rf build/DerivedData/Build/Intermediates.noindex/ArchiveIntermediates
          rm -rf build/DerivedData/Build/Intermediates.noindex/PrecompiledHeaders
          MODULE_CACHE_DIR="$(mktemp -d)"
          echo "CLANG_MODULE_CACHE_PATH=${MODULE_CACHE_DIR}" >> $GITHUB_ENV

      - name: Force fresh Pods (ensures Podfile post_install runs)
        run: |
          set -euo pipefail
          rm -rf ios/Pods ios/Podfile.lock
          cd ios
          bundle install || true
          bundle exec pod repo update
          bundle exec pod install --repo-update --clean-install

      - name: React Native Codegen (generate specs)
        run: |
          set -euo pipefail
          npx react-native --version || true
          npx react-native codegen || true

      - name: Validate Codegen headers exist (FBReactNativeSpec & LLMSpec)
        run: |
          set -euo pipefail
          FOUND=0
          for H in \
            "ios/Pods/Headers/Public/FBReactNativeSpec/FBReactNativeSpec/FBReactNativeSpec.h" \
            "ios/Pods/Headers/Public/FBReactNativeSpec/FBReactNativeSpec.h" \
            "ios/Pods/Headers/Public/FBReactNativeSpec/AppSpec.h" \
            "ios/Pods/Headers/Public/AppSpec/LLMSpec.h" \
            "ios/Pods/Headers/Public/AppSpecs/LLMSpec.h" \
            "ios/Pods/Headers/Public/LLMSpec.h" \
          ; do
            if [ -f "$H" ]; then echo "found: $H"; FOUND=1; fi
          done
          if [ $FOUND -eq 0 ]; then
            echo "::error::No codegen spec headers found. Did 'pod install' run and RN codegen execute?"
            exit 64
          fi

      - name: Purge RCTDeprecation module caches (defensive)
        run: |
          bash ios/scripts/purge-rctdeprecation-caches.sh || true

      - name: Ensure legacy RCTDeprecation.modulemap exists
        run: |
          bash ios/scripts/ensure-rctdeprecation-legacy.sh

      - name: Debug — list schemes & settings
        run: |
          mkdir -p build
          xcodebuild -list -workspace "${WORKSPACE}" > build/xcodebuild-list.txt || true
          xcodebuild -showBuildSettings -workspace "${WORKSPACE}" -scheme "${SCHEME}" > build/build-settings.txt || true

      - name: Install xcpretty
        run: gem install xcpretty

      - name: Archive — Generic iOS Device (unsigned)
        env:
          RCT_NEW_ARCH_ENABLED: "1"
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$RESULT_BUNDLE_DEV")" "$(dirname "$ARCHIVE_PATH")" "$DERIVED_DATA"
          xcodebuild \
            -workspace "${WORKSPACE}" \
            -scheme "${SCHEME}" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -derivedDataPath "${DERIVED_DATA}" \
            -archivePath "${ARCHIVE_PATH}" \
            -resultBundlePath "${RESULT_BUNDLE_DEV}" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            clean archive | xcpretty && exit ${PIPESTATUS[0]}

      - name: Summarize xcresult bundle
        if: ${{ always() }}
        run: |
          set -euo pipefail
          mkdir -p build
          if [ -d "${RESULT_BUNDLE_DEV}" ]; then
            if ! xcresultparser -o md "${RESULT_BUNDLE_DEV}" > build/ResultBundle_device.md; then
              echo "::warning title=xcresultparser failed::Unable to summarize ${RESULT_BUNDLE_DEV}."
              rm -f build/ResultBundle_device.md || true
            fi
          else
            echo "::warning title=xcresult missing::${RESULT_BUNDLE_DEV} not found; skipping summary."
          fi

      - name: Package Unsigned IPA (zip Payload)
        run: |
          APP_PATH="$(/usr/bin/find "${DERIVED_DATA}/Build/Products/Release-iphoneos" -maxdepth 1 -name '*.app' -print -quit)"
          if [ -z "$APP_PATH" ]; then
            echo "::error::Could not find built .app under ${DERIVED_DATA}/Build/Products/Release-iphoneos"
            exit 1
          fi
          mkdir -p "$(dirname "$IPA_OUT")" Payload
          cp -R "$APP_PATH" "Payload/"
          # Preserve bundle attributes/resource forks
          ditto -c -k --sequesterRsrc --keepParent "Payload" "$IPA_OUT"
          rm -rf Payload
          echo "Created unsigned IPA at: $IPA_OUT"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-device-unsigned
          path: |
            ${{ env.ARCHIVE_PATH }}
            ${{ env.IPA_OUT }}
            ${{ env.RESULT_BUNDLE_DEV }}
            build/ResultBundle_device.md
            build/xcodebuild-list.txt
            build/build-settings.txt
          if-no-files-found: error
# Notes:
# - This workflow produces an unsigned IPA suitable for re-signing later.
# - To export a signed IPA, use `xcodebuild -exportArchive` with a valid exportOptionsPlist
#   and remove CODE_SIGNING_* disables from the archive step.
