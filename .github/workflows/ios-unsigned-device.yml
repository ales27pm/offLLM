name: iOS unsigned device build

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  XCODE_VERSION: "16.4"

jobs:
  archive-ipa:
    name: Archive (device) & make unsigned IPA
    runs-on: macos-15
    env:
      SCHEME: monGARS
      DERIVED_DATA: ${{ github.workspace }}/build/DerivedData
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - uses: actions/setup-node@cd2651c46231bc0d6f48d6b34433b845331235fe
        with:
          node-version: 20
          cache: npm

      - name: Set up Ruby (3.2) with bundler cache
        uses: ruby/setup-ruby@44511735964dcb71245e7e55f72539531f7bc0eb
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Cache CocoaPods
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: |
            ~/.cocoapods
            ios/Pods
          key: ${{ runner.os }}-pods-xcode-${{ env.XCODE_VERSION }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-xcode-${{ env.XCODE_VERSION }}-
            ${{ runner.os }}-pods-

      - name: NPM install (root)
        run: npm ci

      - name: Install XcodeGen (if needed)
        run: |
          if ! command -v xcodegen >/dev/null 2>&1; then
            brew update
            brew install xcodegen
          fi

      - name: Generate Xcode project (XcodeGen)
        working-directory: ios
        run: xcodegen generate

      - name: Run codegen
        run: npm run codegen

      - name: Bundle install (ios/)
        working-directory: ios
        run: |
          bundle config set path 'vendor/bundle'
          bundle install --jobs 4

      - name: CocoaPods install
        working-directory: ios
        env:
          COCOAPODS_DISABLE_STATS: "true"
        run: bundle exec pod install

      - name: Detect Xcode container
        run: |
          set -euo pipefail
          CONTAINER="$(/usr/bin/find ios -maxdepth 1 -name '*.xcworkspace' -print -quit)"
          TYPE="workspace"
          if [ -z "$CONTAINER" ]; then
            CONTAINER="$(/usr/bin/find ios -maxdepth 1 -name '*.xcodeproj' -print -quit)"
            TYPE="project"
          fi
          if [ -z "$CONTAINER" ]; then
            echo "::error title=No Xcode container::No ios/*.xcworkspace or ios/*.xcodeproj found"
            exit 1
          fi
          echo "XCODE_CONTAINER=$CONTAINER" >> "$GITHUB_ENV"
          echo "XCODE_CONTAINER_TYPE=$TYPE" >> "$GITHUB_ENV"

      - name: iOS Doctor (workspace must exist)
        if: env.XCODE_CONTAINER_TYPE == 'workspace'
        run: |
          chmod +x scripts/ios_doctor.sh || true
          ./scripts/ios_doctor.sh

      - name: Resolve SwiftPM deps
        run: |
          set -euxo pipefail
          RB="$DERIVED_DATA/ResultBundle.xcresult"
          rm -rf "$RB"
          xcodebuild -resolvePackageDependencies \
            -${XCODE_CONTAINER_TYPE} "$XCODE_CONTAINER" \
            -scheme "$SCHEME" \
            -clonedSourcePackagesDirPath "$DERIVED_DATA/SourcePackages"

      - name: Check for iOS Device SDK
        id: sdk
        run: |
          if xcodebuild -showsdks | grep -q "iphoneos"; then
            echo "present=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Archive (device)
        if: steps.sdk.outputs.present == 'true'
        id: archive
        run: |
          set -euxo pipefail
          ARCHIVE_PATH="${DERIVED_DATA}/Archive.xcarchive"
          RB_ARCHIVE="${DERIVED_DATA}/ResultBundle_archive.xcresult"
          rm -rf "$ARCHIVE_PATH" "$RB_ARCHIVE"
          # Run archive, but don’t fail the job purely on warnings/unsigned exit (65).
          # We’ll still surface real errors from the xcresult in a later step.
          if ! xcodebuild archive \
               -${XCODE_CONTAINER_TYPE} "$XCODE_CONTAINER" \
               -scheme "$SCHEME" \
               -destination "generic/platform=iOS" \
               -configuration Release \
               -derivedDataPath "$DERIVED_DATA" \
               -resultBundlePath "$RB_ARCHIVE" \
               CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO \
               -archivePath "$ARCHIVE_PATH"; then
            echo "::warning::xcodebuild archive exited non-zero (often 65 on CI due to warnings/unsigned). Proceeding to package artifacts."
          fi

          # Soft validation: if Products/Applications has no .app, emit a warning so it’s obvious.
          APP_DIR="${ARCHIVE_PATH}/Products/Applications"
          if [ ! -d "$APP_DIR" ] || ! /usr/bin/find "$APP_DIR" -maxdepth 1 -name '*.app' -print -quit >/dev/null; then
            echo "::warning::Archive completed but no .app found in ${APP_DIR} (check xcresult issues in next step)."
          fi

      - name: Fallback note if device platform is missing
        if: steps.sdk.outputs.present != 'true'
        run: |
          echo "::warning title=Device platform unavailable::This runner image lacks the iOS Device platform. See uploaded xcresult for details."

      - name: Package unsigned IPA from archive (robust)
        if: steps.archive.conclusion == 'success'
        run: |
          ./scripts/package_ipa.sh "$DERIVED_DATA/Archive.xcarchive" "build" "monGARS"

      - name: Extract errors from xcresult (archive)
        if: always()
        run: |
          set -euo pipefail
          mkdir -p build
          RB="${DERIVED_DATA}/ResultBundle_archive.xcresult"
          if [ -d "$RB" ]; then
            # Xcode 16+: legacy 'get object' requires --legacy; keep legacy JSON for existing parsing.
            xcrun xcresulttool get object --legacy --format json --path "$RB" > "build/ResultBundle_archive.json" || true
            grep -n '"issue' "build/ResultBundle_archive.json" | head -n 200 || true
          fi

      - name: Upload archive artifacts
        if: always()
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: ios-archive-and-ipa
          path: |
            build/*.ipa
            build/*.app.zip
            ${{ env.DERIVED_DATA }}/Archive.xcarchive
            ${{ env.DERIVED_DATA }}/ResultBundle_archive.xcresult
            build/ResultBundle_archive.json
          if-no-files-found: warn
          compression-level: 6
