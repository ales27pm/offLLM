name: CI

on:
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  js-ci:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: --max_old_space_size=4096

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: npm

      - name: Install deps from lockfile
        run: npm ci

      - name: Generate Turbo headers (no-op if none)
        run: |
          set -euo pipefail
          export CODEGEN_OUTPUT_DIR="${CODEGEN_OUTPUT_DIR:-$(pwd)/ios/build/generated}"
          export TEMPLATE_SRC_DIR="${TEMPLATE_SRC_DIR:-$(pwd)/src/specs}"
          npm run codegen

      - name: Format check
        run: npm run format:check

      - name: Unit tests
        run: npm run test:ci

      - name: Run ESLint (no warnings allowed)
        run: npm run lint:ci

  ios-ci:
    runs-on: macos-14
    env:
      NODE_OPTIONS: --max_old_space_size=4096

    steps:
      - uses: actions/checkout@v4

      # --- Xcode selection & guard ---
      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Verify Xcode is >= 16.1
        run: |
          set -euo pipefail
          VER=$(xcodebuild -version | awk '/Xcode/ {print $2}')
          echo "Selected Xcode: $VER"
          case "$VER" in
            16.*) echo "✅ OK";;
            *) echo "❌ Wrong Xcode version, requires 16.x"; exit 1;;
          esac

      # --- Node & JS deps ---
      - name: Setup Node (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: npm

      - name: Install JS deps from lockfile
        run: npm ci

      # --- Ruby / Bundler scoped to ios/Gemfile ---
      - name: Setup Ruby (Bundler cache)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
        env:
          BUNDLE_GEMFILE: ios/Gemfile

      - name: Update CocoaPods repo (best-effort)
        run: pod repo update || true

      - name: Pod install
        run: |
          set -euo pipefail
          cd ios
          bundle exec pod install --repo-update

      # --- Silence “will run every build” warnings & scrub Hermes phases ---
      - name: Harden script phases (outputs + dependency analysis) & scrub Hermes
        run: |
          set -euo pipefail
          cd ios
          ruby - <<'RUBY'
            require 'xcodeproj'

            def harden(path)
              return unless File.exist?(path)
              proj = Xcodeproj::Project.open(path)
              proj.targets.each do |t|
                t.shell_script_build_phases.each do |p|
                  # Add a harmless, derived output to avoid "will run every build" warnings
                  if (p.output_paths.nil? || p.output_paths.empty?) && (p.files_references.nil? || p.files_references.empty?)
                    safe_name = (p.name || "Phase").gsub(/\W/, '_')
                    p.output_paths = ["$(DERIVED_FILE_DIR)/#{safe_name}.touch"]
                  end
                  # If marked “Always run”, prefer outputs-driven execution
                  if p.respond_to?(:always_out_of_date) && p.always_out_of_date == '1'
                    p.always_out_of_date = '0'
                  end
                end

                # Remove Hermes "Replace Hermes" phases if any survived pod scripts
                t.shell_script_build_phases
                  .select { |p| (p.name || '') =~ /\[Hermes\]\s*Replace Hermes/i }
                  .each { |p| t.build_phases.delete(p) }
              end
              proj.save
            end

            harden('Pods/Pods.xcodeproj')
            harden('MyOfflineLLMApp.xcodeproj')
          RUBY

          # Assert Hermes phase is gone
          if grep -Riq --include=project.pbxproj "Replace Hermes" Pods MyOfflineLLMApp.xcodeproj; then
            echo "::error::Hermes 'Replace Hermes' phase still present after hardening"
            exit 1
          fi

      # --- Build (Debug simulator) with stable destination & logs to build/ ---
      - name: Clean & Build (Debug, Simulator)
        run: |
          set -euo pipefail
          mkdir -p build
          cd ios
          xcodebuild clean \
            -workspace MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Debug

          xcodebuild \
            -workspace MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.2' \
            build | tee ../build/xcodebuild.log

      # --- Generate diagnosis reports (Codex) ---
      - name: Generate CI diagnosis reports
        run: |
          set -euo pipefail
          node ./scripts/codex/index.mjs analyze \
            --log build/xcodebuild.log \
            --xcresult build/MyOfflineLLMApp.xcresult \
            --out reports

      # --- Upload artifacts ---
      - name: Upload build logs & result bundle
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-outputs
          path: |
            build/xcodebuild.log
            build/MyOfflineLLMApp.xcresult
          if-no-files-found: warn
          compression-level: 6

      - name: Upload diagnosis reports (REPORT.md + agent summary)
        uses: actions/upload-artifact@v4
        with:
          name: ios-diagnosis-reports
          path: |
            reports/**
          if-no-files-found: warn
          compression-level: 6

  ios-ipa:
    runs-on: macos-14
    env:
      NODE_OPTIONS: --max_old_space_size=4096

    steps:
      - uses: actions/checkout@v4

      # --- Xcode selection for device build (iphoneos) ---
      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Verify Xcode is >= 16.1
        run: |
          set -euo pipefail
          VER=$(xcodebuild -version | awk '/Xcode/ {print $2}')
          echo "Selected Xcode: $VER"
          case "$VER" in
            16.*) echo "✅ OK";;
            *) echo "❌ Wrong Xcode version, requires 16.x"; exit 1;;
          esac

      # --- Node & JS deps ---
      - name: Setup Node (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: npm

      - name: Install JS deps from lockfile
        run: npm ci

      # --- Ruby / Bundler scoped to ios/Gemfile ---
      - name: Setup Ruby (Bundler cache)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
        env:
          BUNDLE_GEMFILE: ios/Gemfile

      - name: Update CocoaPods repo (best-effort)
        run: pod repo update || true

      # Optional: Generate project with XcodeGen (safe if not used)
      - name: Install XcodeGen
        run: brew install xcodegen || true

      - name: Generate Xcode project (optional)
        run: |
          set -euo pipefail
          if [ -f ios/project.yml ]; then
            (cd ios && xcodegen generate)
          fi

      - name: Pod install
        run: |
          set -euo pipefail
          cd ios
          bundle exec pod install --repo-update

      # --- Archive for iphoneos with signing disabled ---
      - name: Build unsigned archive (Release, iphoneos)
        run: |
          set -euo pipefail
          mkdir -p build
          cd ios

          xcodebuild clean \
            -workspace MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Release

          ARCHIVE_PATH="../build/MyOfflineLLMApp.xcarchive"

          xcodebuild archive \
            -workspace MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Release \
            -sdk iphoneos \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            PROVISIONING_PROFILE_SPECIFIER="" \
            DEVELOPMENT_TEAM="" \
            SKIP_INSTALL=NO \
            BUILD_LIBRARY_FOR_DISTRIBUTION=NO | tee ../build/xcodebuild_ipa.log

      # --- Package IPA from archive (unsigned) ---
      - name: Package unsigned IPA
        run: |
          set -euo pipefail
          cd build
          APP_PATH="MyOfflineLLMApp.xcarchive/Products/Applications/MyOfflineLLMApp.app"
          if [ ! -d "$APP_PATH" ]; then
            echo "::error::App not found at $APP_PATH"
            exit 1
          fi

          # Create Payload and zip to .ipa
          rm -rf Payload
          mkdir -p Payload
          cp -R "$APP_PATH" Payload/
          /usr/bin/zip -qry offLLM-unsigned.ipa Payload

          # Optional: also provide zipped .app for convenience
          /usr/bin/zip -qry MyOfflineLLMApp.app.zip "$APP_PATH"

      # --- Upload unsigned IPA & logs ---
      - name: Upload unsigned IPA & logs
        uses: actions/upload-artifact@v4
        with:
          name: ios-unsigned-ipa
          path: |
            build/offLLM-unsigned.ipa
            build/MyOfflineLLMApp.app.zip
            build/xcodebuild_ipa.log
            build/MyOfflineLLMApp.xcarchive
          if-no-files-found: error
          compression-level: 6
