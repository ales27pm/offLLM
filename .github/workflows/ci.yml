name: CI

on:
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  js-ci:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: --max_old_space_size=4096

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: npm

      - name: Install deps from lockfile
        run: npm ci

      - name: Generate Turbo headers (no-op if none)
        run: |
          set -euo pipefail
          export CODEGEN_OUTPUT_DIR="${CODEGEN_OUTPUT_DIR:-$(pwd)/ios/build/generated}"
          export TEMPLATE_SRC_DIR="${TEMPLATE_SRC_DIR:-$(pwd)/src/specs}"
          npm run codegen

      - name: Format check
        run: npm run format:check

      - name: Unit tests
        run: npm run test:ci

      - name: Run ESLint (no warnings allowed)
        run: npm run lint:ci

  ios-ci:
    runs-on: macos-14
    env:
      NODE_OPTIONS: --max_old_space_size=4096

    steps:
      - uses: actions/checkout@v4

      # Pin Xcode explicitly (React Native 0.81 requires >= 16.1)
      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Verify Xcode is >= 16.1
        run: |
          set -euo pipefail
          VER=$(xcodebuild -version | awk '/Xcode/ {print $2}')
          echo "Selected Xcode: $VER"
          case "$VER" in
            16.*) echo "✅ OK";;
            *) echo "❌ Wrong Xcode version, requires 16.x"; exit 1;;
          esac

      - name: Setup Node (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: npm

      - name: Install JS deps from lockfile
        run: npm ci

      # Ruby & Bundler for CocoaPods (caches Gems in ios/vendor/bundle)
      - name: Setup Ruby & Bundler (for CocoaPods)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ios

      # xcodegen is needed to create the .xcodeproj before 'pod install'
      - name: Install xcodegen
        run: brew install xcodegen

      - name: Generate Xcode project (xcodegen)
        working-directory: ios
        run: xcodegen generate

      - name: Print available SDKs & Simulators (diagnostics)
        run: |
          xcodebuild -showsdks
          xcrun simctl list devices available

      - name: Update CocoaPods repos
        run: pod repo update

      - name: Install CocoaPods (via Bundler)
        working-directory: ios
        run: |
          set -euo pipefail
          bundle exec pod install --repo-update

      # Optional: set debug optimization to -Onone
      - name: Set Swift Optimization Level for Debug
        working-directory: ios
        run: |
          set -euo pipefail
          mkdir -p ../build
          xcodebuild \
            -workspace MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Debug \
            -destination "generic/platform=iOS Simulator" \
            SWIFT_OPTIMIZATION_LEVEL=-Onone \
            | tee ../build/xcodebuild-opt.log

      - name: Clean and Build (Simulator)
        working-directory: ios
        run: |
          set -euo pipefail

          # Ensure repo-level build dir exists for logs/xcresult (parent of ios/)
          mkdir -p ../build

          # Prefer a generic destination for BUILDs (avoids device name drift)
          DEST="generic/platform=iOS Simulator"

          echo "Using destination: $DEST"

          xcodebuild \
            -workspace MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Debug \
            -destination "$DEST" \
            clean build \
            | tee ../build/xcodebuild.log

          # Copy latest xcresult (if produced)
          RESULT=$(ls -1t ~/Library/Developer/Xcode/DerivedData/*/Logs/Build/*.xcresult 2>/dev/null | head -n1 || true)
          if [ -n "$RESULT" ]; then
            cp -R "$RESULT" ../build/MyOfflineLLMApp.xcresult
          else
            echo "No xcresult bundle found (this can be normal for some configurations)."
          fi

      # (Optional) upload logs & xcresult for debugging
      - name: Upload iOS build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-artifacts
          path: |
            build/xcodebuild*.log
            build/MyOfflineLLMApp.xcresult
          if-no-files-found: warn
