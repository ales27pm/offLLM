name: CI

on:
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  js-ci:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: --max_old_space_size=4096

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: npm

      - name: Install deps from lockfile
        run: npm ci

      - name: Generate Turbo headers (no-op if none)
        run: |
          set -euo pipefail
          export CODEGEN_OUTPUT_DIR="${CODEGEN_OUTPUT_DIR:-$(pwd)/ios/build/generated}"
          export TEMPLATE_SRC_DIR="${TEMPLATE_SRC_DIR:-$(pwd)/src/specs}"
          npm run codegen

      - name: Format check
        run: npm run format:check

      - name: Unit tests
        run: npm run test:ci

      - name: Run ESLint (no warnings allowed)
        run: npm run lint:ci

  ios-ci:
    runs-on: macos-14
    env:
      NODE_OPTIONS: --max_old_space_size=4096

    steps:
      - uses: actions/checkout@v4

      # Explicitly pick Xcode 16.2 for RN 0.81
      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Verify Xcode is >= 16.1
        run: |
          set -euo pipefail
          VER=$(xcodebuild -version | awk '/Xcode/ {print $2}')
          echo "Selected Xcode: $VER"
          case "$VER" in
            16.*) echo "✅ OK";;
            *) echo "❌ Wrong Xcode version, requires 16.x"; exit 1;;
          esac

      - name: Setup Node (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: npm

      - name: Install JS deps from lockfile
        run: npm ci

      # Ruby & Bundler for CocoaPods
      - name: Setup Ruby (Bundler cache)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ios

      # XcodeGen is required to create the .xcodeproj before pod install
      - name: Install XcodeGen
        run: brew install xcodegen

      - name: Generate Xcode project
        working-directory: ios
        run: |
          set -euo pipefail
          test -f project.yml || { echo "::error::ios/project.yml missing"; exit 1; }
          xcodegen generate
          ls -la
          test -d MyOfflineLLMApp.xcodeproj || { echo "::error::.xcodeproj not generated"; exit 1; }

      - name: Update CocoaPods repos
        run: pod repo update

      - name: Install CocoaPods (bundle exec)
        working-directory: ios
        env:
          # Helps RN 0.81 Podfile version checks & SDK resolution
          MD_APPLE_SDK_ROOT: /Applications/Xcode_16.2.app
          # Optional: if you applied the Podfile tweak to accept PROJECT_PATH
          PROJECT_PATH: MyOfflineLLMApp.xcodeproj
        run: |
          bundle install
          bundle exec pod install --repo-update
          ls -la

      # (Optional) Scrub any lingering Hermes "Replace Hermes" phases if your repo includes the helper
      - name: Scrub Hermes phases (optional)
        if: hashFiles('scripts/strip_hermes_phase.rb') != ''
        working-directory: ios
        run: |
          set -euo pipefail
          bundle exec ruby ../scripts/strip_hermes_phase.rb Pods/Pods.xcodeproj MyOfflineLLMApp.xcodeproj
          if grep -Riq --include=project.pbxproj "Replace Hermes" Pods MyOfflineLLMApp.xcodeproj; then
            echo "::error::Hermes phases persist after scrub"
            exit 1
          fi

      - name: Clean and Build (Simulator)
        working-directory: ios
        run: |
          set -euo pipefail
          # Use a concrete destination instead of hard-coding SDK string
          DEST="platform=iOS Simulator,name=iPhone 15"
          xcodebuild -workspace MyOfflineLLMApp.xcworkspace \
                     -scheme MyOfflineLLMApp \
                     -configuration Debug \
                     -destination "$DEST" \
                     clean build \
                     | tee ../build/xcodebuild.log
          # Try to copy the latest xcresult for diagnostics
          RESULT=$(ls -1t ~/Library/Developer/Xcode/DerivedData/*/Logs/Build/*.xcresult 2>/dev/null | head -n1 || true)
          if [ -n "$RESULT" ]; then
            mkdir -p ../build && cp -R "$RESULT" ../build/MyOfflineLLMApp.xcresult
          fi

      - name: Upload build logs & xcresult
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-unsigned-reports
          path: |
            build/xcodebuild.log
            build/MyOfflineLLMApp.xcresult
          if-no-files-found: warn
