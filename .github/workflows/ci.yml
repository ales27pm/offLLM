name: CI

on:
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  js-ci:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: npm

      - name: Install deps from lockfile
        run: npm ci

      - name: Generate Turbo headers (no-op if none)
        run: |
          set -euo pipefail
          export CODEGEN_OUTPUT_DIR="${CODEGEN_OUTPUT_DIR:-$(pwd)/ios/build/generated}"
          export TEMPLATE_SRC_DIR="${TEMPLATE_SRC_DIR:-$(pwd)/src/specs}"
          npm run codegen

      - name: Format check
        run: npm run format:check

      - name: Unit tests
        run: npm run test:ci

      - name: Run ESLint (no warnings allowed)
        run: npm run lint:ci

  ios-ci:
    runs-on: macos-14
    env:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - uses: actions/checkout@v4

      # --- Xcode selection (RN 0.81 needs >= 16.1) ---
      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Verify Xcode is >= 16.1
        run: |
          set -euo pipefail
          VER="$(xcodebuild -version | awk '/Xcode/ {print $2}')"
          echo "Selected Xcode: $VER"
          case "$VER" in
            16.*) echo "âœ… Xcode OK";;
            *) echo "::error::Wrong Xcode version ($VER). Requires 16.x for RN 0.81"; exit 1;;
          esac

      # --- Node / JS deps (for any build-time scripts) ---
      - name: Setup Node (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: npm

      - name: Install JS deps
        run: npm ci

      # --- Ruby / CocoaPods toolchain ---
      - name: Setup Ruby (bundler cache in ios/)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ios

      # --- xcodegen to create .xcodeproj/.xcworkspace before pod install ---
      - name: Install xcodegen
        run: brew install xcodegen

      - name: Generate Xcode project
        working-directory: ios
        run: xcodegen generate

      # --- CocoaPods install ---
      - name: Pod repo update
        run: pod repo update

      - name: Install CocoaPods
        working-directory: ios
        env:
          MD_APPLE_SDK_ROOT: /Applications/Xcode_16.2.app
        run: |
          bundle install
          bundle exec pod install --repo-update

      # --- Post-pod hardening: scrub Hermes phases & fix deployment target >= 12.0 ---
      - name: Create hardening scripts
        run: |
          mkdir -p scripts/ci

          # strip_hermes_phase.rb
          cat > scripts/ci/strip_hermes_phase.rb <<'RUBY'
          require 'xcodeproj'
          projects = ['ios/Pods/Pods.xcodeproj', 'ios/MyOfflineLLMApp.xcodeproj']
          projects.each do |proj|
            next unless File.exist?(proj)
            project = Xcodeproj::Project.open(proj)
            project.targets.each do |t|
              t.shell_script_build_phases
               .select { |p| p.name =~ /\[Hermes\]\s*Replace Hermes/i }
               .each { |p| t.shell_script_build_phases.delete(p) }
            end
            project.save
          end
          RUBY

          # enforce_pods_deployment_target.rb
          cat > scripts/ci/enforce_pods_deployment_target.rb <<'RUBY'
          require 'xcodeproj'
          pods_proj = 'ios/Pods/Pods.xcodeproj'
          exit 0 unless File.exist?(pods_proj)
          project = Xcodeproj::Project.open(pods_proj)
          project.targets.each do |t|
            t.build_configurations.each do |cfg|
              val = (cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] || '0').to_f
              cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0' if val < 12.0
              cfg.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
            end
          end
          project.save
          RUBY

      - name: Apply hardening scripts
        run: |
          bundle exec ruby scripts/ci/strip_hermes_phase.rb
          bundle exec ruby scripts/ci/enforce_pods_deployment_target.rb
          # Assert no Hermes phases remain
          if grep -Riq --include=project.pbxproj "Replace Hermes" ios/Pods ios/MyOfflineLLMApp.xcodeproj; then
            echo "::error::Hermes 'Replace Hermes' phase still present after scrub"
            exit 1
          fi

      # --- Quick compile for feedback (Simulator Debug) ---
      - name: Build (Simulator Debug)
        working-directory: ios
        run: |
          set -euo pipefail
          mkdir -p ../build
          /usr/bin/xcrun xcodebuild \
            -workspace MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -sdk iphonesimulator \
            -configuration Debug \
            -destination "generic/platform=iOS Simulator" \
            clean build \
            | tee ../build/xcodebuild.log

          RESULT=$(
            ls -1t ~/Library/Developer/Xcode/DerivedData/*/Logs/Build/*.xcresult 2>/dev/null | head -n1 || true
          )
          if [ -n "$RESULT" ]; then
            cp -R "$RESULT" ../build/MyOfflineLLMApp.xcresult
          fi

      # --- Unsigned IPA build (Device Release) ---
      # Build for device with signing disabled, then package Payload/*.app -> .ipa
      - name: Build (Device Release, unsigned)
        working-directory: ios
        run: |
          set -euo pipefail
          mkdir -p ../build
          /usr/bin/xcrun xcodebuild \
            -workspace MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Release \
            -sdk iphoneos \
            -destination "generic/platform=iOS" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            clean build \
            | tee -a ../build/xcodebuild.log

          APP_PATH="$(/usr/bin/xcrun xcodebuild -workspace MyOfflineLLMApp.xcworkspace -scheme MyOfflineLLMApp -configuration Release -showBuildSettings | awk -F'= ' '/TARGET_BUILD_DIR/ {t=$2} /WRAPPER_NAME/ {w=$2} END{print t "/" w}')"
          if [ ! -d "$APP_PATH" ]; then
            echo "::error::Failed to locate built .app at $APP_PATH"
            exit 1
          fi

          # Package as unsigned IPA
          PKG_DIR="$(pwd)/../build/pkg"
          rm -rf "$PKG_DIR"
          mkdir -p "$PKG_DIR/Payload"
          cp -R "$APP_PATH" "$PKG_DIR/Payload/"
          (cd "$PKG_DIR" && /usr/bin/zip -yr ../MyOfflineLLMApp-unsigned.ipa Payload)

      # --- Codex analysis over logs + xcresult ---
      - name: Analyze build logs
        run: |
          node ./scripts/codex/index.mjs analyze \
            --log build/xcodebuild.log \
            --xcresult build/MyOfflineLLMApp.xcresult \
            --out reports

      # --- Upload artifacts for debugging & distribution ---
      - name: Upload iOS artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-unsigned-reports
          path: |
            reports/**
            build/xcodebuild.log
            build/MyOfflineLLMApp.xcresult
            build/MyOfflineLLMApp-unsigned.ipa
