name: CI

on:
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  js-ci:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: npm

      - name: Install deps from lockfile
        run: npm ci

      - name: Generate Turbo headers (no-op if none)
        run: |
          set -euo pipefail
          export CODEGEN_OUTPUT_DIR="${CODEGEN_OUTPUT_DIR:-$(pwd)/ios/build/generated}"
          export TEMPLATE_SRC_DIR="${TEMPLATE_SRC_DIR:-$(pwd)/src/specs}"
          npm run codegen || true

      # Prettier check that skips CI config files
      - name: Format check (exclude .github/**)
        run: |
          set -euo pipefail
          TMP_IGNORE=".prettierignore.ci"
          [ -f .prettierignore ] && cp .prettierignore "$TMP_IGNORE" || :
          printf "\n# Added by CI\n.github/**\n" >> "$TMP_IGNORE"
          npx prettier --check . --ignore-path "$TMP_IGNORE"

      - name: Unit tests
        run: npm run test:ci

      - name: Run ESLint (no warnings allowed)
        run: npm run lint:ci

  ios-ci:
    runs-on: macos-14
    env:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - uses: actions/checkout@v4

      # --- Xcode selection & guard ---
      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Verify Xcode is >= 16.1
        run: |
          set -euo pipefail
          VER=$(xcodebuild -version | awk '/Xcode/ {print $2}')
          echo "Selected Xcode: $VER"
          [[ "$VER" =~ ^16\. ]] || { echo "❌ Requires Xcode 16.x"; exit 1; }

      # --- Node & JS deps BEFORE pods ---
      - name: Setup Node (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: npm

      - name: Install JS deps from lockfile
        run: npm ci

      - name: Generate Turbo headers (no-op if none)
        run: |
          set -euo pipefail
          export CODEGEN_OUTPUT_DIR="${CODEGEN_OUTPUT_DIR:-$(pwd)/ios/build/generated}"
          export TEMPLATE_SRC_DIR="${TEMPLATE_SRC_DIR:-$(pwd)/src/specs}"
          npm run codegen || true

      # --- Ensure an .xcodeproj exists (harmless if not using XcodeGen) ---
      - name: Install XcodeGen
        run: brew install xcodegen || true

      - name: Generate Xcode project (if project.yml exists)
        run: |
          set -euo pipefail
          if [ -f ios/project.yml ]; then
            (cd ios && xcodegen generate)
          fi

      # --- Caches ---
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: pods-${{ runner.os }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: pods-${{ runner.os }}-

      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData/PackageCache
            ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
          key: spm-${{ runner.os }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: spm-${{ runner.os }}-

      - name: CocoaPods repo update (best-effort)
        run: pod repo update || true

      - name: Pod install
        run: |
          set -euo pipefail
          cd ios
          pod install --repo-update

      # --- Write tiny Ruby patch scripts (safer than long heredocs in YAML) ---
      - name: Write patch scripts
        run: |
          set -euo pipefail
          mkdir -p ios/.ci-scripts

          cat > ios/.ci-scripts/patch_pods_socketrocket_folly.rb <<'RUBY'
          require 'xcodeproj'
          proj = Xcodeproj::Project.open('Pods/Pods.xcodeproj')
          proj.targets.each do |t|
            next unless t.name.include?('SocketRocket') || t.name.include?('RCT-Folly')
            t.build_configurations.each do |cfg|
              bs = cfg.build_settings
              defs = Array(bs['GCC_PREPROCESSOR_DEFINITIONS']) + ['$(inherited)', 'OBJC_OLD_DISPATCH_PROTOTYPES=0']
              bs['GCC_PREPROCESSOR_DEFINITIONS'] = defs.uniq
              bs['CLANG_ENABLE_MODULES'] = 'YES'
              bs['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
            end
          end
          proj.save
          RUBY

          cat > ios/.ci-scripts/harden_and_libcpp.rb <<'RUBY'
          require 'xcodeproj'
          def tweak(project_path)
            return unless File.exist?(project_path)
            proj = Xcodeproj::Project.open(project_path)
            proj.targets.each do |t|
              t.shell_script_build_phases.each do |p|
                if (p.output_paths.nil? || p.output_paths.empty?) &&
                   (p.files_references.nil? || p.files_references.empty?)
                  safe = (p.name || 'Phase').gsub(/\W/, '_')
                  p.output_paths = ["$(DERIVED_FILE_DIR)/#{safe}.touch"]
                end
                p.always_out_of_date = '0' if p.respond_to?(:always_out_of_date)
              end
              t.shell_script_build_phases
                .select { |p| (p.name || '') =~ /\[Hermes\]\s*Replace Hermes/i }
                .each { |p| t.build_phases.delete(p) }
              t.build_configurations.each do |cfg|
                bs = cfg.build_settings
                bs['CLANG_CXX_LIBRARY'] = 'libc++'
                bs['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++20'
                bs['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
                sys = '$(SDKROOT)/usr/include $(SDKROOT)/usr/include/c++/v1'
                bs['SYSTEM_HEADER_SEARCH_PATHS'] = [sys, bs['SYSTEM_HEADER_SEARCH_PATHS']].compact.join(' ')
              end
            end
            proj.save
          end
          tweak('Pods/Pods.xcodeproj')
          tweak('MyOfflineLLMApp.xcodeproj')
          RUBY

      - name: Ensure xcodeproj gem & run patches
        run: |
          set -euo pipefail
          cd ios
          ruby -e "begin; require 'xcodeproj'; rescue LoadError; system('gem install xcodeproj -v \"~>1.27\" --no-document'); require 'xcodeproj'; end"
          ruby .ci-scripts/patch_pods_socketrocket_folly.rb
          ruby .ci-scripts/harden_and_libcpp.rb
          if grep -Riq --include=project.pbxproj "Replace Hermes" Pods MyOfflineLLMApp.xcodeproj; then
            echo "::error::Hermes 'Replace Hermes' phase still present after patch"
            exit 1
          fi

      # --- Create/boot a real simulator & build to its UDID ---
      - name: Prepare simulator (prefer iOS 18.2)
        id: sim
        run: |
          set -euo pipefail
          WANT_LABEL="iOS 18.2"

          get_runtime_id() {
            xcrun simctl list runtimes | awk -v want="$1" '
              /com\.apple\.CoreSimulator\.SimRuntime\.iOS-/ {
                if ($0 ~ want) {
                  match($0, /com\.apple\.CoreSimulator\.SimRuntime\.[A-Za-z0-9\.-]+/);
                  if (RSTART) { print substr($0,RSTART,RLENGTH); exit }
                }
              }'
          }

          RUNTIME_ID="$(get_runtime_id "$WANT_LABEL")"
          if [ -z "$RUNTIME_ID" ]; then
            echo "::warning::Preferred runtime '$WANT_LABEL' not found; using newest available iOS runtime."
            RUNTIME_ID="$(xcrun simctl list runtimes | awk '
              /com\.apple\.CoreSimulator\.SimRuntime\.iOS-/ {
                match($0, /com\.apple\.CoreSimulator\.SimRuntime\.[A-Za-z0-9\.-]+/);
                id = substr($0,RSTART,RLENGTH);
              }
              END { if (id != "") print id }')"
          fi

          if [ -z "$RUNTIME_ID" ]; then
            echo "::error::No iOS simulator runtime found on this runner."
            exit 1
          fi

          DEVICE_NAME="CI-iPhone-16-Pro"
          UDID="$(xcrun simctl list devices | awk -v n="$DEVICE_NAME" -F'[()]' '$0 ~ n {print $2; exit}')"
          if [ -z "${UDID:-}" ]; then
            UDID="$(xcrun simctl create "$DEVICE_NAME" "iPhone 16 Pro" "$RUNTIME_ID")"
          fi

          xcrun simctl bootstatus "$UDID" -b || xcrun simctl boot "$UDID"

          echo "udid=$UDID" >> "$GITHUB_OUTPUT"
          echo "destination=id=$UDID" >> "$GITHUB_OUTPUT"

      # --- Resilient build + detailed error extraction ---
      - name: Clean & Build (Debug, Simulator)
        id: buildsim
        run: |
          set -euo pipefail
          mkdir -p build
          cd ios

          xcodebuild clean \
            -workspace MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Debug

          DEST="id=${{ steps.sim.outputs.udid }}"

          set +e
          xcodebuild \
            -workspace MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination "$DEST" \
            -arch arm64 \
            -onlyActiveArchitecture YES \
            -skipPackagePluginValidation YES \
            -skipMacroValidation YES \
            GCC_TREAT_WARNINGS_AS_ERRORS=NO \
            OTHER_CFLAGS="-DOBJC_OLD_DISPATCH_PROTOTYPES=0" \
            -resultBundlePath ../build/MyOfflineLLMApp.xcresult \
            build | tee ../build/xcodebuild.log
          STATUS=$?
          echo "status=$STATUS" >> "$GITHUB_OUTPUT"
          exit $STATUS

      - name: Print first error from xcresult
        if: failure() && steps.buildsim.outputs.status != '0'
        run: |
          set -euo pipefail
          RB="build/MyOfflineLLMApp.xcresult"
          if [ -d "$RB" ]; then
            echo "Found result bundle at: $RB"
            xcrun xcresulttool get --format json --path "$RB" > build/xcresult.json
            node - <<'JS'
              const fs = require('fs');
              const j = JSON.parse(fs.readFileSync('build/xcresult.json','utf8'));
              const actions = j.actions?._values || [];
              for (const a of actions){
                const issues = a?.actionResult?.issues;
                const errs = issues?.errorSummaries?._values || [];
                if (errs.length){
                  const e = errs[0];
                  console.log('----- First build error from xcresult -----');
                  console.log(e?.message?._value || '(no message)');
                  if (e?.documentLocationInCreatingWorkspace?.url?._value){
                    console.log('at', e.documentLocationInCreatingWorkspace.url._value);
                  }
                  console.log('-------------------------------------------');
                  process.exit(0);
                }
              }
              console.log('No error summaries found in xcresult (check xcodebuild.log).');
            JS
          else
            echo "No .xcresult bundle found."
          fi

      - name: Upload build logs & result bundle
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-outputs
          path: |
            build/xcodebuild.log
            build/MyOfflineLLMApp.xcresult
          if-no-files-found: warn
          compression-level: 6

  ios-ipa:
    runs-on: macos-14
    needs: ios-ci
    env:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Verify Xcode is >= 16.1
        run: |
          set -euo pipefail
          VER=$(xcodebuild -version | awk '/Xcode/ {print $2}')
          echo "Selected Xcode: $VER"
          [[ "$VER" =~ ^16\. ]] || { echo "❌ Requires Xcode 16.x"; exit 1; }

      - name: Setup Node (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.4
          cache: npm

      - name: Install JS deps from lockfile
        run: npm ci

      - name: Generate Turbo headers (no-op if none)
        run: |
          set -euo pipefail
          export CODEGEN_OUTPUT_DIR="${CODEGEN_OUTPUT_DIR:-$(pwd)/ios/build/generated}"
          export TEMPLATE_SRC_DIR="${TEMPLATE_SRC_DIR:-$(pwd)/src/specs}"
          npm run codegen || true

      - name: Install XcodeGen
        run: brew install xcodegen || true

      - name: Generate Xcode project (if project.yml exists)
        run: |
          set -euo pipefail
          if [ -f ios/project.yml ]; then
            (cd ios && xcodegen generate)
          fi

      - name: CocoaPods repo update (best-effort)
        run: pod repo update || true

      - name: Pod install
        run: |
          set -euo pipefail
          cd ios
          pod install --repo-update

      - name: Build unsigned archive (Release, iphoneos)
        run: |
          set -euo pipefail
          mkdir -p build
          cd ios

          xcodebuild clean \
            -workspace MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Release

          ARCHIVE_PATH="../build/MyOfflineLLMApp.xcarchive"
          xcodebuild archive \
            -workspace MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Release \
            -sdk iphoneos \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            PROVISIONING_PROFILE_SPECIFIER="" \
            DEVELOPMENT_TEAM="" \
            SKIP_INSTALL=NO \
            BUILD_LIBRARY_FOR_DISTRIBUTION=NO \
            OTHER_CFLAGS="-DOBJC_OLD_DISPATCH_PROTOTYPES=0" \
            -resultBundlePath ../build/MyOfflineLLMApp_ipa.xcresult \
            | tee ../build/xcodebuild_ipa.log

      - name: Package unsigned IPA
        run: |
          set -euo pipefail
          cd build
          APP_PATH="MyOfflineLLMApp.xcarchive/Products/Applications/MyOfflineLLMApp.app"
          if [ ! -d "$APP_PATH" ]; then
            echo "::error::App not found at $APP_PATH"
            exit 1
          fi
          rm -rf Payload
          mkdir -p Payload
          cp -R "$APP_PATH" Payload/
          /usr/bin/zip -qry offLLM-unsigned.ipa Payload
          /usr/bin/zip -qry MyOfflineLLMApp.app.zip "$APP_PATH"

      - name: Upload unsigned IPA & logs
        uses: actions/upload-artifact@v4
        with:
          name: ios-unsigned-ipa
          path: |
            build/offLLM-unsigned.ipa
            build/MyOfflineLLMApp.app.zip
            build/xcodebuild_ipa.log
            build/MyOfflineLLMApp.xcarchive
            build/MyOfflineLLMApp_ipa.xcresult
          if-no-files-found: error
          compression-level: 6
