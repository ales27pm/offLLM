name: iOS Signed â€“ monGARS

on:
  workflow_dispatch:
    inputs:
      export_method:
        description: "Export method: ad-hoc | development | app-store"
        required: false
        default: "ad-hoc"
  push:
    branches: [main, master]

env:
  SCHEME: monGARS
  WORKING_DIR: ios
  DERIVED_DATA: build/DerivedData
  ARCHIVE_PATH: build/monGARS.xcarchive
  EXPORT_DIR: build/export
  RESULT_BUNDLE: build/DerivedData/ResultBundle_build.xcresult
  XCODE_PROJECT_NAME: monGARS.xcodeproj

jobs:
  signing-guard:
    runs-on: ubuntu-latest
    environment: offLLM
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - name: Check signing secrets
        id: check
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          MOBILEPROVISION_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          set -euo pipefail
          missing=()
          for name in P12_BASE64 MOBILEPROVISION_BASE64 TEAM_ID; do
            if [ -z "${!name:-}" ]; then
              missing+=("$name")
            fi
          done

          if [ "${#missing[@]}" -eq 0 ]; then
            echo "should-run=true" >> "$GITHUB_OUTPUT"
            echo "All signing secrets are configured."
          else
            printf '::warning ::Skipping signed iOS build because the following secrets are not configured: %s\n' "$(IFS=,; echo "${missing[*]}")"
            echo "should-run=false" >> "$GITHUB_OUTPUT"
          fi

  build-signed-ipa:
    needs: signing-guard
    if: ${{ needs.signing-guard.outputs.should-run == 'true' }}
    runs-on: macos-15
    environment: offLLM
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select latest Xcode 16 on macOS 15
        run: bash scripts/ci/select_xcode.sh 16

      - name: Verify required secrets
        run: |
          set -euo pipefail
          for name in P12_BASE64 MOBILEPROVISION_BASE64 TEAM_ID; do
            if [ -z "${!name:-}" ]; then echo "::error ::Missing secret: $name"; exit 1; fi
          done
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          MOBILEPROVISION_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          TEAM_ID: ${{ secrets.TEAM_ID }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Bun
        if: hashFiles('bun.lockb') != ''
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76

      - name: Install JS deps
        run: |
          if [ -f yarn.lock ]; then yarn install --frozen-lockfile; fi
          if [ -f pnpm-lock.yaml ]; then corepack enable && pnpm i --frozen-lockfile; fi
          if [ -f bun.lockb ]; then bun install --no-save; fi

      - name: Install Ruby & CocoaPods
        run: |
          ruby -v
          gem install bundler -N || true
          sudo gem install cocoapods -N
          pod --version

      - name: Generate Xcode project (XcodeGen)
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          if ! command -v xcodegen >/dev/null 2>&1; then brew install xcodegen; fi
          xcodegen generate
          test -d "${{ env.XCODE_PROJECT_NAME }}" || { echo "::error ::XcodeGen failed"; exit 1; }

      - name: Pod install
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          pod repo update
          pod install --verbose

      - name: (Optional) Pre-archive prep
        run: |
          bash scripts/ci/prep-ios-unsigned-archive.sh || true

      - name: Write signing files
        id: files
        working-directory: ${{ env.WORKING_DIR }}
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          MOBILEPROVISION_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
        run: |
          set -euo pipefail
          mkdir -p signing
          echo "$P12_BASE64" | base64 -d > signing/cert.p12
          echo "$MOBILEPROVISION_BASE64" | base64 -d > signing/profile.mobileprovision
          ls -la signing

      - name: Import signing into temp keychain
        id: signing
        working-directory: ${{ env.WORKING_DIR }}
        env:
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        run: |
          set -euo pipefail
          KEYCHAIN_NAME="build-signing.keychain-db"
          KEYCHAIN_PWD="$(uuidgen)"
          bash ../scripts/ci/import_signing.sh \
            signing/cert.p12 "${P12_PASSWORD:-}" signing/profile.mobileprovision \
            "$KEYCHAIN_NAME" "$KEYCHAIN_PWD"

      - name: Determine bundle id & export method
        id: meta
        env:
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
          INPUT_METHOD: ${{ github.event.inputs.export_method }}
          SECRET_METHOD: ${{ secrets.EXPORT_METHOD }}
        run: |
          set -euo pipefail
          BUNDLE_ID="${BUNDLE_ID:-com.offllm.monGARS}"
          METHOD="${INPUT_METHOD:-${SECRET_METHOD:-development}}"
          echo "bundle_id=$BUNDLE_ID" >> "$GITHUB_OUTPUT"
          echo "method=$METHOD" >> "$GITHUB_OUTPUT"
          echo "Using bundle id: $BUNDLE_ID, method: $METHOD"

      - name: Show codesigning identities
        run: |
          set -euo pipefail
          if [[ -n "${KEYCHAIN_PATH:-}" && -e "${KEYCHAIN_PATH}" ]]; then
            security find-identity -p codesigning -v "${KEYCHAIN_PATH}" || true
          else
            security find-identity -p codesigning -v || true
          fi

      - name: Generate ExportOptions.plist (robust; no /dev/stdin)
        working-directory: ${{ env.WORKING_DIR }}
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ steps.meta.outputs.bundle_id }}
          EXPORT_METHOD_IN: ${{ steps.meta.outputs.method }}
        run: |
          set -euo pipefail

          # Derive PROFILE_NAME from the actual provisioning profile if not exported
          if [[ -z "${PROFILE_NAME:-}" ]]; then
            TMP_PLIST=$(mktemp)
            security cms -D -i signing/profile.mobileprovision > "$TMP_PLIST"
            PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' "$TMP_PLIST")
            rm -f "$TMP_PLIST"
          fi

          # Determine available codesigning identities (support modern + legacy labels)
          IDS=""
          if [[ -n "${KEYCHAIN_PATH:-}" && -e "${KEYCHAIN_PATH}" ]]; then
            IDS=$(security find-identity -p codesigning -v "${KEYCHAIN_PATH}" 2>/dev/null | sed -n 's/.*"\(.*\)".*/\1/p' || true)
          else
            IDS=$(security find-identity -p codesigning -v 2>/dev/null | sed -n 's/.*"\(.*\)".*/\1/p' || true)
          fi

          HAVE_DISTRIBUTION=0
          if echo "$IDS" | grep -Eq '^(Apple|iOS|iPhone) Distribution(:|$)'; then HAVE_DISTRIBUTION=1; fi

          HAVE_DEVELOPMENT=0
          if echo "$IDS" | grep -Eq '^(Apple Development|iPhone Developer)(:|$)'; then HAVE_DEVELOPMENT=1; fi

          # Capture concrete label to hint ExportOptions correctly
          DEV_LABEL=""
          if echo "$IDS" | grep -Eq '^Apple Development(:|$)'; then
            DEV_LABEL="Apple Development"
          elif echo "$IDS" | grep -Eq '^iPhone Developer(:|$)'; then
            DEV_LABEL="iPhone Developer"
          fi

          DIST_LABEL=""
          if echo "$IDS" | grep -Eq '^Apple Distribution(:|$)'; then
            DIST_LABEL="Apple Distribution"
          elif echo "$IDS" | grep -Eq '^iPhone Distribution(:|$)'; then
            DIST_LABEL="iPhone Distribution"
          elif echo "$IDS" | grep -Eq '^iOS Distribution(:|$)'; then
            DIST_LABEL="iOS Distribution"
          fi

          METHOD="${EXPORT_METHOD_IN:-development}"
          # Xcode 16: "ad-hoc" -> "release-testing"
          if [[ "$METHOD" == "ad-hoc" ]]; then METHOD="release-testing"; fi

          # Guard rails on method vs identities
          if [[ "$METHOD" == "release-testing" || "$METHOD" == "app-store" ]]; then
            if [[ $HAVE_DISTRIBUTION -eq 0 ]]; then
              echo "::warning ::No Distribution identity; falling back to development export"
              METHOD="development"
            fi
          fi

          # If user asked for development but only a distribution identity exists, prefer release-testing
          if [[ "$METHOD" == "development" && $HAVE_DEVELOPMENT -eq 0 && $HAVE_DISTRIBUTION -eq 1 ]]; then
            echo "::warning ::No Development identity, but Distribution exists; switching to release-testing"
            METHOD="release-testing"
          fi

          if [[ "$METHOD" == "development" && $HAVE_DEVELOPMENT -eq 0 ]]; then
            echo "::error ::No Development identity found"
            exit 1
          fi

          if ! command -v plutil >/dev/null 2>&1; then
            echo "::error ::plutil command is required to build ExportOptions.plist" >&2
            exit 1
          fi

          rm -f ExportOptions.plist
          plutil -create xml1 ExportOptions.plist
          plutil -replace : -xml '<dict/>' ExportOptions.plist

          plutil -insert method -string "$METHOD" ExportOptions.plist
          plutil -insert signingStyle -string "manual" ExportOptions.plist

          if [[ -n "${TEAM_ID:-}" ]]; then
            plutil -insert teamID -string "$TEAM_ID" ExportOptions.plist
          fi

          plutil -insert provisioningProfiles -xml '<dict/>' ExportOptions.plist || true
          plutil -insert "provisioningProfiles.${BUNDLE_ID}" -string "$PROFILE_NAME" ExportOptions.plist

          cert_label=""
          if [[ "$METHOD" == "development" ]]; then
            cert_label="${DEV_LABEL:-}"
            if [[ -z "${cert_label// }" ]]; then
              cert_label="Apple Development"
            fi
          else
            cert_label="${DIST_LABEL:-}"
            if [[ -z "${cert_label// }" ]]; then
              cert_label="Apple Distribution"
            fi
          fi
          plutil -insert signingCertificate -string "$cert_label" ExportOptions.plist

          plutil -insert stripSwiftSymbols -bool true ExportOptions.plist
          plutil -insert compileBitcode -bool false ExportOptions.plist

          if [[ -x /usr/libexec/PlistBuddy ]]; then
            /usr/libexec/PlistBuddy -c "Print" ExportOptions.plist || plutil -p ExportOptions.plist
          else
            plutil -p ExportOptions.plist
          fi

      - name: Build & Archive (signed)
        working-directory: ${{ env.WORKING_DIR }}
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          KEYCHAIN_PATH: ${{ env.KEYCHAIN_PATH }}
          BUNDLE_ID: ${{ steps.meta.outputs.bundle_id }}
        run: |
          set -euo pipefail
          test -n "$TEAM_ID"
          # Prefer the workspace made by CocoaPods
          PROJECT_FLAG="-workspace monGARS.xcworkspace"
          mkdir -p "${DERIVED_DATA}"
          xcodebuild \
            $PROJECT_FLAG \
            -scheme "${SCHEME}" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "${ARCHIVE_PATH}" \
            -derivedDataPath "${DERIVED_DATA}" \
            -resultBundlePath "${RESULT_BUNDLE}" \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="${TEAM_ID}" \
            PRODUCT_BUNDLE_IDENTIFIER="${BUNDLE_ID}" \
            OTHER_CODE_SIGN_FLAGS="--keychain ${KEYCHAIN_PATH}" \
            clean archive | xcpretty && exit ${PIPESTATUS[0]}

      - name: Export signed IPA
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          set -euo pipefail
          rm -rf "${EXPORT_DIR}"
          bash ../scripts/ci/export_ipa.sh "${ARCHIVE_PATH}" "ExportOptions.plist" "${EXPORT_DIR}"

      - name: Upload IPA & logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: monGARS-signed-ipa
          path: |
            ios/build/export/*.ipa
            ios/ExportOptions.plist
            ios/build/DerivedData/ResultBundle_build.xcresult
          if-no-files-found: warn

      - name: Cleanup keychain
        if: always()
        run: |
          set -euo pipefail
          # variables exported by import_signing.sh in GITHUB_ENV
          if [[ -n "${ORIGINAL_DEFAULT_KEYCHAIN:-}" ]]; then
            security default-keychain -s "${ORIGINAL_DEFAULT_KEYCHAIN}" || true
          fi
          if [[ -n "${ORIGINAL_KEYCHAIN_LIST:-}" ]]; then
            RESTORE_KEYCHAINS=()
            while IFS= read -r kc; do [[ -z "$kc" ]] || RESTORE_KEYCHAINS+=("$kc"); done <<<"${ORIGINAL_KEYCHAIN_LIST}"
            [[ ${#RESTORE_KEYCHAINS[@]} -gt 0 ]] && security list-keychains -d user -s "${RESTORE_KEYCHAINS[@]}" || true
          fi
          [[ -n "${KEYCHAIN_PATH:-}" && -e "${KEYCHAIN_PATH}" ]] && security delete-keychain "${KEYCHAIN_PATH}" || true
