name: Build OffLLM iOS App

on:
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode 16.4
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.4"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install JS deps
        run: npm ci

      - name: Install XcodeGen (prebuilt)
        run: |
          set -euxo pipefail
          VER="2.39.1"
          # download the right ZIP â€” asset is named xcodegen.zip
          curl -L "https://github.com/yonaskolb/XcodeGen/releases/download/${VER}/xcodegen.zip" -o /tmp/xg.zip
          unzip -q /tmp/xg.zip -d /tmp/xg
          XCODEGEN_BIN=$(find /tmp/xg -type f -name xcodegen -perm +111 | head -n 1)
          sudo mv "$XCODEGEN_BIN" /usr/local/bin/xcodegen
          chmod +x /usr/local/bin/xcodegen
          xcodegen --version

      - name: Install CocoaPods
        run: |
          gem install cocoapods --no-document
          pod --version

      - name: Generate Xcode project
        working-directory: ios/MyOfflineLLMApp
        run: xcodegen generate

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/CocoaPods
            ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install CocoaPods dependencies
        working-directory: ios
        run: pod install --repo-update

      - name: Import signing certificate
        if: ${{ secrets.CERT_BASE64 != '' && secrets.CERT_PASSWORD != '' && secrets.KEYCHAIN_PASSWORD != '' }}
        run: |
          printf "%s" "$CERT_BASE64" | base64 -D > /tmp/cert.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security list-keychains -d user -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security import /tmp/cert.p12 -k build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain

      - name: Decode provisioning profile
        env:
          PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
        run: |
          printf "%s" "$PROFILE_BASE64" | base64 -D > /tmp/profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          PROFILE_UUID=$(security cms -D -i /tmp/profile.mobileprovision | plutil -extract UUID raw -o - -)
          mv /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision

      - name: Create export options plist
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.IOS_EXPORT_OPTIONS_PLIST }}
        run: |
          printf "%s" "$EXPORT_OPTIONS_PLIST" | base64 -D > exportOptions.plist

      - name: Build archive
        run: |
          xcodebuild -workspace ios/MyOfflineLLMApp.xcworkspace \
            -scheme MyOfflineLLMApp \
            -configuration Release \
            -sdk iphoneos \
            -archivePath OffLLM.xcarchive \
            clean archive

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath OffLLM.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build_output

      - name: Cleanup temp keychain
        if: always()
        run: security delete-keychain build.keychain || true

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: OffLLM-ipa
          path: build_output/*.ipa
