name: iOS Build (Verify RN Versions)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  ios:
    name: Build iOS (Xcode 16.4)
    runs-on: macos-15

    env:
      CODE_SIGNING_ALLOWED: "NO"
      CODE_SIGNING_REQUIRED: "NO"
      USE_FLIPPER: "0"
      WORKSPACE: monGARS.xcworkspace
      SCHEME: monGARS
      CONFIGURATION: Release
      SDK: iphoneos
      DERIVED_DATA: ${{ github.workspace }}/build/DerivedData

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.4
        run: |
          sudo xcode-select -s "/Applications/Xcode_16.4.app/Contents/Developer"
          xcodebuild -version

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install JS deps
        run: |
          npm ci

      - name: Set up Ruby (for CocoaPods)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Install xcpretty
        run: |
          gem install xcpretty

      - name: Install XcodeGen
        run: |
          brew install xcodegen

      - name: Generate Xcode project (idempotent)
        run: |
          xcodegen generate || true

      - name: Cache Pods
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Pods (fresh if lock changed)
        working-directory: ios
        run: |
          bundle exec pod deintegrate || true
          rm -rf Pods Podfile.lock
          bundle exec pod repo update
          bundle exec pod install --repo-update

      - name: Run iOS configuration verifiers
        uses: ./.github/actions/verify-ios-config

      - name: Reset caches and prepare module cache
        id: prepare_module_cache
        uses: ./.github/actions/ios-reset-module-cache

      - name: Build (unsigned, Release)
        working-directory: ios
        env:
          MODULE_CACHE_DIR: ${{ env.MODULE_CACHE_DIR }}
          CLANG_MODULE_CACHE_PATH: ${{ env.CLANG_MODULE_CACHE_PATH }}
        run: |
          set -euo pipefail
          mkdir -p ../build/DerivedData
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -sdk "$SDK" \
            -UseModernBuildSystem=YES \
            -derivedDataPath ../build/DerivedData \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            clean build | xcpretty && exit ${PIPESTATUS[0]}
        shell: bash

      - name: Remove temporary module cache
        if: steps.prepare_module_cache.outputs.module_cache_dir != ''
        run: |
          if [ -d "${MODULE_CACHE_DIR}" ]; then
            rm -rf "${MODULE_CACHE_DIR}"
          fi
        env:
          MODULE_CACHE_DIR: ${{ steps.prepare_module_cache.outputs.module_cache_dir }}

  ios-ipa:
    name: Archive & Export Unsigned IPA
    runs-on: macos-15
    needs: ios
    env:
      CODE_SIGNING_ALLOWED: "NO"
      CODE_SIGNING_REQUIRED: "NO"
      USE_FLIPPER: "0"
      WORKSPACE: monGARS.xcworkspace
      SCHEME: monGARS
      CONFIGURATION: Release
      SDK: iphoneos
      ARCHIVE_PATH: build/monGARS.xcarchive
      APP_NAME: monGARS
      DERIVED_DATA: ${{ github.workspace }}/build/DerivedData

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.4
        run: |
          sudo xcode-select -s "/Applications/Xcode_16.4.app/Contents/Developer"
          xcodebuild -version

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install JS deps
        run: npm ci

      - name: Set up Ruby (for CocoaPods)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Install xcpretty
        run: |
          gem install xcpretty

      - name: Install XcodeGen
        run: |
          brew install xcodegen

      - name: Generate Xcode project (idempotent)
        run: |
          xcodegen generate || true

      - name: Cache Pods
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Pods (fresh if lock changed)
        working-directory: ios
        run: |
          bundle exec pod deintegrate || true
          rm -rf Pods Podfile.lock
          bundle exec pod repo update
          bundle exec pod install --repo-update

      - name: Run iOS configuration verifiers
        uses: ./.github/actions/verify-ios-config

      - name: Reset caches and prepare module cache
        id: prepare_module_cache
        uses: ./.github/actions/ios-reset-module-cache

      - name: Archive (unsigned)
        working-directory: ios
        env:
          MODULE_CACHE_DIR: ${{ env.MODULE_CACHE_DIR }}
          CLANG_MODULE_CACHE_PATH: ${{ env.CLANG_MODULE_CACHE_PATH }}
        run: |
          set -euo pipefail
          mkdir -p ../build/DerivedData "$(dirname "$ARCHIVE_PATH")"
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -sdk "$SDK" \
            -UseModernBuildSystem=YES \
            -derivedDataPath ../build/DerivedData \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            archive -archivePath "$ARCHIVE_PATH" | xcpretty && exit ${PIPESTATUS[0]}

      - name: Remove temporary module cache
        if: steps.prepare_module_cache.outputs.module_cache_dir != ''
        run: |
          if [ -d "${MODULE_CACHE_DIR}" ]; then
            rm -rf "${MODULE_CACHE_DIR}"
          fi
        env:
          MODULE_CACHE_DIR: ${{ steps.prepare_module_cache.outputs.module_cache_dir }}

      - name: Create unsigned IPA
        working-directory: ios
        run: |
          set -euo pipefail
          APP_DIR="$ARCHIVE_PATH/Products/Applications/${APP_NAME}.app"
          if [ ! -d "$APP_DIR" ]; then
            echo "App not found at $APP_DIR"
            ls -la "$ARCHIVE_PATH/Products/Applications" || true
            exit 2
          fi
          mkdir -p build/Payload
          rm -rf build/Payload/*
          cp -R "$APP_DIR" build/Payload/
          (cd build && zip -r "${APP_NAME}-unsigned.ipa" Payload >/dev/null)
          echo "IPA created: ios/build/${APP_NAME}-unsigned.ipa"

      - name: Upload IPA & Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-${{ env.APP_NAME }}-artifacts
          path: |
            ios/build/${{ env.APP_NAME }}-unsigned.ipa
            ios/build/${{ env.APP_NAME }}.xcarchive
          if-no-files-found: error
