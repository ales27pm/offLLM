name: iOS AdHoc Signed IPA

on:
  workflow_dispatch:
  push:
    branches: [main, master]
  pull_request:

jobs:
  build-adhoc:
    environment:
      name: offLLM
    runs-on: macos-15

    env:
      NODE_VERSION: "20"
      RUBY_VERSION: "3.2"
      XCODE_VERSION: "16.4"
      SCHEME: monGARS
      CONFIGURATION: Release
      ARCHIVE_PATH: build/monGARS.xcarchive
      DERIVED_DATA: build/DerivedData
      RESULT_BUNDLE: build/DerivedData/ResultBundle_build.xcresult
      WORKSPACE: ios/monGARS.xcworkspace

      BUNDLE_IDENTIFIER: anardoni.export.monGARS
      TEAM_ID: ${{ secrets.TEAM_ID }}

      KEYCHAIN_NAME: build-signing.keychain-db
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      P12_BASE64: ${{ secrets.P12_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      MOBILEPROVISION_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode ${{ env.XCODE_VERSION }}
        run: |
          sudo xcode-select -s "/Applications/Xcode_${XCODE_VERSION}.app"
          xcodebuild -version

      - name: Download bundled MLX model
        run: ./scripts/ci/download-mlx-model.sh

      - name: Set up Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install JS dependencies
        run: npm ci

      - name: Set up Ruby ${{ env.RUBY_VERSION }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: ios

      - name: Cache Pods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: pods-${{ runner.os }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: pods-${{ runner.os }}-

      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen >/dev/null 2>&1; then
            brew install xcodegen
          fi

      - name: Generate Xcode project
        working-directory: ios
        run: xcodegen generate

      - name: Install CocoaPods
        id: install_pods
        working-directory: ios
        run: |
          set -euo pipefail
          if bundle exec pod install --repo-update; then
            exit 0
          fi
          echo "bundle exec pod install failed; retrying with system pod"
          pod install --repo-update

      - name: Verify workspace
        run: |
          if [ ! -d "$WORKSPACE" ]; then
            echo "::error ::Expected workspace $WORKSPACE to exist after pod install."
            exit 1
          fi

      - name: Prepare scripts
        run: |
          SCRIPTS_DIR="$RUNNER_TEMP/signing-scripts"
          mkdir -p "$SCRIPTS_DIR" signing
          cat > "$SCRIPTS_DIR/import_signing.sh" <<'BASH'
          #!/usr/bin/env bash
          set -euo pipefail
          P12_PATH="$1"; P12_PASSWORD="$2"; MP_PATH="$3"; KC_NAME="$4"; KC_PASS="$5"
          KC_PATH="$HOME/Library/Keychains/$KC_NAME"
          security create-keychain -p "$KC_PASS" "$KC_PATH"
          security set-keychain-settings -lut 21600 "$KC_PATH"
          security unlock-keychain -p "$KC_PASS" "$KC_PATH"
          security import "$P12_PATH" -k "$KC_PATH" -P "$P12_PASSWORD" -f pkcs12 -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KC_PASS" "$KC_PATH" || true
          security list-keychains -d user -s "$KC_PATH"
          security default-keychain -s "$KC_PATH"
          PP_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"; mkdir -p "$PP_DIR"
          PLIST_TMP=$(mktemp); security cms -D -i "$MP_PATH" > "$PLIST_TMP"
          UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' "$PLIST_TMP")
          cp "$MP_PATH" "$PP_DIR/$UUID.mobileprovision"
          echo "PROFILE_UUID=$UUID" >> "$GITHUB_ENV"
          echo "KEYCHAIN_PATH=$KC_PATH" >> "$GITHUB_ENV"
          BASH
          chmod +x "$SCRIPTS_DIR/import_signing.sh"

          cat > "$SCRIPTS_DIR/export_ipa.sh" <<'BASH'
          #!/usr/bin/env bash
          set -euo pipefail
          ARCHIVE_PATH="$1"; EXPORT_OPTS="$2"; EXPORT_DIR="$3"
          mkdir -p "$EXPORT_DIR"
          xcodebuild -exportArchive -archivePath "$ARCHIVE_PATH" -exportPath "$EXPORT_DIR" -exportOptionsPlist "$EXPORT_OPTS" -allowProvisioningUpdates
          ls -la "$EXPORT_DIR"
          BASH
          chmod +x "$SCRIPTS_DIR/export_ipa.sh"
          echo "SIGNING_SCRIPTS_DIR=$SCRIPTS_DIR" >> "$GITHUB_ENV"

      - name: Decode signing files
        run: |
          python - <<'PY'
          import base64
          import binascii
          import os
          import sys
          from pathlib import Path

          REQUIRED_ENV_VARS = {
              "P12_BASE64": "signing/cert.p12",
              "MOBILEPROVISION_BASE64": "signing/profile.mobileprovision",
          }

          signing_dir = Path("signing")
          signing_dir.mkdir(parents=True, exist_ok=True)

          def decode_secret(env_var: str, output_path: Path) -> None:
              value = os.environ.get(env_var)
              if not value:
                  sys.stderr.write(
                      f"::error ::Missing signing secret {env_var}. "
                      "Add it to the repository or environment secrets before rerunning.\n"
                  )
                  sys.exit(1)

              try:
                  decoded = base64.b64decode(value)
              except binascii.Error as exc:
                  sys.stderr.write(
                      f"::error ::Secret {env_var} is not valid base64: {exc}\n"
                  )
                  sys.exit(1)

              if not decoded:
                  sys.stderr.write(
                      f"::error ::Secret {env_var} decoded to 0 bytes. "
                      "Verify the uploaded file and try again.\n"
                  )
                  sys.exit(1)

              output_path.write_bytes(decoded)

          for env_var, relative_path in REQUIRED_ENV_VARS.items():
              decode_secret(env_var, Path(relative_path))
          PY

      - name: Import certificate & provisioning profile
        run: |
          bash "$SIGNING_SCRIPTS_DIR/import_signing.sh" \
            signing/cert.p12 \
            "$P12_PASSWORD" \
            signing/profile.mobileprovision \
            "$KEYCHAIN_NAME" \
            "$KEYCHAIN_PASSWORD"

      - name: Resolve provisioning profile metadata
        id: profile
        run: |
          set -euo pipefail
          PROFILE_PLIST=$(mktemp)
          /usr/bin/security cms -D -i signing/profile.mobileprovision > "$PROFILE_PLIST"
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print Name' "$PROFILE_PLIST")
          APPLICATION_IDENTIFIER=$(/usr/libexec/PlistBuddy -c 'Print Entitlements:application-identifier' "$PROFILE_PLIST")
          if [[ "$APPLICATION_IDENTIFIER" == *.* ]]; then
            PROFILE_BUNDLE_ID="${APPLICATION_IDENTIFIER#*.}"
          else
            PROFILE_BUNDLE_ID="$APPLICATION_IDENTIFIER"
          fi
          PROFILE_TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print ApplicationIdentifierPrefix:0' "$PROFILE_PLIST" 2>/dev/null || true)
          if [ -z "$PROFILE_TEAM_ID" ]; then
            PROFILE_TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print Entitlements:com.apple.developer.team-identifier' "$PROFILE_PLIST" 2>/dev/null || true)
          fi
          if [ -z "$PROFILE_BUNDLE_ID" ]; then
            echo "::error ::Failed to read bundle identifier from provisioning profile."
            exit 1
          fi
          echo "name=$PROFILE_NAME" >> "$GITHUB_OUTPUT"
          echo "bundle_id=$PROFILE_BUNDLE_ID" >> "$GITHUB_OUTPUT"
          if [ -n "$PROFILE_TEAM_ID" ]; then
            echo "team_id=$PROFILE_TEAM_ID" >> "$GITHUB_OUTPUT"
          fi

      - name: Determine signing configuration
        id: signing
        run: |
          set -euo pipefail
          PROFILE_BUNDLE_ID="${{ steps.profile.outputs.bundle_id }}"
          PROFILE_TEAM_ID="${{ steps.profile.outputs.team_id }}"

          REQUESTED_BUNDLE_ID="${BUNDLE_IDENTIFIER:-}"

          if [ -z "$PROFILE_BUNDLE_ID" ]; then
            echo "::error ::Provisioning profile did not expose an application identifier."
            exit 1
          fi

          if [ -n "$REQUESTED_BUNDLE_ID" ] && [ "$REQUESTED_BUNDLE_ID" != "$PROFILE_BUNDLE_ID" ]; then
            echo "::error ::Provisioning profile bundle identifier $PROFILE_BUNDLE_ID does not match requested bundle identifier $REQUESTED_BUNDLE_ID. Update the configured secrets or upload a matching provisioning profile."
            exit 1
          fi

          if [ -n "$REQUESTED_BUNDLE_ID" ]; then
            RESOLVED_BUNDLE_ID="$REQUESTED_BUNDLE_ID"
          else
            RESOLVED_BUNDLE_ID="$PROFILE_BUNDLE_ID"
          fi

          RESOLVED_TEAM_ID="${TEAM_ID:-}"
          if [ -n "$RESOLVED_TEAM_ID" ] && [ -n "$PROFILE_TEAM_ID" ] && [ "$RESOLVED_TEAM_ID" != "$PROFILE_TEAM_ID" ]; then
            echo "::error ::Provisioning profile team identifier $PROFILE_TEAM_ID does not match TEAM_ID secret $RESOLVED_TEAM_ID. Update the configured secrets or upload a matching provisioning profile."
            exit 1
          fi

          if [ -z "$RESOLVED_TEAM_ID" ]; then
            if [ -n "$PROFILE_TEAM_ID" ]; then
              RESOLVED_TEAM_ID="$PROFILE_TEAM_ID"
            else
              echo "::error ::Unable to determine Apple team identifier from secrets or provisioning profile."
              exit 1
            fi
          fi

          echo "bundle_id=$RESOLVED_BUNDLE_ID" >> "$GITHUB_OUTPUT"
          echo "team_id=$RESOLVED_TEAM_ID" >> "$GITHUB_OUTPUT"
          echo "RESOLVED_BUNDLE_ID=$RESOLVED_BUNDLE_ID" >> "$GITHUB_ENV"
          echo "RESOLVED_TEAM_ID=$RESOLVED_TEAM_ID" >> "$GITHUB_ENV"

      - name: Xcode Archive (manual signing)
        run: |
          set -euxo pipefail
          rm -rf "$ARCHIVE_PATH" "$DERIVED_DATA" "$RESULT_BUNDLE" || true
          : "${RESOLVED_BUNDLE_ID:?Resolved bundle identifier missing}"
          : "${RESOLVED_TEAM_ID:?Resolved team identifier missing}"
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -archivePath "$ARCHIVE_PATH" \
            -destination "generic/platform=iOS" \
            -derivedDataPath "$DERIVED_DATA" \
            -resultBundlePath "$RESULT_BUNDLE" \
            archive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$RESOLVED_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$RESOLVED_BUNDLE_ID" \
            PROVISIONING_PROFILE_SPECIFIER="${{ steps.profile.outputs.name }}" \
            OTHER_CODE_SIGN_FLAGS="--keychain ${KEYCHAIN_PATH:-$HOME/Library/Keychains/$KEYCHAIN_NAME}"

      - name: Create exportOptions.plist
        run: |
          cat > exportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>release-testing</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>${RESOLVED_TEAM_ID}</string>
            <key>compileBitcode</key><false/>
            <key>stripSwiftSymbols</key><true/>
            <key>destination</key><string>export</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${RESOLVED_BUNDLE_ID}</key><string>${{ steps.profile.outputs.name }}</string>
            </dict>
          </dict>
          </plist>
          PLIST

      - name: Export IPA
        run: |
          bash "$SIGNING_SCRIPTS_DIR/export_ipa.sh" "$ARCHIVE_PATH" exportOptions.plist export

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: monGARS-AdHoc-IPA
          path: export/*.ipa

      - name: Cleanup keychain
        if: always()
        run: |
          security delete-keychain "${KEYCHAIN_PATH:-$HOME/Library/Keychains/$KEYCHAIN_NAME}" || true
