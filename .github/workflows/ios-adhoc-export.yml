name: iOS AdHoc Signed IPA

on:
  workflow_dispatch:
  push:
    branches: [main, master]

jobs:
  build-adhoc:
    permissions:
      contents: read
    runs-on: macos-latest
    timeout-minutes: 60
    concurrency:
      group: ios-adhoc-${{ github.ref }}
      cancel-in-progress: true

    env:
      NODE_VERSION: "20"
      RUBY_VERSION: "3.2"
      XCODE_VERSION: "16.4"
      SCHEME: monGARS
      CONFIGURATION: Release
      WORKSPACE: ios/monGARS.xcworkspace
      ARCHIVE_PATH: build/monGARS.xcarchive
      DERIVED_DATA: build/DerivedData
      RESULT_BUNDLE: build/DerivedData/ResultBundle_build.xcresult

      BUNDLE_ID_PREFIX: anardoni.export
      BUNDLE_ID_SUFFIX: ${{ secrets.BUNDLE_ID_SUFFIX }}
      TEAM_ID: ${{ secrets.TEAM_ID }}

      KEYCHAIN_NAME: build-signing.keychain-db
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      P12_BASE64: ${{ secrets.P12_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      MOBILEPROVISION_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode ${{ env.XCODE_VERSION }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install Node dependencies
        run: npm ci

      - name: Setup Ruby ${{ env.RUBY_VERSION }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
        working-directory: ios

      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen >/dev/null 2>&1; then
            brew install xcodegen
          fi

      - name: Download bundled MLX model
        run: ./scripts/ci/download-mlx-model.sh

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ios/monGARS.xcworkspace
          key: pods-${{ runner.os }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            pods-${{ runner.os }}-

      - name: Generate Xcode project
        working-directory: ios
        run: xcodegen generate

      - name: Install CocoaPods
        working-directory: ios
        run: |
          set -euo pipefail
          bundle exec pod install --repo-update

      - name: Restore DerivedData cache
        uses: actions/cache@v4
        with:
          path: build/DerivedData
          key: derived-${{ runner.os }}-${{ env.XCODE_VERSION }}-${{ hashFiles('ios/project.yml', 'ios/Podfile.lock') }}
          restore-keys: |
            derived-${{ runner.os }}-${{ env.XCODE_VERSION }}-

      - name: Prepare signing workspace
        run: mkdir -p signing

      - name: Decode signing files
        run: |
          echo "$P12_BASE64" | base64 -D > signing/cert.p12
          echo "$MOBILEPROVISION_BASE64" | base64 -D > signing/profile.mobileprovision

      - name: Import certificate & provisioning profile
        run: |
          ./scripts/ci/import_signing.sh \
            signing/cert.p12 \
            "$P12_PASSWORD" \
            signing/profile.mobileprovision \
            "$KEYCHAIN_NAME" \
            "$KEYCHAIN_PASSWORD"

      - name: Xcode Archive (manual signing)
        run: |
          set -euo pipefail
          rm -rf "$ARCHIVE_PATH" "$RESULT_BUNDLE" || true
          BUNDLE_ID="${BUNDLE_ID_PREFIX}.${BUNDLE_ID_SUFFIX}"
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -archivePath "$ARCHIVE_PATH" \
            -destination "generic/platform=iOS" \
            -derivedDataPath "$DERIVED_DATA" \
            -resultBundlePath "$RESULT_BUNDLE" \
            archive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="${TEAM_ID}" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_NAME"

      - name: Create exportOptions.plist
        run: |
          cat > exportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>ad-hoc</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>compileBitcode</key><false/>
            <key>stripSwiftSymbols</key><true/>
            <key>destination</key><string>export</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_ID_PREFIX}.${BUNDLE_ID_SUFFIX}</key><string>${PROFILE_NAME}</string>
            </dict>
          </dict>
          </plist>
          PLIST

      - name: Export IPA
        run: |
          ./scripts/ci/export_ipa.sh "$ARCHIVE_PATH" exportOptions.plist export

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: monGARS-AdHoc-IPA
          path: export/*.ipa

      - name: Cleanup keychain
        if: always()
        run: |
          set -euo pipefail
          rm -rf signing export exportOptions.plist || true
          if [ -n "${ORIG_KEYCHAINS_B64:-}" ]; then
            RESTORE_ARGS=()
            if ORIG_KEYCHAINS_DECODED=$(python3 - <<'PY'
import base64, os, sys
data = os.environ.get("ORIG_KEYCHAINS_B64", "")
try:
    sys.stdout.write(base64.b64decode(data.encode()).decode())
except Exception:
    sys.exit(1)
PY
); then
              while IFS= read -r keychain; do
                [ -z "$keychain" ] && continue
                RESTORE_ARGS+=("$keychain")
              done <<< "$ORIG_KEYCHAINS_DECODED"
              if [ ${#RESTORE_ARGS[@]} -gt 0 ]; then
                security list-keychains -d user -s "${RESTORE_ARGS[@]}"
              fi
            else
              echo "::warning title=Keychain restore failed::Unable to decode original keychain search list." >&2
            fi
          fi
          if [ -n "${ORIG_DEFAULT_KEYCHAIN:-}" ]; then
            security default-keychain -s "$ORIG_DEFAULT_KEYCHAIN" || true
          else
            security default-keychain -s login.keychain-db || true
          fi
          if ! security delete-keychain "$KEYCHAIN_NAME"; then
            echo "::warning title=Keychain cleanup failed::Failed to delete $KEYCHAIN_NAME; investigate runner cleanup." >&2
          fi
