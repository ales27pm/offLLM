name: iOS Build - xcresult JSON (iPhone 16 Pro iOS 18.2)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  ios:
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.1
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.1"

      - name: Verify Xcode & Runtimes
        shell: bash
        run: |
          set -euo pipefail
          xcodebuild -version
          xcrun simctl list runtimes
          echo "DEVELOPER_DIR=${DEVELOPER_DIR:-not-set}"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install JS deps
        run: npm ci

      - name: Setup Ruby & CocoaPods
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"

      - name: Install CocoaPods & xcpretty
        shell: bash
        run: |
          set -euo pipefail
          gem install cocoapods -N
          gem install xcpretty -N
          pod --version

      - name: Ensure iOS project exists
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "ios/MyOfflineLLMApp/project.yml" ]; then
            echo "Generating project with XcodeGen"
            brew install xcodegen || true
            (cd ios/MyOfflineLLMApp && xcodegen generate)
          fi

      - name: Install Pods
        shell: bash
        run: |
          set -euo pipefail
          cd ios
          pod repo update
          pod install --repo-update
          cd -

      # STRICT iOS 18.2: find the iOS 18.2 runtime, create/boot iPhone 16 Pro only on that runtime
      - name: Resolve/create & boot Simulator (iPhone 16 Pro / iOS 18.2 only)
        id: sim
        shell: bash
        run: |
          set -euo pipefail
          xcrun simctl list runtimes --json > runtimes.json
          xcrun simctl list devicetypes --json > devicetypes.json
          xcrun simctl list devices --json > devices.json

          cat > pick.py <<'PY'
import json, sys, subprocess

with open("runtimes.json") as f: runtimes = json.load(f)
with open("devices.json")  as f: devices  = json.load(f)

# Find iOS 18.2 runtime identifier
ios182_id = None
for rt in runtimes.get("runtimes", []):
    ident = rt.get("identifier","")
    if ident.startswith("com.apple.CoreSimulator.SimRuntime.iOS-18-2") and rt.get("isAvailable", False):
        ios182_id = ident
        break

if not ios182_id:
    print("ERROR: iOS 18.2 runtime is NOT installed on this runner.", file=sys.stderr)
    print("Available runtimes:", file=sys.stderr)
    for rt in runtimes.get("runtimes", []):
        if rt.get("isAvailable"):
            print(f"  - {rt.get('identifier')}", file=sys.stderr)
    sys.exit(66)

# Look for an existing iPhone 16 Pro device on iOS 18.2
udid = None
for runtime_key, devs in devices.get("devices", {}).items():
    if runtime_key != ios182_id:
        continue
    for d in devs:
        if d.get("isAvailable") and d.get("name") == "iPhone 16 Pro" and d.get("state") in ("Shutdown","Booted"):
            udid = d["udid"]
            break

# If not found, create it
if not udid:
    name = "iPhone 16 Pro (iOS 18.2)"
    # simctl create <name> <deviceTypeName> <runtimeIdentifier>
    udid = subprocess.check_output([
        "xcrun","simctl","create", name, "iPhone 16 Pro", ios182_id
    ], text=True).strip()

print(udid)
PY

          if ! python3 pick.py > udid.txt ; then
            status=$?
            if [ $status -eq 66 ]; then
              echo "::error::iOS 18.2 runtime is not present on this runner image."
              exit 1
            fi
            echo "::error::Simulator selection/creation failed."
            exit $status
          fi

          UDID="$(cat udid.txt | tr -d '[:space:]')"
          if [ -z "$UDID" ]; then
            echo "::error::Failed to determine a simulator UDID for iOS 18.2."
            exit 1
          fi

          echo "Using UDID: $UDID"
          xcrun simctl boot "$UDID" || true
          xcrun simctl bootstatus "$UDID" -b
          echo "destination=platform=iOS Simulator,id=$UDID" >> "$GITHUB_OUTPUT"

      - name: Build (Simulator, iOS 18.2) and export .xcresult
        shell: bash
        env:
          SCHEME: MyOfflineLLMApp
          WORKSPACE: ios/MyOfflineLLMApp.xcworkspace
          CONFIGURATION: Debug
          SDK: iphonesimulator
          RESULT_BUNDLE: ${{ runner.temp }}/MyOfflineLLMApp.xcresult
          RESULT_JSON: ${{ runner.temp }}/MyOfflineLLMApp.xcresult.json
        run: |
          set -euo pipefail
          DESTINATION="${{ steps.sim.outputs.destination }}"
          echo "Building with destination: $DESTINATION"

          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -sdk "$SDK" \
            -destination "$DESTINATION" \
            -resultBundlePath "$RESULT_BUNDLE" \
            -showBuildTimingSummary \
            build | xcpretty || true

          /usr/bin/xcrun xcresulttool get \
            --format json \
            --legacy \
            --path "$RESULT_BUNDLE" \
            > "$RESULT_JSON"

      - name: Upload .xcresult bundle
        uses: actions/upload-artifact@v4
        with:
          name: MyOfflineLLMApp-xcresult
          path: ${{ runner.temp }}/MyOfflineLLMApp.xcresult

      - name: Upload xcresult JSON
        uses: actions/upload-artifact@v4
        with:
          name: MyOfflineLLMApp-xcresult.json
          path: ${{ runner.temp }}/MyOfflineLLMApp.xcresult.json
