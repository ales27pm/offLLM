name: iOS Build - xcresult JSON (iPhone 16 Pro iOS 18.6 fallback 18.4)

on:
  workflow_dispatch:
  push:
    branches: ["main"]

jobs:
  ios:
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.4
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.4"

      - name: Verify Xcode
        shell: bash
        run: |
          set -euo pipefail
          xcodebuild -version
          xcodebuild -showsdks || true
          echo "DEVELOPER_DIR=${DEVELOPER_DIR:-not-set}"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install JS deps
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      # Fail fast on any lint warning
      - name: Run ESLint (no warnings allowed)
        run: npm run lint:ci

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"

      - name: Cache Bundler
        uses: actions/cache@v4
        with:
          path: ios/vendor/bundle
          key: ${{ runner.os }}-bundler-${{ hashFiles('ios/Gemfile.lock') }}
          restore-keys: ${{ runner.os }}-bundler-

      - name: Bundle config path
        working-directory: ios
        shell: bash
        run: bundle config set path vendor/bundle

      - name: Bundle install
        working-directory: ios
        shell: bash
        run: bundle install

      - name: Install XcodeGen
        run: brew install xcodegen

      - name: Install xcpretty
        shell: bash
        run: gem install xcpretty -N

      - name: Generate Xcode project (XcodeGen auto-discover)
        shell: bash
        run: |
          set -euo pipefail
          SPEC="$(/usr/bin/find ios -maxdepth 2 -name project.yml -print -quit || true)"
          if [[ -n "${SPEC}" ]]; then
            echo "🛠  Found XcodeGen spec at: ${SPEC}"
            pushd "$(dirname "${SPEC}")"
            xcodegen generate
            popd
          else
            echo "ℹ️  No XcodeGen project.yml found; skipping"
          fi

      - name: Verify generated project
        shell: bash
        run: ls -R ios | grep -m1 '\.xcodeproj$' || (echo '❌ No .xcodeproj generated!' && exit 1)

      - name: Debug Xcode projects
        run: find ios -maxdepth 3 -name "*.xcodeproj" -print

      - name: Clean CocoaPods sandbox if stale
        working-directory: ios
        shell: bash
        run: |
          set -euo pipefail
          rm -f Pods/Manifest.lock
          rm -rf Pods/Headers || true

      - name: Install Pods (bundler)
        working-directory: ios
        shell: bash
        run: bundle exec pod install --repo-update

      # Optional: verify sandbox is in sync (auto-heal if needed)
      - name: Verify Pods sandbox in sync
        working-directory: ios
        shell: bash
        run: |
          set -euo pipefail
          if ! bundle exec pod check >/dev/null 2>&1; then
            echo "::warning::Pods sandbox not in sync; reinstalling…"
            rm -f Pods/Manifest.lock
            bundle exec pod install --repo-update
          fi

      - name: Verify generated workspace
        shell: bash
        run: |
          set -euo pipefail
          WS="$(/usr/bin/find ios -maxdepth 1 -name '*.xcworkspace' -print -quit || true)"
          if [[ -z "$WS" ]]; then
            echo "❌ No .xcworkspace found after pod install!"
            exit 1
          fi
          echo "📁 Using workspace: $WS"

      - name: Ensure jq is available
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            brew install jq || true
          fi
          jq --version || true

      # Prefer iOS 18.6, then 18.4; create iPhone 16 Pro if missing
      - name: Resolve/create & boot Simulator (iPhone 16 Pro; iOS 18.x highest available)
        id: sim
        shell: bash
        run: |
          set -euo pipefail

          WANT_RUNTIMES=("com.apple.CoreSimulator.SimRuntime.iOS-18-6" \
                         "com.apple.CoreSimulator.SimRuntime.iOS-18-4")

          RUNTIME=""
          RUNTIME_LABEL=""
          RUNTIMES_JSON="$(xcrun simctl list runtimes --json)"
          for r in "${WANT_RUNTIMES[@]}"; do
            if printf '%s' "$RUNTIMES_JSON" | jq -e --arg r "$r" '.runtimes[] | select(.identifier==$r and .isAvailable==true)' >/dev/null; then
              RUNTIME="$r"
              RUNTIME_LABEL="$(printf '%s' "$RUNTIME" | sed -E 's/.*iOS-([0-9]+)-([0-9]+)$/iOS \1.\2/')"
              break
            fi
          done

          if [ -z "$RUNTIME" ]; then
            echo "::error::No iOS 18.6 / 18.4 runtime found on this runner."
            xcrun simctl list runtimes
            exit 1
          fi
          echo "Using runtime: $RUNTIME ($RUNTIME_LABEL)"

          UDID="$(xcrun simctl list devices --json \
            | jq -r --arg RUNTIME "$RUNTIME" '.devices[$RUNTIME][]? | select(.isAvailable==true) | select(.name=="iPhone 16 Pro") | select(.state=="Shutdown" or .state=="Booted") | .udid' \
            | head -n1)"

          if [ -z "${UDID:-}" ]; then
            NAME="iPhone 16 Pro (${RUNTIME_LABEL})"
            echo "Creating simulator: $NAME"
            UDID="$(xcrun simctl create "$NAME" "iPhone 16 Pro" "$RUNTIME")"
          fi

          echo "Using UDID: $UDID"
          xcrun simctl boot "$UDID" || true
          xcrun simctl bootstatus "$UDID" -b

          echo "destination=platform=iOS Simulator,id=$UDID" >> "$GITHUB_OUTPUT"

      - name: Build (Simulator) and export .xcresult
        shell: bash
        env:
          SCHEME: MyOfflineLLMApp
          CONFIGURATION: Debug
          SDK: iphonesimulator
          RESULT_BUNDLE: ${{ runner.temp }}/MyOfflineLLMApp.xcresult
          RESULT_JSON: ${{ runner.temp }}/MyOfflineLLMApp.xcresult.json
        run: |
          set -euo pipefail
          DESTINATION="${{ steps.sim.outputs.destination }}"
          echo "Building with destination: $DESTINATION"

          WS="$(/usr/bin/find ios -maxdepth 1 -name '*.xcworkspace' -print -quit || true)"
          if [[ -z "$WS" ]]; then
            echo "::error::No .xcworkspace found for simulator build"
            exit 1
          fi

          xcodebuild \
            -workspace "$WS" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -sdk "$SDK" \
            -destination "$DESTINATION" \
            -resultBundlePath "$RESULT_BUNDLE" \
            -showBuildTimingSummary \
            build | xcpretty || true

          /usr/bin/xcrun xcresulttool get \
            --format json \
            --legacy \
            --path "$RESULT_BUNDLE" \
            > "$RESULT_JSON"

          echo "Result bundle: $RESULT_BUNDLE"
          echo "Result JSON:   $RESULT_JSON"

      - name: Upload .xcresult bundle
        uses: actions/upload-artifact@v4
        with:
          name: MyOfflineLLMApp-xcresult
          path: ${{ runner.temp }}/MyOfflineLLMApp.xcresult

      - name: Upload xcresult JSON
        uses: actions/upload-artifact@v4
        with:
          name: MyOfflineLLMApp-xcresult.json
          path: ${{ runner.temp }}/MyOfflineLLMApp.xcresult.json

      # === DEVICE ARCHIVE (unsigned) + IPA PACKAGING ===
      - name: Archive for generic iOS device (no signing, force SDK)
        id: archive
        shell: bash
        env:
          SCHEME: MyOfflineLLMApp
          CONFIGURATION: Release
          ARCHIVE_PATH: ${{ runner.temp }}/MyOfflineLLMApp.xcarchive
        run: |
          set -euo pipefail
          echo "Archiving for generic iOS device (no codesign)…"

          WS="$(/usr/bin/find ios -maxdepth 1 -name '*.xcworkspace' -print -quit || true)"
          if [[ -z "$WS" ]]; then
            echo "::error::No .xcworkspace found for archive"
            exit 1
          fi

          xcodebuild \
            -workspace "$WS" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -sdk iphoneos \
            SDKROOT=iphoneos \
            SUPPORTED_PLATFORMS=iphoneos \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
            ONLY_ACTIVE_ARCH=NO ARCHS=arm64 \
            -destination "generic/platform=iOS" \
            -archivePath "$ARCHIVE_PATH" \
            archive | xcpretty || true

          if [ ! -d "$ARCHIVE_PATH/Products/Applications" ]; then
            echo "::error::Archive missing Applications folder: $ARCHIVE_PATH/Products/Applications"
            xcodebuild -showdestinations -workspace "$WS" -scheme "$SCHEME" -sdk iphoneos || true
            exit 1
          fi

          APP_PATH="$(/usr/bin/find "$ARCHIVE_PATH/Products/Applications" -maxdepth 1 -type d -name '*.app' -print -quit)"
          if [ -z "$APP_PATH" ]; then
            echo "::error::No .app found inside archive Applications folder."
            /usr/bin/find "$ARCHIVE_PATH" -name '*.app' -print || true
            exit 1
          fi
          echo "APP_PATH=$APP_PATH" >> "$GITHUB_ENV"
          echo "ARCHIVE_PATH=$ARCHIVE_PATH" >> "$GITHUB_ENV"

      - name: Create unsigned IPA from archive
        shell: bash
        env:
          IPA_OUT: ${{ runner.temp }}/MyOfflineLLMApp-unsigned.ipa
        run: |
          set -euo pipefail
          : "${APP_PATH:?APP_PATH not set}"

          # Strip any signing remnants (not required, but keeps it clean)
          rm -rf "$APP_PATH/_CodeSignature" || true
          rm -f "$APP_PATH/embedded.mobileprovision" || true

          WORK_DIR="$(mktemp -d)"
          mkdir -p "$WORK_DIR/Payload"
          cp -R "$APP_PATH" "$WORK_DIR/Payload/"

          (cd "$WORK_DIR" && zip -qry "$IPA_OUT" Payload)

          mv "$IPA_OUT" .
          echo "IPA_PATH=$(pwd)/$(basename "$IPA_OUT")" >> "$GITHUB_ENV"
          echo "Unsigned IPA created at: $(pwd)/$(basename "$IPA_OUT")"

      - name: Upload unsigned IPA
        uses: actions/upload-artifact@v4
        with:
          name: MyOfflineLLMApp-unsigned-ipa
          path: ${{ env.IPA_PATH }}
          if-no-files-found: error
