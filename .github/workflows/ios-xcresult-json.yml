name: iOS Build - xcresult JSON (iPhone 16 Pro iOS 18.2)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  ios:
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.1
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.1"

      - name: Verify Xcode & Runtimes
        shell: bash
        run: |
          set -euo pipefail
          xcodebuild -version
          xcrun simctl list runtimes
          echo "DEVELOPER_DIR=${DEVELOPER_DIR:-not-set}"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install JS deps
        run: npm ci

      - name: Setup Ruby & CocoaPods
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"

      - name: Install CocoaPods & xcpretty
        shell: bash
        run: |
          set -euo pipefail
          gem install cocoapods -N
          gem install xcpretty -N
          pod --version

      - name: Ensure iOS project exists
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "ios/MyOfflineLLMApp/project.yml" ]; then
            echo "Generating project with XcodeGen"
            brew install xcodegen || true
            (cd ios/MyOfflineLLMApp && xcodegen generate)
          fi

      - name: Install Pods
        shell: bash
        run: |
          set -euo pipefail
          cd ios
          pod repo update
          pod install --repo-update
          cd -

      # STRICT iOS 18.2 using jq (no heredocs / Python)
      - name: Resolve/create & boot Simulator (iPhone 16 Pro / iOS 18.2 only)
        id: sim
        shell: bash
        run: |
          set -euo pipefail

          # Find an available iOS 18.2 runtime identifier
          RUNTIME=$(xcrun simctl list runtimes --json \
            | jq -r '.runtimes[] | select(.identifier|test("com\\.apple\\.CoreSimulator\\.SimRuntime\\.iOS-18-2$")) | select(.isAvailable==true) | .identifier' \
            | head -n1)

          if [ -z "${RUNTIME:-}" ]; then
            echo "::error::iOS 18.2 runtime is NOT installed on this runner image."
            echo "Available runtimes:"
            xcrun simctl list runtimes --json | jq -r '.runtimes[] | select(.isAvailable==true) | "  - \(.identifier)"'
            exit 1
          fi
          echo "Using runtime: $RUNTIME"

          # Try to find an existing iPhone 16 Pro on that runtime
          UDID=$(xcrun simctl list devices --json \
            | jq -r --arg RUNTIME "$RUNTIME" '.devices[$RUNTIME][] | select(.isAvailable==true) | select(.name=="iPhone 16 Pro") | select(.state=="Shutdown" or .state=="Booted") | .udid' \
            | head -n1)

          # Create one if missing
          if [ -z "${UDID:-}" ]; then
            NAME="iPhone 16 Pro (iOS 18.2)"
            echo "Creating simulator: $NAME"
            UDID=$(xcrun simctl create "$NAME" "iPhone 16 Pro" "$RUNTIME")
          fi

          echo "Using UDID: $UDID"
          xcrun simctl boot "$UDID" || true
          xcrun simctl bootstatus "$UDID" -b

          echo "destination=platform=iOS Simulator,id=$UDID" >> "$GITHUB_OUTPUT"

      - name: Build (Simulator, iOS 18.2) and export .xcresult
        shell: bash
        env:
          SCHEME: MyOfflineLLMApp
          WORKSPACE: ios/MyOfflineLLMApp.xcworkspace
          CONFIGURATION: Debug
          SDK: iphonesimulator
          RESULT_BUNDLE: ${{ runner.temp }}/MyOfflineLLMApp.xcresult
          RESULT_JSON: ${{ runner.temp }}/MyOfflineLLMApp.xcresult.json
        run: |
          set -euo pipefail
          DESTINATION="${{ steps.sim.outputs.destination }}"
          echo "Building with destination: $DESTINATION"

          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -sdk "$SDK" \
            -destination "$DESTINATION" \
            -resultBundlePath "$RESULT_BUNDLE" \
            -showBuildTimingSummary \
            build | xcpretty || true

          /usr/bin/xcrun xcresulttool get \
            --format json \
            --legacy \
            --path "$RESULT_BUNDLE" \
            > "$RESULT_JSON"

      - name: Upload .xcresult bundle
        uses: actions/upload-artifact@v4
        with:
          name: MyOfflineLLMApp-xcresult
          path: ${{ runner.temp }}/MyOfflineLLMApp.xcresult

      - name: Upload xcresult JSON
        uses: actions/upload-artifact@v4
        with:
          name: MyOfflineLLMApp-xcresult.json
          path: ${{ runner.temp }}/MyOfflineLLMApp.xcresult.json
