---
name: ios (simulator)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  XCODE_VERSION: "16.4"

jobs:
  build:
    runs-on: macos-15 # newer image; arm64
    env:
      NODE_VERSION: 20
      RUBY_VERSION: 3.2
      DERIVED_DATA: ${{ github.workspace }}/build/DerivedData
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@c51a66b42363123fa82a6cfe02c60af4281dab93
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Set up Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Setup Ruby (3.2) + Bundler cache
        uses: ruby/setup-ruby@44511735964dcb71245e7e55f72539531f7bc0eb
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Install JS deps
        run: npm ci

      - name: Install XcodeGen (if needed)
        run: |
          if ! command -v xcodegen >/dev/null 2>&1; then
            brew update
            brew install xcodegen
          fi

      - name: Generate Xcode project (XcodeGen)
        run: |
          (cd ios && xcodegen generate)

      - name: Install CocoaPods (via bundler)
        working-directory: ios
        run: |
          bundle exec pod install --repo-update

      - name: Detect workspace and scheme
        id: detect
        working-directory: ios
        run: |
          set -euo pipefail
          WS=$(ls -1 *.xcworkspace 2>/dev/null | head -n1 || true)
          if [ -z "${WS:-}" ]; then
            echo "::error::No .xcworkspace found in ios/. Run XcodeGen and CocoaPods first."
            exit 2
          fi
          SCHEME=$(xcodebuild -list -json -workspace "$WS" | python -c 'import json,sys;j=json.load(sys.stdin);s=j.get("workspace",{}).get("schemes",[]);print(s[0] if s else "")')
          if [ -z "${SCHEME:-}" ]; then
            echo "::error::No shared schemes found in $WS"
            exit 3
          fi
          echo "workspace=ios/$WS" >> "$GITHUB_OUTPUT"
          echo "workspace_name=$WS" >> "$GITHUB_OUTPUT"
          echo "scheme=$SCHEME" >> "$GITHUB_OUTPUT"

      - name: "Doctor: verify workspace"
        working-directory: ios
        env:
          WORKSPACE: ${{ steps.detect.outputs.workspace_name }}
          SCHEME: ${{ steps.detect.outputs.scheme }}
        run: ./scripts/doctor.sh

      - name: Resolve SPM
        env:
          WORKSPACE: ${{ steps.detect.outputs.workspace }}
          SCHEME: ${{ steps.detect.outputs.scheme }}
          DERIVED_DATA: ${{ env.DERIVED_DATA }}
        run: |
          set -euxo pipefail
          xcodebuild -resolvePackageDependencies \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -clonedSourcePackagesDirPath "$DERIVED_DATA/SourcePackages"

      - name: Prepare Simulator
        id: sim
        env:
          DERIVED_DATA: ${{ env.DERIVED_DATA }}
        run: |
          set -euxo pipefail
          RB="${DERIVED_DATA}/ResultBundle_build.xcresult"
          rm -rf "$RB"

          # Collect simulator data (runtimes, devices, device types)
          SIM_JSON="$(xcrun simctl list -j runtimes devices devicetypes)"

          # Select preferred runtime (iOS 18.5 if available, else latest >= 18.0)
          SIM_VALUES="$(echo "$SIM_JSON" | python3 - <<'PY'
          import json, sys

          data = json.load(sys.stdin)

          def parse_version(v: str):
              return tuple(map(int, v.split('.')))

          runtimes = [
              rt for rt in data.get("runtimes", [])
              if rt.get("isAvailable")
              and rt.get("identifier", "").startswith("com.apple.CoreSimulator.SimRuntime.iOS")
              and parse_version(rt.get("version", "0"))[0] >= 18
          ]

          runtime = next((rt for rt in runtimes if rt.get("version", "").startswith("18.5")), None)
          if runtime is None and runtimes:
              runtimes.sort(key=lambda rt: parse_version(rt["version"]))
              runtime = runtimes[-1]
          if runtime is None:
              sys.exit(70)

          runtime_id = runtime["identifier"]

          devicetypes = data.get("devicetypes", [])
          device_type = next((dt for dt in devicetypes if dt.get("name") == "iPhone 16 Pro"), None)
          if device_type is None:
              device_type = next((dt for dt in devicetypes if dt.get("name", "").startswith("iPhone")), None)
          if device_type is None:
              sys.exit(71)

          device_type_id = device_type["identifier"]

          device_id = ""
          for dev in data.get("devices", {}).get(runtime_id, []):
              if dev.get("deviceTypeIdentifier") == device_type_id and dev.get("isAvailable"):
                  device_id = dev.get("udid", "")
                  break

          print(runtime_id)
          print(device_type_id)
          print(device_id)
          PY
          )"

          RUNTIME_ID="$(echo "$SIM_VALUES" | sed -n '1p')"
          DEVICE_TYPE="$(echo "$SIM_VALUES" | sed -n '2p')"
          DEVICE_ID="$(echo "$SIM_VALUES" | sed -n '3p')"

          if [ -z "${RUNTIME_ID:-}" ]; then
            echo "::error::No available iOS Simulator runtime >= 18.0 found."
            exit 70
          fi

          if [ -z "${DEVICE_TYPE:-}" ]; then
            echo "::error::No suitable iPhone device type found."
            exit 71
          fi

          if [ -z "${DEVICE_ID:-}" ]; then
            DEVICE_ID="$(xcrun simctl create CI-iPhone "$DEVICE_TYPE" "$RUNTIME_ID")"
          fi

          if [ -z "${DEVICE_ID:-}" ]; then
            echo "::error::Failed to create or find a simulator for runtime $RUNTIME_ID."
            exit 72
          fi

          xcrun simctl boot "$DEVICE_ID" >/dev/null 2>&1 || true
          xcrun simctl bootstatus "$DEVICE_ID" -b
          echo "dest=id=$DEVICE_ID" >> "$GITHUB_OUTPUT"

      - name: Build (Simulator)
        env:
          WORKSPACE: ${{ steps.detect.outputs.workspace }}
          SCHEME: ${{ steps.detect.outputs.scheme }}
          DERIVED_DATA: ${{ env.DERIVED_DATA }}
          RESULT_BUNDLE: ${{ env.DERIVED_DATA }}/ResultBundle_build.xcresult
          DEST: ${{ steps.sim.outputs.dest }}
        run: |
          set -euxo pipefail
          xcodebuild -workspace "$WORKSPACE" \
                     -scheme "$SCHEME" \
                     -configuration Release \
                     -destination "$DEST" \
                     -derivedDataPath "$DERIVED_DATA" \
                     -resultBundlePath "$RESULT_BUNDLE" \
                     clean build
