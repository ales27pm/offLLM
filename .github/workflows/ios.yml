---
name: ios (simulator)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  XCODE_VERSION: "16.4"

jobs:
  build:
    runs-on: macos-15 # newer image; arm64
    env:
      NODE_VERSION: 20
      RUBY_VERSION: 3.2
      DERIVED_DATA: ${{ github.workspace }}/build/DerivedData
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@c51a66b42363123fa82a6cfe02c60af4281dab93
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Set up Node
        uses: actions/setup-node@cd2651c46231bc0d6f48d6b34433b845331235fe
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Setup Ruby (3.2) + Bundler cache
        uses: ruby/setup-ruby@44511735964dcb71245e7e55f72539531f7bc0eb
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Install JS deps
        run: npm ci

      - name: Install XcodeGen (if needed)
        run: |
          if ! command -v xcodegen >/dev/null 2>&1; then
            brew update
            brew install xcodegen
          fi

      - name: Generate Xcode project (XcodeGen)
        run: |
          (cd ios && xcodegen generate)

      - name: Install CocoaPods (via bundler)
        working-directory: ios
        run: |
          bundle exec pod install --repo-update

      - name: Detect workspace and scheme
        id: detect
        working-directory: ios
        run: |
          set -euo pipefail
          WS=$(ls -1 *.xcworkspace 2>/dev/null | head -n1 || true)
          if [ -z "${WS:-}" ]; then
            echo "::error::No .xcworkspace found in ios/. Run XcodeGen and CocoaPods first."
            exit 2
          fi
          SCHEME=$(xcodebuild -list -json -workspace "$WS" | python -c 'import json,sys;j=json.load(sys.stdin);s=j.get("workspace",{}).get("schemes",[]);print(s[0] if s else "")')
          if [ -z "${SCHEME:-}" ]; then
            echo "::error::No shared schemes found in $WS"
            exit 3
          fi
          echo "workspace=ios/$WS" >> "$GITHUB_OUTPUT"
          echo "workspace_name=$WS" >> "$GITHUB_OUTPUT"
          echo "scheme=$SCHEME" >> "$GITHUB_OUTPUT"

      - name: "Doctor: verify workspace"
        run: ./scripts/ios_doctor.sh

      - name: Resolve SPM
        env:
          WORKSPACE: ${{ steps.detect.outputs.workspace }}
          SCHEME: ${{ steps.detect.outputs.scheme }}
          DERIVED_DATA: ${{ env.DERIVED_DATA }}
        run: |
          set -euxo pipefail
          xcodebuild -resolvePackageDependencies \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -clonedSourcePackagesDirPath "$DERIVED_DATA/SourcePackages"

      - name: Prepare Simulator
        id: sim
        env:
          DERIVED_DATA: ${{ env.DERIVED_DATA }}
        run: |
          set -euxo pipefail
          RB="${DERIVED_DATA}/ResultBundle_build.xcresult"
          rm -rf "$RB"

          # Prime CoreSimulator so lists are populated
          xcodebuild -runFirstLaunch >/dev/null 2>&1 || true
          xcrun simctl list >/dev/null 2>&1 || true

          # Collect JSON with a couple of retries
          SIM_JSON=""
          for i in 1 2 3; do
            if SIM_JSON="$(xcrun simctl list -j runtimes devices devicetypes)"; then
              if [ -n "$SIM_JSON" ] && [ "${#SIM_JSON}" -gt 100 ]; then
                break
              fi
            fi
            echo "simctl JSON empty on attempt $i; retrying..."
            sleep 2
          done
          if [ -z "$SIM_JSON" ]; then
            echo "::error::No simulator JSON available from simctl after retries."
            exit 70
          fi

          # Use shared helper to pick runtime/device from simctl JSON
          SIM_VALUES="$(node scripts/select-simulator.js <<<"$SIM_JSON")"
          RUNTIME_ID="$(echo "$SIM_VALUES" | sed -n '1p')"
          DEVICE_TYPE="$(echo "$SIM_VALUES" | sed -n '2p')"
          DEVICE_ID="$(echo "$SIM_VALUES" | sed -n '3p')"

          if [ -z "${RUNTIME_ID:-}" ]; then
            echo "::group::Available runtimes (debug)"
            echo "$SIM_JSON" | head -c 5000 || true
            echo "::endgroup::"
            echo "::error::No available iOS Simulator runtime found."
            exit 70
          fi
          if ! echo "$RUNTIME_ID" | grep -q "iOS-18"; then
            echo "::warning::Selected non-18.x runtime ($RUNTIME_ID); proceeding to keep build unblocked."
          fi
          if [ -z "${DEVICE_TYPE:-}" ]; then
            echo "::error::No suitable iPhone device type found."
            exit 71
          fi
          if [ -z "${DEVICE_ID:-}" ]; then
            DEVICE_ID="$(xcrun simctl create CI-iPhone "$DEVICE_TYPE" "$RUNTIME_ID")"
          fi
          if [ -z "${DEVICE_ID:-}" ]; then
            echo "::error::Failed to create or find a simulator for runtime $RUNTIME_ID."
            exit 72
          fi
          xcrun simctl boot "$DEVICE_ID" >/dev/null 2>&1 || true
          xcrun simctl bootstatus "$DEVICE_ID" -b
          echo "dest=id=$DEVICE_ID" >> "$GITHUB_OUTPUT"

      - name: Build (Simulator)
        env:
          WORKSPACE: ${{ steps.detect.outputs.workspace }}
          SCHEME: ${{ steps.detect.outputs.scheme }}
          DERIVED_DATA: ${{ env.DERIVED_DATA }}
          RESULT_BUNDLE: ${{ env.DERIVED_DATA }}/ResultBundle_build.xcresult
          DEST: ${{ steps.sim.outputs.dest }}
        run: |
          set -euxo pipefail
          xcodebuild -workspace "$WORKSPACE" \
                     -scheme "$SCHEME" \
                     -configuration Release \
                     -destination "$DEST" \
                     -derivedDataPath "$DERIVED_DATA" \
                     -resultBundlePath "$RESULT_BUNDLE" \
                     clean build

      - name: Extract errors from xcresult (build)
        if: always()
        run: |
          set -euo pipefail
          mkdir -p build
          RB="${DERIVED_DATA}/ResultBundle_build.xcresult"
          if [ -d "$RB" ]; then
            # Xcode 16.4+: use `get object`; fall back to legacy if needed
            if ! xcrun xcresulttool get object --path "$RB" --format json > "build/ResultBundle_build.json" 2>/dev/null; then
              if ! xcrun xcresulttool get --legacy --path "$RB" --format json > "build/ResultBundle_build.json" 2>/dev/null; then
                echo "Error: Failed to extract xcresult bundle with both 'get object' and legacy 'get'." >&2
                exit 1
              fi
            fi
            grep -n '"issue' "build/ResultBundle_build.json" | head -n 200 || true
          fi
