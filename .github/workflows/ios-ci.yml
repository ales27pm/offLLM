name: iOS CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: "20.19.4"
  CONFIGURATION: Release
  IOS_SDK: iphoneos
  # Artifact name for the unsigned build
  IPA_NAME: offLLM-unsigned.ipa

jobs:
  turbomodules:
    name: turbomodules
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      # (Optional) Put any RN/TurboModules build check you want here.
      - name: Sanity
        run: echo "TurboModules precheck OK"

  unsigned:
    name: unsigned
    runs-on: macos-14
    needs: turbomodules
    # ✅ Run even if turbomodules fails
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install JS deps
        run: npm ci

      - name: Install CocoaPods
        run: sudo gem install cocoapods -N

      - name: Generate Xcode project (XcodeGen)
        run: |
          brew update
          brew install xcodegen || true
          cd ios && xcodegen generate

      - name: Locate iOS app (+ Podfile / project / workspace)
        id: ios_paths
        shell: bash
        run: |
          set -euo pipefail
          echo "Searching for Podfile under ios/ …"
          PODFILE=$(git ls-files | grep -E '^ios(/.*)?/Podfile$' | head -n1 || true)
          if [[ -z "$PODFILE" ]]; then
            echo "❌ No Podfile found under ios/."
            exit 1
          fi
          PODDIR=$(dirname "$PODFILE")
          echo "PODFILE=$PODFILE" >> "$GITHUB_OUTPUT"
          echo "PODDIR=$PODDIR"   >> "$GITHUB_OUTPUT"

          echo "Searching for .xcodeproj within $PODDIR …"
          XCPROJ=$(find "$PODDIR" -maxdepth 4 -name "*.xcodeproj" | head -n1 || true)
          if [[ -z "$XCPROJ" ]]; then
            echo "❌ No .xcodeproj found within $PODDIR"
            exit 1
          fi
          echo "XCPROJ=$XCPROJ" >> "$GITHUB_OUTPUT"

          echo "Searching for .xcworkspace (optional) …"
          XCWORK=$(find "$PODDIR" -maxdepth 4 -name "*.xcworkspace" | head -n1 || true)
          echo "XCWORK=$XCWORK" >> "$GITHUB_OUTPUT"

          echo "Found:"
          echo " • Podfile:    $PODFILE"
          echo " • Xcodeproj:  $XCPROJ"
          echo " • Workspace:  ${XCWORK:-<none>}"

      - name: Patch Podfile project path if needed
        shell: bash
        run: |
          set -euo pipefail
          PODFILE="${{ steps.ios_paths.outputs.PODFILE }}"
          PODDIR="${{ steps.ios_paths.outputs.PODDIR }}"
          XCPROJ="${{ steps.ios_paths.outputs.XCPROJ }}"

          RELPROJ=$(python3 -c "import os,sys;print(os.path.relpath('${XCPROJ}','${PODDIR}'))")
          echo "Relative project path for Podfile: $RELPROJ"

          if grep -E "^\s*project\s+['\"][^'\"]+['\"]" "$PODFILE" >/dev/null 2>&1; then
            echo "Updating existing 'project' line in Podfile…"
            # macOS sed requires the empty '' after -i
            sed -i '' -E "s|^\s*project\s+['\"][^'\"]+['\"]|project '$RELPROJ'|g" "$PODFILE"
          else
            echo "No explicit 'project' line in Podfile — leaving as-is (CocoaPods can auto-detect)."
          fi

          echo "----- Podfile (after patch) -----"
          nl -ba "$PODFILE"

      - name: pod install
        shell: bash
        run: |
          set -euo pipefail
          cd "${{ steps.ios_paths.outputs.PODDIR }}"
          pod install --repo-update --verbose

      - name: React Native config
        run: npx react-native config

      - name: Detect build target (scheme & container)
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          PODDIR="${{ steps.ios_paths.outputs.PODDIR }}"
          XCPROJ="${{ steps.ios_paths.outputs.XCPROJ }}"
          XCWORK="${{ steps.ios_paths.outputs.XCWORK }}"
          if [[ -z "$XCWORK" ]]; then
            XCWORK=$(find "$PODDIR" -maxdepth 1 -name "*.xcworkspace" | head -n1 || true)
          fi
          PROJ_NAME=$(basename "${XCPROJ%.xcodeproj}")

          if [[ -n "$XCWORK" ]]; then
            echo "Using workspace: $XCWORK"
            LIST_JSON=$(xcodebuild -list -json -workspace "$XCWORK" 2>/dev/null || true)
          else
            echo "Using project: $XCPROJ"
            LIST_JSON=$(xcodebuild -list -json -project "$XCPROJ" 2>/dev/null || true)
          fi

          SCHEME=$(
            LIST_JSON="$LIST_JSON" PROJ_NAME="$PROJ_NAME" python3 - <<'PY'
          import json, os, sys
          data = os.environ.get("LIST_JSON", "")
          proj = os.environ.get("PROJ_NAME", "")
          try:
            j = json.loads(data)
            for key in ("workspace", "project"):
              if key in j and "schemes" in j[key] and j[key]["schemes"]:
                schemes = j[key]["schemes"]
                if proj and proj in schemes:
                  print(proj)
                  raise SystemExit
                for s in schemes:
                  if not s.startswith("Pods-"):
                    print(s)
                    raise SystemExit
                print(schemes[0])
                raise SystemExit
          except Exception:
            pass
          print("")
          PY
          )
          if [[ -z "$SCHEME" ]]; then
            SCHEME="$PROJ_NAME"
            echo "Falling back to scheme=$SCHEME"
          fi

          echo "SCHEME=$SCHEME" >> "$GITHUB_OUTPUT"
          echo "XCWORK=$XCWORK" >> "$GITHUB_OUTPUT"
          echo "SCHEME: $SCHEME"

      - name: Build (UNSIGNED)
        shell: bash
        run: |
          set -euo pipefail
          DERIVED="build"
          if [[ -n "${{ steps.detect.outputs.XCWORK }}" ]]; then
            xcodebuild \
              -workspace "${{ steps.detect.outputs.XCWORK }}" \
              -scheme "${{ steps.detect.outputs.SCHEME }}" \
              -sdk $IOS_SDK \
              -configuration $CONFIGURATION \
              -derivedDataPath "$DERIVED" \
              CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGNING_IDENTITY="" \
              clean build
          else
            xcodebuild \
              -project "${{ steps.ios_paths.outputs.XCPROJ }}" \
              -scheme "${{ steps.detect.outputs.SCHEME }}" \
              -sdk $IOS_SDK \
              -configuration $CONFIGURATION \
              -derivedDataPath "$DERIVED" \
              CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGNING_IDENTITY="" \
              clean build
          fi

      - name: Package unsigned .ipa
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${{ steps.detect.outputs.XCWORK }}" ]]; then
            BUILD_SETTINGS=$(xcodebuild \
              -workspace "${{ steps.detect.outputs.XCWORK }}" \
              -scheme "${{ steps.detect.outputs.SCHEME }}" \
              -sdk $IOS_SDK \
              -configuration $CONFIGURATION \
              -showBuildSettings 2>/dev/null)
          else
            BUILD_SETTINGS=$(xcodebuild \
              -project "${{ steps.ios_paths.outputs.XCPROJ }}" \
              -scheme "${{ steps.detect.outputs.SCHEME }}" \
              -sdk $IOS_SDK \
              -configuration $CONFIGURATION \
              -showBuildSettings 2>/dev/null)
          fi
          TARGET_BUILD_DIR=$(echo "$BUILD_SETTINGS" | awk -F' = ' '/TARGET_BUILD_DIR/ {print $2}' | tail -n1)
          FULL_PRODUCT_NAME=$(echo "$BUILD_SETTINGS" | awk -F' = ' '/FULL_PRODUCT_NAME/ {print $2}' | tail -n1)
          APP_PATH="$TARGET_BUILD_DIR/$FULL_PRODUCT_NAME"
          if [[ ! -d "$APP_PATH" ]]; then
            echo "❌ No .app produced at $APP_PATH"
            exit 1
          fi
          mkdir -p Payload
          cp -R "$APP_PATH" Payload/
          zip -r "$IPA_NAME" Payload
          rm -rf Payload
          echo "Created $IPA_NAME"

      - name: Upload artifact (unsigned IPA)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IPA_NAME }}
          path: ${{ env.IPA_NAME }}
          if-no-files-found: error
          retention-days: 7

  signed:
    name: signed
    runs-on: macos-14
    # ⏸️ Paused on purpose — flip to true or remove to enable later
    if: ${{ false }}
    steps:
      - run: echo "Signed build paused"
