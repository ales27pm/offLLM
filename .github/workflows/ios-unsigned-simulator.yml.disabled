name: iOS simulator build

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  XCODE_VERSION: "16.4"

jobs:
  build-ios:
    runs-on: macos-15
    env:
      NODE_VERSION: "20"
      RUBY_VERSION: "3.2"
      SCHEME: "monGARS"
      DERIVED_DATA: "${{ github.workspace }}/build/DerivedData"
      RESULT_BUNDLE: "${{ github.workspace }}/build/DerivedData/ResultBundle_build.xcresult"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Set up Node
        uses: actions/setup-node@cd2651c46231bc0d6f48d6b34433b845331235fe
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Set up Ruby
        uses: ruby/setup-ruby@44511735964dcb71245e7e55f72539531f7bc0eb
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Authenticate Git for SPM
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          git config --global url."https://x-access-token:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"

      - name: Show toolchain versions
        run: |
          sw_vers
          xcodebuild -version
          xcode-select -p
          node -v
          ruby --version
          gem --version

      # Node is already available; no jq needed for simulator prep

      - name: Cache node_modules
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: |
            node_modules
            ~/.cache/npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache CocoaPods
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: |
            ~/.cocoapods
            ios/Pods
          key: ${{ runner.os }}-pods-xcode-${{ env.XCODE_VERSION }}-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-xcode-${{ env.XCODE_VERSION }}-
            ${{ runner.os }}-pods-

      - name: Cache DerivedData (optional)
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ${{ env.DERIVED_DATA }}
          key: ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-${{ github.ref }}-
            ${{ runner.os }}-deriveddata-xcode-${{ env.XCODE_VERSION }}-

      - name: Install JS deps
        run: npm ci

      - name: Install XcodeGen (if needed)
        run: |
          if ! command -v xcodegen >/dev/null 2>&1; then
            brew update
            brew install xcodegen
          fi

      - name: Generate Xcode project (XcodeGen)
        run: |
          if [ -f "ios/project.yml" ]; then
            (cd ios && xcodegen generate)
          else
            echo "::error title=Missing XcodeGen spec::No ios/project.yml found"
            exit 1
          fi

      - name: Run codegen
        run: npm run codegen

      - name: Install CocoaPods
        run: |
          cd ios
          bundle exec pod install --repo-update
          cd ..

      - name: iOS Doctor (workspace must exist)
        run: |
          chmod +x scripts/ios_doctor.sh || true
          ./scripts/ios_doctor.sh

      - name: "Doctor: verify workspace path"
        run: |
          set -euo pipefail
          WS="${WORKSPACE:-ios/monGARS.xcworkspace}"
          case "$WS" in
            /*) WS="${WS#"$GITHUB_WORKSPACE"/}" ;;
          esac
          if [ ! -e "$WS" ]; then
            echo "::error title=Workspace missing::'$WS' not found. Check WORKSPACE env/Pod install."
            echo "pwd=$(pwd)"
            ls -la ios || true
            exit 66
          fi
          echo "WORKSPACE=$WS" >> "$GITHUB_ENV"

      - name: Resolve SwiftPM packages
        run: |
          set -euxo pipefail
          RB="$DERIVED_DATA/ResultBundle.xcresult"
          rm -rf "$RB"
          xcodebuild -resolvePackageDependencies \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -clonedSourcePackagesDirPath "$DERIVED_DATA/SourcePackages"
      # ---- Optional Simulator Smoke Build (non-blocking) ----
      # Gives early compile feedback without impacting the device archive.
      - name: Prepare Simulator
        id: sim
        continue-on-error: true
        run: |
          set -euxo pipefail
          RB="${DERIVED_DATA}/ResultBundle_build.xcresult"
          rm -rf "$RB"

          xcodebuild -runFirstLaunch >/dev/null 2>&1 || true
          xcrun simctl list >/dev/null 2>&1 || true

          SIM_JSON=""
          for i in 1 2 3; do
            if SIM_JSON="$(xcrun simctl list -j runtimes devices devicetypes)"; then
              if [ -n "$SIM_JSON" ] && [ "${#SIM_JSON}" -gt 100 ]; then
                break
              fi
            fi
            echo "simctl JSON empty on attempt $i; retrying..."
            sleep 2
          done
          if [ -z "$SIM_JSON" ]; then
            echo "::warning::No simulator JSON available from simctl after retries (skipping sim smoke build)."
            exit 0
          fi

          # Prefer iOS 18.5 if present and available; else pick latest available iOS>=18; else pick any iOS (warn)
          # Use shared helper to pick runtime & device
          SIM_VALUES="$(node scripts/select-simulator.js <<<"$SIM_JSON")"
          RUNTIME_ID="$(echo "$SIM_VALUES" | sed -n '1p')"
          DEVICE_TYPE="$(echo "$SIM_VALUES" | sed -n '2p')"
          DEVICE_ID="$(echo "$SIM_VALUES" | sed -n '3p')"

          if [ -z "${RUNTIME_ID:-}" ]; then
            echo "::warning::No iOS Simulator runtime found (skipping sim smoke build)."
            exit 0
          fi
          if ! echo "$RUNTIME_ID" | grep -q "iOS-18"; then
            echo "::warning::Falling back to non-18.x simulator runtime: $RUNTIME_ID"
          fi
          if [ -z "${DEVICE_TYPE:-}" ]; then
            echo "::warning::No iPhone device type found in simctl output (skipping sim smoke build)."
            exit 0
          fi
          if [ -z "${DEVICE_ID:-}" ]; then
            DEVICE_ID="$(xcrun simctl create "CI-iPhone" "$DEVICE_TYPE" "$RUNTIME_ID")"
          fi
          if [ -z "${DEVICE_ID:-}" ]; then
            echo "::warning::Failed to create or find a simulator for runtime $RUNTIME_ID (skipping sim smoke build)."
            exit 0
          fi

          echo "Runtime: $RUNTIME_ID"
          echo "DeviceType: $DEVICE_TYPE"
          echo "DeviceID: $DEVICE_ID"
          xcrun simctl boot "$DEVICE_ID" >/dev/null 2>&1 || true
          xcrun simctl bootstatus "$DEVICE_ID" -b
          echo "dest=id=$DEVICE_ID" >> "$GITHUB_OUTPUT"

      - name: Build (Simulator) â€” smoke test
        if: steps.sim.outputs.dest != ''
        continue-on-error: true
        env:
          RESULT_BUNDLE: ${{ env.DERIVED_DATA }}/ResultBundle_build.xcresult
        run: |
          set -euxo pipefail
          xcodebuild -workspace "$WORKSPACE" \
                     -scheme "$SCHEME" \
                     -configuration Release \
                     -destination "${{ steps.sim.outputs.dest }}" \
                     -derivedDataPath "$DERIVED_DATA" \
                     -resultBundlePath "$RESULT_BUNDLE" \
                     clean build
